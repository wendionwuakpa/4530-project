{"version":3,"file":"TwilsockConnector.js","sources":["../src/TwilsockConnector.ts"],"sourcesContent":["import * as uuid from \"uuid\";\nimport { RegistrationState, UpdateReason, Connector } from \"./connector\";\nimport { TwilsockClient } from \"twilsock\";\nimport { log } from \"./logger\";\n\n/**\n * Registrar connector implementation for twilsock -- @todo Drop twilsock.connector COMPLETELY?!\n */\nclass TwilsockConnector extends Connector {\n  private readonly contextId: string = uuid.v4();\n  /**\n   * Create twilsock registration connector.\n   * @param productId product ID\n   * @param platform platform ID string\n   * @param twilsock {TwilsockClient} connection transport.\n   */\n  constructor(\n    private readonly productId: string,\n    private readonly platform: string,\n    private readonly twilsock: TwilsockClient\n  ) {\n    super(\"twilsock\");\n  }\n\n  protected async updateRegistration(\n    registration: RegistrationState,\n    reasons: Set<UpdateReason>\n  ): Promise<RegistrationState> {\n    if (!reasons.has(\"messageType\")) {\n      // No changed message types - it is fine, finish successfully.\n      return registration;\n    }\n\n    const messageTypes = Array.from(registration.messageTypes);\n\n    const context = {\n      product_id: this.productId,\n      notification_protocol_version: 4,\n      endpoint_platform: this.platform,\n      message_types: messageTypes,\n    };\n\n    try {\n      await this.twilsock.setNotificationsContext(this.contextId, context);\n    } catch (err) {\n      log.error(`Failed to update twilsock notification context: ${err}`);\n      throw err;\n    }\n\n    return registration;\n  }\n\n  protected async removeRegistration(): Promise<void> {\n    try {\n      await this.twilsock.removeNotificationsContext(this.contextId);\n    } catch (err) {\n      log.error(`Failed to remove twilsock notification context: ${err}`);\n      throw err;\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public async sendDeviceRemoveRequest(registrationId: string): Promise<void> {\n    // no need to do anything here, twilsock backend handles it on its own\n  }\n}\n\nexport { TwilsockConnector };\n"],"names":["Connector","uuid","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;AAEG;AACH,MAAM,iBAAkB,SAAQA,mBAAS,CAAA;AAEvC;;;;;AAKG;AACH,IAAA,WAAA,CACmB,SAAiB,EACjB,QAAgB,EAChB,QAAwB,EAAA;QAEzC,KAAK,CAAC,UAAU,CAAC,CAAC;QAJD,IAAS,CAAA,SAAA,GAAT,SAAS,CAAQ;QACjB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAQ;QAChB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAgB;AAV1B,QAAA,IAAA,CAAA,SAAS,GAAWC,eAAI,CAAC,EAAE,EAAE,CAAC;KAa9C;AAES,IAAA,MAAM,kBAAkB,CAChC,YAA+B,EAC/B,OAA0B,EAAA;AAE1B,QAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE;;AAE/B,YAAA,OAAO,YAAY,CAAC;AACrB,SAAA;QAED,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;AAE3D,QAAA,MAAM,OAAO,GAAG;YACd,UAAU,EAAE,IAAI,CAAC,SAAS;AAC1B,YAAA,6BAA6B,EAAE,CAAC;YAChC,iBAAiB,EAAE,IAAI,CAAC,QAAQ;AAChC,YAAA,aAAa,EAAE,YAAY;SAC5B,CAAC;QAEF,IAAI;AACF,YAAA,MAAM,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AACtE,SAAA;AAAC,QAAA,OAAO,GAAG,EAAE;AACZ,YAAAC,UAAG,CAAC,KAAK,CAAC,mDAAmD,GAAG,CAAA,CAAE,CAAC,CAAC;AACpE,YAAA,MAAM,GAAG,CAAC;AACX,SAAA;AAED,QAAA,OAAO,YAAY,CAAC;KACrB;AAES,IAAA,MAAM,kBAAkB,GAAA;QAChC,IAAI;YACF,MAAM,IAAI,CAAC,QAAQ,CAAC,0BAA0B,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAChE,SAAA;AAAC,QAAA,OAAO,GAAG,EAAE;AACZ,YAAAA,UAAG,CAAC,KAAK,CAAC,mDAAmD,GAAG,CAAA,CAAE,CAAC,CAAC;AACpE,YAAA,MAAM,GAAG,CAAC;AACX,SAAA;KACF;;IAGM,MAAM,uBAAuB,CAAC,cAAsB,EAAA;;KAE1D;AACF;;;;"}