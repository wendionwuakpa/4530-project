{"version":3,"file":"connector.js","sources":["../src/connector.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\nimport { log } from \"./logger\";\n\ntype ChannelType = \"twilsock\" | \"apn\" | \"fcm\";\n\ntype UpdateReason = \"token\" | \"notificationId\" | \"messageType\";\n\nclass RegistrationState {\n  constructor(\n    public token: string = \"\",\n    public notificationId: string = \"\",\n    public messageTypes: Set<string> = new Set<string>()\n  ) {}\n}\n\nfunction setDifference<T>(a: Set<T>, b: Set<T>): Array<T> {\n  return [\n    ...[...a].filter((x) => !b.has(x)),\n    ...[...b].filter((x) => !a.has(x)),\n  ];\n}\n\nfunction hasDifference(\n  a: RegistrationState,\n  b: RegistrationState\n): [boolean, Set<UpdateReason>] {\n  const reasons = new Set<UpdateReason>();\n  if (a.notificationId !== b.notificationId) {\n    reasons.add(\"notificationId\");\n  }\n\n  if (a.token !== b.token) {\n    reasons.add(\"token\");\n  }\n\n  if (setDifference(a.messageTypes, b.messageTypes).length > 0) {\n    reasons.add(\"messageType\");\n  }\n\n  return [reasons.size > 0, reasons];\n}\n\nabstract class Connector extends EventEmitter {\n  protected readonly desiredState: RegistrationState = new RegistrationState();\n  protected readonly currentState: RegistrationState = new RegistrationState();\n  private _hasActiveAttempt = false; // @todo replace with FSM\n\n  protected constructor(protected readonly channelType: ChannelType) {\n    super();\n  }\n\n  /**\n   * Set desired notification ID for the registration.\n   * Call commitChanges() afterwards to commit this change.\n   * @param notificationId Notification context ID to register.\n   */\n  public setNotificationId(notificationId: string): void {\n    this.desiredState.notificationId = notificationId;\n  }\n\n  /**\n   * Return true is this connector is in usable state and should be able to commit changes.\n   */\n  public isActive(): boolean {\n    return this.desiredState.notificationId !== \"\";\n  }\n\n  public subscribe(messageType: string): void {\n    if (this.desiredState.messageTypes.has(messageType)) {\n      log.debug(\n        `message type '${messageType}' for channel ${this.channelType} is already registered`\n      );\n      return;\n    }\n\n    this.desiredState.messageTypes.add(messageType);\n  }\n\n  public unsubscribe(messageType: string): void {\n    if (!this.desiredState.messageTypes.has(messageType)) {\n      return;\n    }\n\n    this.desiredState.messageTypes.delete(messageType);\n  }\n\n  public updateToken(token: string): void {\n    // @todo not entirely correct?\n    this.desiredState.token = token;\n  }\n\n  /**\n   * Perform actual registration after all required changes are settled.\n   */\n  public async commitChanges(): Promise<void> {\n    // if (!this.config.token || this.config.token.length === 0) { // @todo factor desiredState.token here?\n    //   log.trace(\"Can't persist registration: token is not set\");\n    //   return;\n    // }\n\n    if (this._hasActiveAttempt) {\n      // Concurrent access violation\n      log.error(\"One registration attempt is already in progress\");\n      throw new Error(\"One registration attempt is already in progress\");\n    }\n\n    const [needToUpdate, reasons] = hasDifference(\n      this.desiredState,\n      this.currentState\n    );\n    if (!needToUpdate) {\n      // The state did not change - complete successfully!\n      return;\n    }\n\n    if (!this.currentState.notificationId) {\n      reasons.delete(\"notificationId\");\n    }\n\n    log.trace(\n      `Persisting ${this.channelType} registration`,\n      reasons,\n      this.desiredState\n    );\n    try {\n      this._hasActiveAttempt = true;\n\n      const stateToPersist: RegistrationState = new RegistrationState();\n      stateToPersist.token = this.desiredState.token;\n      stateToPersist.notificationId = this.desiredState.notificationId;\n      stateToPersist.messageTypes = new Set(this.desiredState.messageTypes);\n\n      if (stateToPersist.messageTypes.size > 0) {\n        const persistedState = await this.updateRegistration(\n          stateToPersist,\n          reasons\n        );\n        this.currentState.token = persistedState.token;\n        this.currentState.notificationId = persistedState.notificationId;\n        this.currentState.messageTypes = new Set(persistedState.messageTypes);\n\n        // @todo twilsock emits registered(notificationContextId) when this context is reg'd\n        this.emit(\n          \"stateChanged\",\n          this.channelType,\n          \"registered\",\n          this.currentState\n        );\n      } else {\n        await this.removeRegistration();\n        this.currentState.token = stateToPersist.token;\n        this.currentState.notificationId = stateToPersist.notificationId;\n        this.currentState.messageTypes.clear();\n\n        this.emit(\n          \"stateChanged\",\n          this.channelType,\n          \"unregistered\",\n          this.currentState\n        );\n      }\n    } catch (e) {\n      throw e; // Forward any errors up\n    } finally {\n      this._hasActiveAttempt = false;\n    }\n  }\n\n  /**\n   * This one goes completely beside the state machine and removes all registrations.\n   * Use with caution: if it races with current state machine operations, madness will ensue.\n   */\n  public abstract sendDeviceRemoveRequest(\n    registrationId: string\n  ): Promise<void>;\n\n  protected abstract updateRegistration(\n    registration: RegistrationState,\n    reasons: Set<UpdateReason>\n  ): Promise<RegistrationState>;\n\n  protected abstract removeRegistration(): Promise<void>;\n}\n\nexport { UpdateReason, RegistrationState, ChannelType, Connector };\n"],"names":["EventEmitter","log"],"mappings":"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"}