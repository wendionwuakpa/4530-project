{"version":3,"file":"RegistrarConnector.js","sources":["../src/RegistrarConnector.ts"],"sourcesContent":["import { AsyncRetrier } from \"@twilio/operation-retrier\";\nimport {\n  UpdateReason,\n  RegistrationState,\n  Connector,\n  ChannelType,\n} from \"./connector\";\nimport { TwilsockClient } from \"twilsock\";\nimport { log } from \"./logger\";\n\nconst retrierConfig = {\n  min: 2000, // ms\n  max: 120000, // ms\n  randomness: 0.2,\n};\n\nexport interface RegistrarContext {\n  protocolVersion: number;\n  productId: string;\n  platform: string;\n}\n\n/**\n * Manages the registrations on ERS service.\n * Deduplicates registrations and manages them automatically.\n */\nclass RegistrarConnector extends Connector {\n  private registrationId: string | null = null;\n\n  /**\n   * Creates new instance of the ERS registrar\n   *\n   * @param channelType {string} Channel this connector will be servicing.\n   * @param context {any} productId, platform, and protocolVersion.\n   * @param twilsock {TwilsockClient} connection transport.\n   * @param registrarUrl {string}\n   */\n  constructor(\n    channelType: ChannelType,\n    private readonly context: RegistrarContext, // context is separate from config because it's not shared with other connectors\n    private readonly twilsock: TwilsockClient,\n    private readonly registrarUrl: string\n  ) {\n    super(channelType);\n  }\n\n  protected async updateRegistration(\n    registration: RegistrationState,\n    reasons: Set<UpdateReason>\n  ): Promise<RegistrationState> {\n    if (reasons.has(\"notificationId\")) {\n      await this.removeRegistration();\n    }\n\n    if (!registration.notificationId || !registration.notificationId.length) {\n      log.error(`No push notification ID for registration`);\n      throw new Error(`No push notification ID for registration`); // @todo FSM update to error perhaps\n    }\n\n    log.trace(\"Registering\", this.channelType, registration);\n\n    const registrarRequest = {\n      endpoint_platform: this.context.platform,\n      channel_type: this.channelType,\n      version: this.context.protocolVersion.toString(),\n      message_types: Array.from(registration.messageTypes),\n      data: {\n        registration_id: registration.notificationId,\n      },\n      //ttl: 'PT24H' - This is totally ignored by notify, all bindings use PT1Y ttl.\n    };\n\n    const productId = this.context.productId;\n\n    const url = `${this.registrarUrl}?productId=${productId}`;\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      // 'X-Twilio-Token': registration.token\n    };\n\n    log.trace(`Creating registration for channel ${this.channelType}`);\n    try {\n      const response = (await new AsyncRetrier(retrierConfig).run(() =>\n        this.twilsock.post(url, headers, registrarRequest, productId)\n      )) as any;\n      this.registrationId = response.body.id;\n      log.debug(\"Registration created: \", response);\n    } catch (err) {\n      log.error(\"Registration failed: \", err);\n      throw err;\n    }\n\n    return registration;\n  }\n\n  protected async removeRegistration(): Promise<void> {\n    if (!this.registrationId) {\n      // No registration ID - no problem, finish successfully.\n      return;\n    }\n\n    const productId = this.context.productId;\n\n    const url = `${this.registrarUrl}/${this.registrationId}?productId=${productId}`;\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      // 'X-Twilio-Token': this.config.token\n    };\n\n    log.trace(`Removing registration for ${this.channelType}`);\n    try {\n      await new AsyncRetrier(\n        Object.assign(retrierConfig, { maxAttemptsCount: 3 })\n      ).run(() => this.twilsock.delete(url, headers, {}, productId));\n      this.registrationId = null;\n      this.currentState.notificationId = \"\";\n      log.debug(`Registration removed for ${this.channelType}`);\n    } catch (err) {\n      log.error(\"Failed to remove registration \", this.channelType, err);\n      throw err;\n    }\n  }\n\n  public async sendDeviceRemoveRequest(registrationId: string): Promise<void> {\n    if (registrationId === \"\") {\n      throw new Error(\"Empty registration ID\");\n    }\n\n    const productId = this.context.productId;\n\n    const url = `${this.registrarUrl}?productId=${productId}`;\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      // @todo Content-Length??\n    };\n    const payload = {\n      binding_type: this.channelType,\n      address: registrationId,\n    };\n\n    try {\n      log.trace(`Removing old registrations for ${this.channelType}`);\n      await new AsyncRetrier(\n        Object.assign(retrierConfig, { maxAttemptsCount: 3 })\n      ).run(() => this.twilsock.delete(url, headers, payload, productId));\n      this.registrationId = null;\n      this.currentState.notificationId = \"\";\n      log.debug(`Registration removed for ${this.channelType}`);\n    } catch (err) {\n      log.error(\"Failed to remove registration \", this.channelType, err);\n      throw err;\n    }\n  }\n}\n\nexport { Connector, RegistrarConnector };\n"],"names":["Connector","log","AsyncRetrier"],"mappings":"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"}