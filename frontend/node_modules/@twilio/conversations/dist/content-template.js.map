{"version":3,"file":"content-template.js","sources":["../src/content-template.ts"],"sourcesContent":["import {\n  ContentDataCallToActionResponse,\n  ContentDataCardResponse,\n  ContentDataListPickerResponse,\n  ContentDataLocationResponse,\n  ContentDataMediaResponse,\n  ContentDataQuickReplyResponse,\n  ContentDataTextResponse,\n  ContentTemplateResponse,\n} from \"./interfaces/commands/content-templates-response\";\n\n/**\n * Shows a button that sends back a predefined text. Used in\n * {@link ContentDataQuickReply}.\n */\ntype ContentDataReply = {\n  /**\n   * Display value of the action. This is the message that will be sent back\n   * when the user taps on the button.\n   */\n  readonly title: string;\n\n  /**\n   * Postback payload. This field is not visible to the end user.\n   */\n  readonly id?: string;\n};\n\n/**\n * Shows a button that redirects recipient to a predefined URL.\n */\ntype ContentDataActionUrl = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"url\";\n\n  /**\n   * Display value for the action.\n   */\n  readonly title: string;\n\n  /**\n   * URL to direct to when the recipient taps the button.\n   */\n  readonly url: string;\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Shows a button that calls a phone number.\n */\ntype ContentDataActionPhone = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"phone\";\n\n  /**\n   * Display value for the action.\n   */\n  readonly title: string;\n\n  /**\n   * Phone number to call when the recipient taps the button.\n   */\n  readonly phone: string;\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Shows a button that sends back a predefined text.\n */\ntype ContentDataActionReply = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"reply\";\n\n  /**\n   * Display value for the action. This is the message that will be sent back\n   * when the user taps on the button.\n   */\n  readonly title: string;\n\n  /**\n   * Postback payload. This field is not visible to the end user.\n   */\n  readonly id?: string;\n\n  /**\n   * Index for the action.\n   */\n  readonly index: number;\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Used for unknown action types which aren't present in the current version of\n * the Conversations SDK.\n */\ntype ContentDataActionOther = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"other\";\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * A union of possible actions used in {@link ContentDataCallToAction} and\n * {@link ContentDataCard}.\n */\ntype ContentDataAction =\n  | ContentDataActionUrl\n  | ContentDataActionPhone\n  | ContentDataActionReply\n  | ContentDataActionOther;\n\n/**\n * Represents an item in the {@link ContentDataListPicker}.\n */\ntype ContentDataListItem = {\n  /**\n   * Unique item identifier. Not visible to the recipient.\n   */\n  readonly id: string;\n\n  /**\n   * Display value of the item.\n   */\n  readonly item: string;\n\n  /**\n   * Description of the item.\n   */\n  readonly description?: string;\n};\n\n/**\n * Contains only the plain text-based content. Represents the twilio/text\n * content type.\n */\ntype ContentDataText = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"text\";\n\n  /**\n   * The text of the message you want to send.\n   */\n  readonly body: string;\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Used to send file attachments, or to send long texts via MMS in the US and\n * Canada. Represents the twilio/media content type.\n */\ntype ContentDataMedia = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"media\";\n\n  /**\n   * The text of the message you want to send.\n   */\n  readonly body?: string;\n\n  /**\n   * URLs of the media you want to send.\n   */\n  readonly media: string[];\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Contains a location pin and an optional label, which can be used to enhance\n * delivery notifications or connect recipients to physical experiences you\n * offer. Represents the twilio/location content type.\n */\ntype ContentDataLocation = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"location\";\n\n  /**\n   * The longitude value of the location pin you want to send.\n   */\n  readonly longitude: number;\n\n  /**\n   * The latitude value of the location pin you want to send.\n   */\n  readonly latitude: number;\n\n  /**\n   * The label to be displayed to the end user alongside the location pin.\n   */\n  readonly label?: string;\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Let recipients tap, rather than type, to respond to the message. Represents\n * the twilio/quick-reply content type.\n */\ntype ContentDataQuickReply = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"quickReply\";\n\n  /**\n   * The text of the message you want to send. This is included as a regular\n   * text message.\n   */\n  readonly body: string;\n\n  /**\n   * Up to 3 buttons can be created for quick reply. See\n   * {@link ContentDataReply}.\n   */\n  readonly replies: ContentDataReply[];\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Buttons that let recipients tap to trigger actions such as launching a\n * website or making a phone call. Represents the twilio/call-to-action content\n * type.\n */\ntype ContentDataCallToAction = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"callToAction\";\n\n  /**\n   * The text of the message you want to send. This is included as a regular\n   * text message.\n   */\n  readonly body: string;\n\n  /**\n   * Buttons that recipients can tap on to act on the message.\n   */\n  readonly actions: ContentDataAction[];\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Shows a menu of up to 10 options, which offers a simple way for users to make\n * a selection. Represents the twilio/list-picker content type.\n */\ntype ContentDataListPicker = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"listPicker\";\n\n  /**\n   * The text of the message you want to send. This is rendered as the body of\n   * the message.\n   */\n  readonly body: string;\n\n  /**\n   * Display value of the primary button.\n   */\n  readonly button: string;\n\n  /**\n   * List item objects displayed in the list. See {@link ContentDataListItem}.\n   */\n  readonly items: ContentDataListItem[];\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Shows a menu of up to 10 options, which offers a simple way for users to make\n * a selection. Represents the twilio/card content type.\n */\ntype ContentDataCard = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"card\";\n\n  /**\n   * Title of the card.\n   */\n  readonly title: string;\n\n  /**\n   * Subtitle of the card.\n   */\n  readonly subtitle?: string;\n\n  /**\n   * URLs of the media to send with the message.\n   */\n  readonly media: string[];\n\n  /**\n   * Buttons that the recipients can tap on to act on the message.\n   */\n  readonly actions: ContentDataAction[];\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * Used for unknown content types which aren't present in the current version of\n * the Conversations SDK.\n */\ntype ContentDataOther = {\n  /**\n   * The type discriminant.\n   */\n  readonly type: \"other\";\n\n  /**\n   * Full data as a stringified JSON. This could be used for future content\n   * types and fields which are not yet supported by the newest version of\n   * the Conversations SDK, or for using newer types in the older versions of\n   * the SDK.\n   */\n  readonly rawData: string;\n};\n\n/**\n * A union of possible data types in rich content templates.\n */\ntype ContentData =\n  | ContentDataText\n  | ContentDataMedia\n  | ContentDataLocation\n  | ContentDataQuickReply\n  | ContentDataCallToAction\n  | ContentDataListPicker\n  | ContentDataCard\n  | ContentDataOther;\n\nconst collectActions = (\n  actions: ContentDataCallToActionResponse[\"actions\"]\n): ContentDataAction[] => {\n  return actions.map((action) => {\n    const rawData = JSON.stringify(action);\n\n    switch (action.type) {\n      case \"QUICK_REPLY\":\n        return {\n          type: \"reply\",\n          title: action.title,\n          id: action.id ?? \"\",\n          index: action.index ?? 0,\n          rawData,\n        };\n      case \"PHONE_NUMBER\":\n        return {\n          type: \"phone\",\n          title: action.title,\n          phone: action.phone ?? \"\",\n          rawData,\n        };\n      case \"URL\":\n        return {\n          type: \"url\",\n          title: action.title,\n          url: action.url ?? \"\",\n          rawData,\n        };\n      default:\n        return {\n          type: \"other\",\n          rawData,\n        };\n    }\n  });\n};\n\nconst parseVariant = (type: string, data: unknown): ContentData => {\n  const rawData = JSON.stringify(data);\n\n  switch (type) {\n    case \"twilio/text\": {\n      const variant = data as ContentDataTextResponse;\n      return {\n        type: \"text\",\n        body: variant.body,\n        rawData,\n      };\n    }\n    case \"twilio/media\": {\n      const variant = data as ContentDataMediaResponse;\n      return {\n        type: \"media\",\n        body: variant.body,\n        media: variant.media,\n        rawData,\n      };\n    }\n    case \"twilio/location\": {\n      const variant = data as ContentDataLocationResponse;\n      return {\n        type: \"location\",\n        longitude: variant.longitude,\n        latitude: variant.latitude,\n        label: variant.label,\n        rawData,\n      };\n    }\n    case \"twilio/quick-reply\": {\n      const variant = data as ContentDataQuickReplyResponse;\n      return {\n        type: \"quickReply\",\n        body: variant.body,\n        replies: variant.actions,\n        rawData,\n      };\n    }\n    case \"twilio/call-to-action\": {\n      const variant = data as ContentDataCallToActionResponse;\n      return {\n        type: \"callToAction\",\n        body: variant.body,\n        actions: collectActions(variant.actions),\n        rawData,\n      };\n    }\n    case \"twilio/list-picker\": {\n      const variant = data as ContentDataListPickerResponse;\n      return {\n        type: \"listPicker\",\n        body: variant.body,\n        button: variant.button,\n        items: variant.items,\n        rawData,\n      };\n    }\n    case \"twilio/card\": {\n      const variant = data as ContentDataCardResponse;\n      return {\n        type: \"card\",\n        title: variant.title,\n        subtitle: variant.subtitle,\n        media: variant.media ?? [],\n        actions: collectActions(variant.actions ?? []),\n        rawData,\n      };\n    }\n    default:\n      return {\n        type: \"other\",\n        rawData,\n      };\n  }\n};\n\nconst collectVariants = (\n  variants: ContentTemplateResponse[\"variants\"]\n): Map<string, ContentData> => {\n  const variantsMap = new Map<string, ContentData>();\n\n  for (const [key, value] of Object.entries(variants)) {\n    variantsMap.set(key, parseVariant(key, value));\n  }\n\n  return variantsMap;\n};\n\n/**\n * Represents a variable for a content template. See\n * {@link ContentTemplate.variables}.\n */\nclass ContentTemplateVariable {\n  public constructor(\n    /**\n     * Name of the variable.\n     */\n    public readonly name: string,\n\n    /**\n     * Key of the variable\n     */\n    public readonly value: string\n  ) {}\n\n  /**\n   * Copies the variable with a new value.\n   *\n   * @param value The new value for the variable.\n   */\n  public copyWithValue(value: string) {\n    return new ContentTemplateVariable(this.name, value);\n  }\n}\n\n/**\n * A rich content template.\n *\n * Use {@Link Client.getContentTemplates} to request all the templates available\n * for the current account.\n */\nclass ContentTemplate {\n  /**\n   * The server-assigned unique identifier for the template.\n   */\n  public readonly sid: string;\n\n  /**\n   * Friendly name used to describe the content. Not visible to the recipient.\n   */\n  public readonly friendlyName: string;\n\n  /**\n   * Variables used by this template.\n   */\n  public readonly variables: ContentTemplateVariable[];\n\n  /**\n   * Variants of the content. See {@link ContentData}.\n   */\n  public readonly variants: Map<string, ContentData>;\n\n  /**\n   * Date of creation.\n   */\n  public readonly dateCreated: Date;\n\n  /**\n   * Date of the last update.\n   */\n  public readonly dateUpdated: Date;\n\n  /**\n   * @internal\n   */\n  public constructor(contentTemplateResponse: ContentTemplateResponse) {\n    this.sid = contentTemplateResponse.sid;\n    this.friendlyName = contentTemplateResponse.friendly_name;\n    this.variables = Object.entries(\n      JSON.parse(contentTemplateResponse.variables) as Record<string, string>\n    ).map(([key, value]) => new ContentTemplateVariable(key, value));\n    this.variants = collectVariants(contentTemplateResponse.variants);\n    this.dateCreated = new Date(contentTemplateResponse.date_created);\n    this.dateUpdated = new Date(contentTemplateResponse.date_updated);\n  }\n}\n\nexport {\n  ContentDataActionUrl,\n  ContentDataActionPhone,\n  ContentDataActionReply,\n  ContentDataActionOther,\n  ContentDataAction,\n  ContentDataText,\n  ContentDataMedia,\n  ContentDataLocation,\n  ContentDataReply,\n  ContentDataQuickReply,\n  ContentDataCallToAction,\n  ContentDataListPicker,\n  ContentDataListItem,\n  ContentDataCard,\n  ContentDataOther,\n  ContentData,\n  ContentTemplate,\n  ContentTemplateVariable,\n  parseVariant,\n};\n"],"names":[],"mappings":"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"}