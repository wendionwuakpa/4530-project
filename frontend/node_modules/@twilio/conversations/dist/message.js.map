{"version":3,"file":"message.js","sources":["../src/message.ts"],"sourcesContent":["import { parseAttributes, UriBuilder } from \"./util\";\nimport { Logger } from \"./logger\";\nimport { Conversation } from \"./conversation\";\nimport {\n  CancellablePromise,\n  McsClient,\n  MediaCategory,\n} from \"@twilio/mcs-client\";\nimport { Media } from \"./media\";\nimport { Participant } from \"./participant\";\nimport {\n  AggregatedDeliveryDescriptor,\n  AggregatedDeliveryReceipt,\n} from \"./aggregated-delivery-receipt\";\nimport {\n  validateTypes,\n  validateTypesAsync,\n  nonEmptyString,\n  nonEmptyArray,\n} from \"@twilio/declarative-type-validator\";\nimport { json } from \"./interfaces/rules\";\nimport { Network } from \"./services/network\";\nimport { RestPaginator } from \"./rest-paginator\";\nimport { DetailedDeliveryReceipt } from \"./detailed-delivery-receipt\";\nimport { Paginator } from \"./interfaces/paginator\";\nimport { Configuration } from \"./configuration\";\nimport { CommandExecutor } from \"./command-executor\";\nimport { EditMessageRequest } from \"./interfaces/commands/edit-message\";\nimport { MessageResponse } from \"./interfaces/commands/message-response\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\nimport isEqual from \"lodash.isequal\";\nimport { JSONValue } from \"./types\";\nimport { ResponseMeta } from \"./interfaces/commands/response-meta\";\nimport { DeliveryReceiptResponse } from \"./interfaces/commands/delivery-receipt-response\";\nimport { deprecated } from \"@twilio/deprecation-decorator\";\nimport { ContentData, parseVariant } from \"./content-template\";\nimport {\n  ChannelMetadata,\n  ChannelMetadataClient,\n} from \"./channel-metadata-client\";\n\ntype MessageEvents = {\n  updated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n};\n\nconst log = Logger.scope(\"Message\");\nconst XHR =\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  global[\"XMLHttpRequest\"] || require(\"xmlhttprequest\").XMLHttpRequest;\n\ninterface MessageState {\n  sid: string;\n  index: number;\n  author: string | null;\n  subject: string | null;\n  contentSid: string | null;\n  body: string | null;\n  dateUpdated: Date | null;\n  lastUpdatedBy: string | null;\n  attributes: JSONValue;\n  timestamp: Date | null;\n  type: MessageType;\n  media: Media | null;\n  medias: Media[] | null;\n  participantSid: string | null;\n  aggregatedDeliveryReceipt: AggregatedDeliveryReceipt | null;\n  hasChannelMetadata: boolean;\n}\n\ninterface MessageServices {\n  mcsClient: McsClient;\n  network: Network;\n  commandExecutor: CommandExecutor;\n  channelMetadataClient: ChannelMetadataClient;\n}\n\ninterface MessageLinks {\n  self: string;\n  conversation: string;\n  messages_receipts: string;\n}\n\n/**\n * The reason for the `updated` event being emitted by a message.\n */\ntype MessageUpdateReason =\n  | \"body\"\n  | \"lastUpdatedBy\"\n  | \"dateCreated\"\n  | \"dateUpdated\"\n  | \"attributes\"\n  | \"author\"\n  | \"deliveryReceipt\"\n  | \"subject\";\n\n/**\n * Type of a message.\n */\ntype MessageType = \"text\" | \"media\";\n\ninterface MessageUpdatedEventArgs {\n  message: Message;\n  updateReasons: MessageUpdateReason[];\n}\n\nexport interface MessageData {\n  sid: string;\n  text?: string;\n  type?: MessageType;\n  author: string | null;\n  subject: string | null;\n  contentSid: string | null;\n  lastUpdatedBy?: string | null;\n  attributes?: JSONValue;\n  dateUpdated: string;\n  timestamp?: string;\n  medias?: Media[];\n  media?: Media;\n  memberSid?: string;\n  delivery?: AggregatedDeliveryDescriptor;\n  channelMetadata?: boolean;\n}\n\n/**\n * A message in a conversation.\n */\nclass Message extends ReplayEventEmitter<MessageEvents> {\n  /**\n   * Conversation that the message is in.\n   */\n  public readonly conversation: Conversation;\n\n  private readonly links: MessageLinks;\n  private readonly configuration: Configuration;\n  private readonly services: MessageServices;\n\n  private state: MessageState;\n\n  /**\n   * @internal\n   */\n  constructor(\n    index: number,\n    data: MessageData,\n    conversation: Conversation,\n    links: MessageLinks,\n    configuration: Configuration,\n    services: MessageServices\n  ) {\n    super();\n\n    this.conversation = conversation;\n\n    this.links = links;\n    this.configuration = configuration;\n    this.services = services;\n\n    this.state = {\n      sid: data.sid,\n      index: index,\n      author: data.author,\n      subject: data.subject,\n      contentSid: data.contentSid,\n      body: data.text ?? null,\n      timestamp: data.timestamp ? new Date(data.timestamp) : null,\n      dateUpdated: data.dateUpdated ? new Date(data.dateUpdated) : null,\n      lastUpdatedBy: data.lastUpdatedBy ?? null,\n      attributes: parseAttributes(\n        data.attributes,\n        `Got malformed attributes for the message ${data.sid}`,\n        log\n      ),\n      type: data.type ?? \"text\",\n      media:\n        data.type === \"media\" && data.media\n          ? new Media(data.media, this.services)\n          : null,\n      medias:\n        data.type === \"media\" && data.medias\n          ? data.medias.map((m) => new Media(m, this.services))\n          : data.type === \"media\" && data.media && !data.medias\n          ? [\n              new Media(\n                { ...data.media, category: \"media\" } as Media,\n                this.services\n              ),\n            ]\n          : null,\n      participantSid: data.memberSid ?? null,\n      aggregatedDeliveryReceipt: data.delivery\n        ? new AggregatedDeliveryReceipt(data.delivery)\n        : null,\n      hasChannelMetadata: data.channelMetadata ?? false,\n    };\n  }\n\n  /**\n   * Fired when the properties or the body of the message has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link Message} message - the message in question\n   *     * {@link MessageUpdateReason}[] updateReasons - array of reasons for the update\n   */\n  static readonly updated = \"updated\";\n\n  /**\n   * The server-assigned unique identifier for the message.\n   */\n  public get sid(): string {\n    return this.state.sid;\n  }\n\n  /**\n   * Name of the user that sent the message.\n   */\n  public get author(): string | null {\n    return this.state.author;\n  }\n\n  /**\n   * Message subject. Used only in email conversations.\n   */\n  public get subject(): string | null {\n    return this.state.subject;\n  }\n\n  /**\n   * Unique identifier of {@link ContentTemplate} for this message.\n   */\n  public get contentSid(): string | null {\n    return this.state.contentSid;\n  }\n\n  /**\n   * Body of the message.\n   */\n  public get body(): string | null {\n    return this.state.body;\n  }\n\n  /**\n   * Date this message was last updated on.\n   */\n  public get dateUpdated(): Date | null {\n    return this.state.dateUpdated;\n  }\n\n  /**\n   * Index of this message in the conversation's list of messages.\n   *\n   * By design, the message indices may have arbitrary gaps between them,\n   * that does not necessarily mean they were deleted or otherwise modified - just that\n   * messages may have some non-contiguous indices even if they are being sent immediately one after another.\n   *\n   * Trying to use indices for some calculations is going to be unreliable.\n   *\n   * To calculate the number of unread messages, it is better to use the Read Horizon API.\n   * See {@link Conversation.getUnreadMessagesCount} for details.\n   */\n  public get index(): number {\n    return this.state.index;\n  }\n\n  /**\n   * Identity of the last user that updated the message.\n   */\n  public get lastUpdatedBy(): string | null {\n    return this.state.lastUpdatedBy;\n  }\n\n  /**\n   * Date this message was created on.\n   */\n  public get dateCreated(): Date | null {\n    return this.state.timestamp;\n  }\n\n  /**\n   * Custom attributes of the message.\n   */\n  public get attributes(): JSONValue {\n    return this.state.attributes;\n  }\n\n  /**\n   * Type of the message.\n   */\n  public get type(): MessageType {\n    return this.state.type;\n  }\n\n  /**\n   * One of the attached media (if present).\n   * @deprecated Use attachedMedia instead. Note that the latter is now an array.\n   */\n  public get media(): Media | null {\n    return this.state.media;\n  }\n\n  /**\n   * Return all media attachments, except email body/history attachments, without temporary urls.\n   */\n  public get attachedMedia(): Array<Media> | null {\n    return this.getMediaByCategories([\"media\"]);\n  }\n\n  /**\n   * The server-assigned unique identifier of the authoring participant.\n   */\n  public get participantSid(): string | null {\n    return this.state.participantSid;\n  }\n\n  /**\n   * Aggregated information about the message delivery statuses across all participants of a conversation..\n   */\n  public get aggregatedDeliveryReceipt(): AggregatedDeliveryReceipt | null {\n    return this.state.aggregatedDeliveryReceipt;\n  }\n\n  /**\n   * @deprecated\n   * Return a (possibly empty) array of media matching a specific set of categories.\n   * Allowed category is so far only 'media'.\n   * @param categories Array of categories to match.\n   * @returns Array of media descriptors matching given categories.\n   */\n  @deprecated(\"getMediaByCategory\", \"getMediaByCategories\")\n  public getMediaByCategory(\n    categories: Array<MediaCategory>\n  ): Array<Media> | null {\n    return this.getMediaByCategories(categories);\n  }\n\n  /**\n   * Return a (possibly empty) array of media matching a specific set of categories.\n   * Allowed category is so far only 'media'.\n   * @param categories Array of categories to match.\n   * @returns Array of media descriptors matching given categories.\n   */\n  public getMediaByCategories(categories: MediaCategory[]): Media[] | null {\n    return (this.state.medias ?? []).filter((m) =>\n      categories.includes(m.category)\n    );\n  }\n\n  /**\n   * Get a media descriptor for an email body attachment of a provided type.\n   * Allowed body types are returned in the Conversation.limits().emailBodiesAllowedContentTypes array.\n   * @param type Type of email body to request, defaults to `text/plain`.\n   */\n  @validateTypes([nonEmptyString, \"undefined\"])\n  public getEmailBody(type = \"text/plain\"): Media | null {\n    return (\n      this.getMediaByCategories([\"body\"])\n        ?.filter((m) => m.contentType == type)\n        .shift() ?? null\n    );\n  }\n\n  /**\n   * Get a media descriptor for an email history attachment of a provided type.\n   * Allowed body types are returned in the Conversation.limits().emailHistoriesAllowedContentTypes array.\n   * @param type Type of email history to request, defaults to `text/plain`.\n   */\n  @validateTypes([nonEmptyString, \"undefined\"])\n  public getEmailHistory(type = \"text/plain\"): Media | null {\n    return (\n      this.getMediaByCategories([\"history\"])\n        ?.filter((m) => m.contentType == type)\n        .shift() ?? null\n    );\n  }\n\n  _update(data) {\n    const updateReasons: MessageUpdateReason[] = [];\n\n    if (\n      (data.text || typeof data.text === \"string\") &&\n      data.text !== this.state.body\n    ) {\n      this.state.body = data.text;\n      updateReasons.push(\"body\");\n    }\n\n    if (data.subject && data.subject !== this.state.subject) {\n      this.state.subject = data.subject;\n      updateReasons.push(\"subject\");\n    }\n\n    if (data.lastUpdatedBy && data.lastUpdatedBy !== this.state.lastUpdatedBy) {\n      this.state.lastUpdatedBy = data.lastUpdatedBy;\n      updateReasons.push(\"lastUpdatedBy\");\n    }\n\n    if (data.author && data.author !== this.state.author) {\n      this.state.author = data.author;\n      updateReasons.push(\"author\");\n    }\n\n    if (\n      data.dateUpdated &&\n      new Date(data.dateUpdated).getTime() !==\n        (this.state.dateUpdated && this.state.dateUpdated.getTime())\n    ) {\n      this.state.dateUpdated = new Date(data.dateUpdated);\n      updateReasons.push(\"dateUpdated\");\n    }\n\n    if (\n      data.timestamp &&\n      new Date(data.timestamp).getTime() !==\n        (this.state.timestamp && this.state.timestamp.getTime())\n    ) {\n      this.state.timestamp = new Date(data.timestamp);\n      updateReasons.push(\"dateCreated\");\n    }\n\n    const updatedAttributes = parseAttributes(\n      data.attributes,\n      `Got malformed attributes for the message ${this.sid}`,\n      log\n    );\n    if (!isEqual(this.state.attributes, updatedAttributes)) {\n      this.state.attributes = updatedAttributes;\n      updateReasons.push(\"attributes\");\n    }\n\n    const updatedAggregatedDelivery = data.delivery;\n    const currentAggregatedDelivery = this.state.aggregatedDeliveryReceipt;\n    const isUpdatedAggregateDeliveryValid =\n      !!updatedAggregatedDelivery &&\n      !!updatedAggregatedDelivery.total &&\n      !!updatedAggregatedDelivery.delivered &&\n      !!updatedAggregatedDelivery.failed &&\n      !!updatedAggregatedDelivery.read &&\n      !!updatedAggregatedDelivery.sent &&\n      !!updatedAggregatedDelivery.undelivered;\n    if (isUpdatedAggregateDeliveryValid) {\n      if (!currentAggregatedDelivery) {\n        this.state.aggregatedDeliveryReceipt = new AggregatedDeliveryReceipt(\n          updatedAggregatedDelivery\n        );\n        updateReasons.push(\"deliveryReceipt\");\n      } else if (\n        !currentAggregatedDelivery._isEquals(updatedAggregatedDelivery)\n      ) {\n        currentAggregatedDelivery._update(updatedAggregatedDelivery);\n        updateReasons.push(\"deliveryReceipt\");\n      }\n    }\n\n    if (updateReasons.length > 0) {\n      this.emit(\"updated\", { message: this, updateReasons: updateReasons });\n    }\n  }\n\n  /**\n   * Get the participant who is the author of the message.\n   */\n  public async getParticipant(): Promise<Participant> {\n    let participant: Participant | null = null;\n    if (this.state.participantSid) {\n      participant = await this.conversation\n        .getParticipantBySid(this.state.participantSid)\n        .catch(() => {\n          log.debug(\n            `Participant with sid \"${this.participantSid}\" not found for message ${this.sid}`\n          );\n          return null;\n        });\n    }\n    if (!participant && this.state.author) {\n      participant = await this.conversation\n        .getParticipantByIdentity(this.state.author)\n        .catch(() => {\n          log.debug(\n            `Participant with identity \"${this.author}\" not found for message ${this.sid}`\n          );\n          return null;\n        });\n    }\n    if (participant) {\n      return participant;\n    }\n    let errorMesage = \"Participant with \";\n    if (this.state.participantSid) {\n      errorMesage += \"SID '\" + this.state.participantSid + \"' \";\n    }\n    if (this.state.author) {\n      if (this.state.participantSid) {\n        errorMesage += \"or \";\n      }\n      errorMesage += \"identity '\" + this.state.author + \"' \";\n    }\n    if (errorMesage === \"Participant with \") {\n      errorMesage = \"Participant \";\n    }\n    errorMesage += \"was not found\";\n    throw new Error(errorMesage);\n  }\n\n  /**\n   * Get the delivery receipts of the message.\n   */\n  public async getDetailedDeliveryReceipts(): Promise<\n    DetailedDeliveryReceipt[]\n  > {\n    let paginator: Paginator<DetailedDeliveryReceipt> =\n      await this._getDetailedDeliveryReceiptsPaginator();\n    let detailedDeliveryReceipts: DetailedDeliveryReceipt[] = paginator.items;\n\n    while (paginator.hasNextPage) {\n      paginator = await paginator.nextPage();\n      detailedDeliveryReceipts = [\n        ...detailedDeliveryReceipts,\n        ...paginator.items,\n      ];\n    }\n\n    return detailedDeliveryReceipts;\n  }\n\n  /**\n   * Remove the message.\n   */\n  public async remove(): Promise<Message> {\n    await this.services.commandExecutor.mutateResource(\n      \"delete\",\n      this.links.self\n    );\n\n    return this;\n  }\n\n  /**\n   * Edit the message body.\n   * @param body New body of the message.\n   */\n  @validateTypesAsync(\"string\")\n  public async updateBody(body: string): Promise<Message> {\n    await this.services.commandExecutor.mutateResource<\n      EditMessageRequest,\n      MessageResponse\n    >(\"post\", this.links.self, {\n      body,\n    });\n\n    return this;\n  }\n\n  /**\n   * Edit the message attributes.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(json)\n  public async updateAttributes(attributes: JSONValue): Promise<Message> {\n    await this.services.commandExecutor.mutateResource<\n      EditMessageRequest,\n      MessageResponse\n    >(\"post\", this.links.self, {\n      attributes:\n        typeof attributes !== \"undefined\"\n          ? JSON.stringify(attributes)\n          : undefined,\n    });\n\n    return this;\n  }\n\n  /**\n   * @deprecated\n   * Get content URLs for all media attachments in the given set using a single operation.\n   * @param contentSet Set of media attachments to query content URLs.\n   */\n  @deprecated(\"attachTemporaryUrlsFor\", \"getTemporaryContentUrlsForMedia\")\n  public async attachTemporaryUrlsFor(\n    contentSet: Media[] | null\n  ): Promise<Media[]> {\n    // We ignore existing mcsMedia members of each of the media entries.\n    // Instead we just collect their sids and pull new descriptors from a mediaSet GET endpoint.\n    const sids = contentSet?.map((m) => m.sid);\n    if (this.services.mcsClient && sids) {\n      return (await this.services.mcsClient.mediaSetGet(sids)).map((item) => {\n        return new Media(item, this.services);\n      });\n    } else {\n      throw new Error(\"Media Content Service is unavailable\");\n    }\n  }\n\n  /**\n   * Get content URLs for all media attachments in the given set using a single operation.\n   * @param contentSet Set of media attachments to query content URLs.\n   */\n  @validateTypesAsync(nonEmptyArray(\"media\", Media))\n  public getTemporaryContentUrlsForMedia(\n    contentSet: Media[]\n  ): CancellablePromise<Map<string, string>> {\n    // We ignore existing mcsMedia members of each of the media entries.\n    // Instead we just collect their sids and pull new descriptors from a mediaSet GET endpoint.\n    const sids = contentSet.map((m) => m.sid);\n    return this.getTemporaryContentUrlsForMediaSids(sids);\n  }\n\n  /**\n   * Get content URLs for all media attachments in the given set of media sids using a single operation.\n   * @param mediaSids Set of media sids to query for the content URL.\n   */\n  @validateTypesAsync(nonEmptyArray(\"strings\", \"string\"))\n  public getTemporaryContentUrlsForMediaSids(\n    mediaSids: string[]\n  ): CancellablePromise<Map<string, string>> {\n    return new CancellablePromise(async (resolve, reject, onCancel) => {\n      const mediaGetRequest = this.services.mcsClient.mediaSetGetContentUrls(\n        mediaSids ?? []\n      );\n\n      if (!this.services.mcsClient || !mediaSids) {\n        reject(new Error(\"Media Content Service is unavailable\"));\n        return;\n      }\n\n      onCancel(() => {\n        mediaGetRequest.cancel();\n      });\n\n      try {\n        const urls = await mediaGetRequest;\n        resolve(urls);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Get content URLs for all media attached to the message.\n   */\n  public getTemporaryContentUrlsForAttachedMedia(): CancellablePromise<\n    Map<string, string>\n  > {\n    const media = this.attachedMedia;\n    const sids = media?.map((m) => m.sid) ?? [];\n    return this.getTemporaryContentUrlsForMediaSids(sids);\n  }\n\n  private async _getDetailedDeliveryReceiptsPaginator(options?: {\n    pageToken?: string;\n    pageSize?: number;\n  }): Promise<Paginator<DetailedDeliveryReceipt>> {\n    const messagesReceiptsUrl = this.configuration.links.messagesReceipts\n      .replace(\"%s\", this.conversation.sid)\n      .replace(\"%s\", this.sid);\n    const url = new UriBuilder(messagesReceiptsUrl)\n      .arg(\"PageToken\", options?.pageToken as string)\n      .arg(\"PageSize\", options?.pageSize as number)\n      .build();\n    const response = await this.services.network.get<\n      { delivery_receipts: DeliveryReceiptResponse[] } & ResponseMeta\n    >(url);\n\n    return new RestPaginator<DetailedDeliveryReceipt>(\n      response.body.delivery_receipts.map(\n        (x) => new DetailedDeliveryReceipt(x)\n      ),\n      (pageToken, pageSize) =>\n        this._getDetailedDeliveryReceiptsPaginator({ pageToken, pageSize }),\n      response.body.meta.previous_token,\n      response.body.meta.next_token\n    );\n  }\n\n  /**\n   * Get the {@link ContentData} for this message. Resolves to `null` when\n   * {@link Message.contentSid} is null.\n   */\n  public getContentData(): CancellablePromise<ContentData | null> {\n    return new CancellablePromise(async (resolve, reject, onCancel) => {\n      if (this.state.contentSid === null) {\n        resolve(null);\n        return;\n      }\n\n      const bodies = this.getMediaByCategories([\"body\"]);\n\n      if (bodies === null) {\n        resolve(null);\n        return;\n      }\n\n      const twilioPrefix = \"application/x-vnd.com.twilio.rich.\";\n      const filteredMedias = bodies.filter((media) =>\n        media.contentType.startsWith(twilioPrefix)\n      );\n\n      if (filteredMedias.length === 0) {\n        resolve(null);\n        return;\n      }\n\n      const contentMedia = filteredMedias[0];\n      const urlPromise = contentMedia.getContentTemporaryUrl();\n\n      onCancel(() => {\n        urlPromise.cancel();\n      });\n\n      let url: string | null;\n\n      try {\n        url = await urlPromise;\n      } catch (e) {\n        reject(e);\n        return;\n      }\n\n      if (url === null) {\n        resolve(null);\n        return;\n      }\n\n      const jsonStringPromise = new Promise<string>((resolve, reject) => {\n        let isCancelled = false;\n        const xhr = new XHR();\n        xhr.open(\"GET\", url ?? \"\", true);\n        xhr.responseType = \"text\";\n        xhr.onreadystatechange = () => {\n          if (xhr.readyState !== 4 || isCancelled) {\n            return;\n          }\n          resolve(xhr.responseText);\n        };\n        xhr.onerror = () => {\n          reject(xhr.statusText);\n        };\n        onCancel(() => {\n          isCancelled = true;\n          xhr.abort();\n          reject(new Error(\"XHR has been aborted\"));\n        });\n        xhr.send();\n      });\n\n      let json;\n\n      try {\n        const jsonString = await jsonStringPromise;\n        json = JSON.parse(jsonString);\n      } catch (e) {\n        reject(e);\n        return;\n      }\n\n      const dataType = contentMedia.contentType\n        .replace(twilioPrefix, \"\")\n        .replace(\".\", \"/\");\n\n      resolve(parseVariant(dataType, json.data));\n    });\n  }\n\n  /**\n   * Get the {@link ChannelMetadata} for this message. Resolves to `null` if\n   * the message doesn't have any channel metadata.\n   */\n  public async getChannelMetadata(): Promise<ChannelMetadata | null> {\n    if (!this.state.hasChannelMetadata) {\n      return null;\n    }\n\n    return await this.services.channelMetadataClient.getChannelMetadata(\n      this.conversation.sid,\n      this.sid\n    );\n  }\n}\n\nexport {\n  Message,\n  MessageServices,\n  MessageType,\n  MessageUpdateReason,\n  MessageUpdatedEventArgs,\n};\n"],"names":["Logger","ReplayEventEmitter","index","parseAttributes","Media","AggregatedDeliveryReceipt","isEqual","CancellablePromise","UriBuilder","RestPaginator","DetailedDeliveryReceipt","parseVariant","__decorate","deprecated","validateTypes","nonEmptyString","validateTypesAsync","json","nonEmptyArray"],"mappings":"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"}