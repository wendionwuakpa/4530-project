{"version":3,"file":"conversation.js","sources":["../src/conversation.ts"],"sourcesContent":["import \"isomorphic-form-data\";\nimport { Logger } from \"./logger\";\nimport { ParticipantBindingOptions, Participants } from \"./data/participants\";\nimport {\n  Participant,\n  ParticipantUpdatedEventArgs,\n  ParticipantUpdateReason,\n} from \"./participant\";\nimport { Messages } from \"./data/messages\";\nimport {\n  Message,\n  MessageUpdatedEventArgs,\n  MessageUpdateReason,\n} from \"./message\";\nimport { UriBuilder, parseToNumber, parseTime } from \"./util\";\nimport { Users } from \"./data/users\";\nimport { Paginator } from \"./interfaces/paginator\";\nimport { ConversationsDataSource } from \"./data/conversations\";\nimport { McsClient } from \"@twilio/mcs-client\";\nimport { SyncClient, SyncDocument, SyncList, SyncMap } from \"twilio-sync\";\nimport { TypingIndicator } from \"./services/typing-indicator\";\nimport { Network } from \"./services/network\";\nimport {\n  validateTypesAsync,\n  custom,\n  literal,\n  nonEmptyString,\n  nonNegativeInteger,\n  objectSchema,\n} from \"@twilio/declarative-type-validator\";\nimport { json, optionalJson } from \"./interfaces/rules\";\nimport { Configuration } from \"./configuration\";\nimport { CommandExecutor } from \"./command-executor\";\nimport { AddParticipantRequest } from \"./interfaces/commands/add-participant\";\nimport { EditConversationRequest } from \"./interfaces/commands/edit-conversation\";\nimport { ConversationResponse } from \"./interfaces/commands/conversation-response\";\nimport { ParticipantResponse } from \"./interfaces/commands/participant-response\";\nimport { EditNotificationLevelRequest } from \"./interfaces/commands/edit-notification-level\";\nimport {\n  EditLastReadMessageIndexRequest,\n  EditLastReadMessageIndexResponse,\n} from \"./interfaces/commands/edit-last-read-message-index\";\nimport { ConversationLimits } from \"./interfaces/conversation-limits\";\nimport { MessageBuilder } from \"./message-builder\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\nimport isEqual from \"lodash.isequal\";\nimport { JSONValue } from \"./types\";\nimport { ChannelMetadataClient } from \"./channel-metadata-client\";\n\n/**\n * Conversation events.\n */\ntype ConversationEvents = {\n  participantJoined: (participant: Participant) => void;\n  participantLeft: (participant: Participant) => void;\n  participantUpdated: (data: {\n    participant: Participant;\n    updateReasons: ParticipantUpdateReason[];\n  }) => void;\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n  typingEnded: (participant: Participant) => void;\n  typingStarted: (participant: Participant) => void;\n  updated: (data: {\n    conversation: Conversation;\n    updateReasons: ConversationUpdateReason[];\n  }) => void;\n  removed: (conversation: Conversation) => void;\n};\n\n/**\n * Reason for the `updated` event emission by a conversation.\n */\ntype ConversationUpdateReason =\n  | \"attributes\"\n  | \"createdBy\"\n  | \"dateCreated\"\n  | \"dateUpdated\"\n  | \"friendlyName\"\n  | \"lastReadMessageIndex\"\n  | \"state\"\n  | \"status\"\n  | \"uniqueName\"\n  | \"lastMessage\"\n  | \"notificationLevel\"\n  | \"bindings\";\n\n/**\n * Status of the conversation, relative to the client: whether the conversation\n * has been `joined` or the client is `notParticipating` in the conversation.\n */\ntype ConversationStatus = \"notParticipating\" | \"joined\";\n\n/**\n * User's notification level for the conversation. Determines\n * whether the currently logged-in user will receive pushes for events\n * in this conversation. Can be either `muted` or `default`, where\n * `default` defers to the global service push configuration.\n */\ntype NotificationLevel = \"default\" | \"muted\";\n\n/**\n * State of the conversation.\n */\ninterface ConversationState {\n  /**\n   * Current state.\n   */\n  current: \"active\" | \"inactive\" | \"closed\";\n\n  /**\n   * Date at which the latest conversation state update happened.\n   */\n  dateUpdated: Date;\n}\n\n/**\n * Event arguments for the `updated` event.\n */\ninterface ConversationUpdatedEventArgs {\n  conversation: Conversation;\n  updateReasons: ConversationUpdateReason[];\n}\n\n/**\n * Binding for email conversation.\n */\ninterface ConversationBindings {\n  email?: ConversationEmailBinding;\n  sms?: ConversationSmsBinding;\n}\n\n/**\n * Binding for email conversation.\n */\ninterface ConversationEmailBinding {\n  name?: string;\n  projected_address: string;\n}\n\n/**\n * Binding for SMS conversation.\n */\ninterface ConversationSmsBinding {\n  address?: string;\n}\n\n/**\n * Configuration for attaching a media file to a message.\n * These options can be passed to {@link Conversation.sendMessage} and\n * {@link MessageBuilder.addMedia}.\n */\ninterface SendMediaOptions {\n  /**\n   * Content type of media.\n   */\n  contentType: null | string;\n\n  /**\n   * Optional filename.\n   */\n  filename?: string;\n\n  /**\n   * Content to post.\n   */\n  media: null | string | Buffer | Blob;\n}\n\n/**\n * These options can be passed to {@link Conversation.sendMessage}.\n */\ninterface SendEmailOptions {\n  /**\n   *  Message subject. Ignored for media messages.\n   */\n  subject?: string;\n}\n\n/**\n * Information about the last message of a conversation.\n */\ninterface LastMessage {\n  /**\n   * Message's index.\n   */\n  index?: number;\n\n  /**\n   *  Message's creation date.\n   */\n  dateCreated?: Date;\n}\n\n/**\n * Conversation services.\n */\ninterface ConversationServices {\n  users: Users;\n  typingIndicator: TypingIndicator;\n  network: Network;\n  mcsClient: McsClient;\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n  channelMetadataClient: ChannelMetadataClient;\n}\n\n/**\n * Internal (private) state of the conversation.\n */\ninterface ConversationInternalState {\n  uniqueName: string | null;\n  status: ConversationStatus;\n  attributes: JSONValue;\n  createdBy?: string;\n  dateCreated: Date | null;\n  dateUpdated: Date | null;\n  friendlyName: string | null;\n  lastReadMessageIndex: number | null;\n  lastMessage?: LastMessage;\n  notificationLevel?: NotificationLevel;\n  state?: ConversationState;\n  bindings: ConversationBindings;\n}\n\n/**\n * Conversation descriptor.\n */\ninterface ConversationDescriptor {\n  channel: string;\n  entityName: string;\n  uniqueName: string;\n  attributes: JSONValue;\n  createdBy?: string;\n  friendlyName?: string;\n  lastConsumedMessageIndex: number;\n  dateCreated: Date | null;\n  dateUpdated: Date | null;\n  notificationLevel?: NotificationLevel;\n  bindings?: ConversationBindings;\n}\n\n/**\n * Conversation links.\n */\ninterface ConversationLinks {\n  self: string;\n  messages: string;\n  participants: string;\n}\n\n/**\n * Map of the fields that will be processed with update messages.\n */\nconst fieldMappings = {\n  lastMessage: \"lastMessage\",\n  attributes: \"attributes\",\n  createdBy: \"createdBy\",\n  dateCreated: \"dateCreated\",\n  dateUpdated: \"dateUpdated\",\n  friendlyName: \"friendlyName\",\n  lastConsumedMessageIndex: \"lastConsumedMessageIndex\",\n  notificationLevel: \"notificationLevel\",\n  sid: \"sid\",\n  status: \"status\",\n  uniqueName: \"uniqueName\",\n  state: \"state\",\n  bindings: \"bindings\",\n};\n\n/**\n * A conversation represents communication between multiple Conversations\n * clients.\n */\nclass Conversation extends ReplayEventEmitter<ConversationEvents> {\n  /**\n   * Fired when a participant has joined the conversation.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - participant that joined the\n   * conversation\n   * @event\n   */\n  public static readonly participantJoined = \"participantJoined\";\n\n  /**\n   * Fired when a participant has left the conversation.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - participant that left the\n   * conversation\n   * @event\n   */\n  public static readonly participantLeft = \"participantLeft\";\n\n  /**\n   * Fired when data of a participant has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the\n   * following properties:\n   *     * {@link Participant} `participant` - participant that has received the\n   *     update\n   *     * {@link ParticipantUpdateReason}[] `updateReasons` - array of reasons\n   *     for the update\n   * @event\n   */\n  public static readonly participantUpdated = \"participantUpdated\";\n\n  /**\n   * Fired when a new message has been added to the conversation.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - message that has been added\n   * @event\n   */\n  public static readonly messageAdded = \"messageAdded\";\n\n  /**\n   * Fired when message is removed from the conversation's message list.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - message that has been removed\n   * @event\n   */\n  public static readonly messageRemoved = \"messageRemoved\";\n\n  /**\n   * Fired when data of a message has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the\n   * following properties:\n   *     * {@link Message} `message` - message that has received the update\n   *     * {@link MessageUpdateReason}[] `updateReasons` - array of reasons for\n   *     the update\n   * @event\n   */\n  public static readonly messageUpdated = \"messageUpdated\";\n\n  /**\n   * Fired when a participant has stopped typing.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - the participant that has stopped\n   * typing\n   * @event\n   */\n  public static readonly typingEnded = \"typingEnded\";\n\n  /**\n   * Fired when a participant has started typing.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - the participant that has started\n   * typing\n   * @event\n   */\n  public static readonly typingStarted = \"typingStarted\";\n\n  /**\n   * Fired when the data of the conversation has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the\n   * following properties:\n   *     * {@link Conversation} `conversation` - conversation that has received\n   *     the update\n   *     * {@link ConversationUpdateReason}[] `updateReasons` - array of reasons\n   *     for the update\n   * @event\n   */\n  public static readonly updated = \"updated\";\n\n  /**\n   * Fired when the conversation was destroyed or the currently-logged-in user\n   * has left private conversation.\n   *\n   * Parameters:\n   * 1. {@link Conversation} `conversation` - conversation that has been removed\n   * @event\n   */\n  public static readonly removed = \"removed\";\n\n  /**\n   * Logger instance.\n   */\n  private static readonly _logger = Logger.scope(\"Conversation\");\n\n  /**\n   * Unique system identifier of the conversation.\n   */\n  public readonly sid: string;\n\n  /**\n   * Conversation links for REST requests.\n   * @internal\n   */\n  public readonly _links: ConversationLinks;\n\n  /**\n   * Map of participants.\n   * @internal\n   */\n  public readonly _participants: Map<string, Participant>;\n\n  /**\n   * Configuration of the client that the conversation belongs to.\n   */\n  private readonly _configuration: Configuration;\n\n  /**\n   * Conversation service objects.\n   */\n  private readonly _services: ConversationServices;\n\n  /**\n   * Internal state of the conversation.\n   */\n  private readonly _internalState: ConversationInternalState;\n\n  /**\n   * Name of the conversation entity document.\n   */\n  private readonly _entityName: string;\n\n  /**\n   * Messages entity.\n   */\n  private readonly _messagesEntity: Messages;\n\n  /**\n   * Sync list containing messages.\n   */\n  private _messagesList?: SyncList;\n\n  /**\n   * Participants entity.\n   */\n  private readonly _participantsEntity: Participants;\n\n  /**\n   * Sync map containing participants.\n   */\n  private _participantsMap?: SyncMap;\n\n  /**\n   * Source of the most recent update.\n   */\n  private _dataSource!: ConversationsDataSource;\n\n  /**\n   * Promise for the conversation entity document.\n   */\n  private _entityPromise!: Promise<SyncDocument> | null;\n\n  /**\n   * Conversation entity document.\n   */\n  private _entity!: SyncDocument | null;\n\n  /**\n   * @param descriptor Conversation descriptor.\n   * @param sid Conversation SID.\n   * @param links Conversation links for REST requests.\n   * @param configuration Client configuration.\n   * @param services Conversation services.\n   * @internal\n   */\n  public constructor(\n    descriptor: ConversationDescriptor,\n    sid: string,\n    links: ConversationLinks,\n    configuration: Configuration,\n    services: ConversationServices\n  ) {\n    super();\n\n    this.sid = sid;\n    this._links = links;\n    this._configuration = configuration;\n    this._services = services;\n    this._entityName = descriptor.channel;\n    this._internalState = {\n      uniqueName: descriptor.uniqueName || null,\n      status: \"notParticipating\",\n      attributes: descriptor.attributes ?? {},\n      createdBy: descriptor.createdBy,\n      dateCreated: parseTime(descriptor.dateCreated),\n      dateUpdated: parseTime(descriptor.dateUpdated),\n      friendlyName: descriptor.friendlyName || null,\n      lastReadMessageIndex: Number.isInteger(\n        descriptor.lastConsumedMessageIndex\n      )\n        ? descriptor.lastConsumedMessageIndex\n        : null,\n      bindings: descriptor.bindings ?? {},\n    };\n\n    if (descriptor.notificationLevel) {\n      this._internalState.notificationLevel = descriptor.notificationLevel;\n    }\n\n    const participantsLinks = {\n      participants: this._links.participants,\n    };\n\n    this._participants = new Map();\n    this._participantsEntity = new Participants(\n      this,\n      this._participants,\n      participantsLinks,\n      this._configuration,\n      this._services\n    );\n    this._participantsEntity.on(\"participantJoined\", (participant) =>\n      this.emit(\"participantJoined\", participant)\n    );\n    this._participantsEntity.on(\"participantLeft\", (participant) =>\n      this.emit(\"participantLeft\", participant)\n    );\n    this._participantsEntity.on(\n      \"participantUpdated\",\n      (args: ParticipantUpdatedEventArgs) =>\n        this.emit(\"participantUpdated\", args)\n    );\n\n    this._messagesEntity = new Messages(this, configuration, services);\n    this._messagesEntity.on(\"messageAdded\", (message) =>\n      this._onMessageAdded(message)\n    );\n    this._messagesEntity.on(\"messageUpdated\", (args: MessageUpdatedEventArgs) =>\n      this.emit(\"messageUpdated\", args)\n    );\n    this._messagesEntity.on(\"messageRemoved\", (message) =>\n      this.emit(\"messageRemoved\", message)\n    );\n  }\n\n  /**\n   * Unique name of the conversation.\n   */\n  public get uniqueName(): string | null {\n    return this._internalState.uniqueName;\n  }\n\n  /**\n   * Status of the conversation.\n   */\n  public get status(): ConversationStatus {\n    return this._internalState.status;\n  }\n\n  /**\n   * Name of the conversation.\n   */\n  public get friendlyName(): string | null {\n    return this._internalState.friendlyName;\n  }\n\n  /**\n   * Date this conversation was last updated on.\n   */\n  public get dateUpdated(): Date | null {\n    return this._internalState.dateUpdated;\n  }\n\n  /**\n   * Date this conversation was created on.\n   */\n  public get dateCreated(): Date | null {\n    return this._internalState.dateCreated;\n  }\n\n  /**\n   * Identity of the user that created this conversation.\n   */\n  public get createdBy(): string {\n    return this._internalState.createdBy ?? \"\";\n  }\n\n  /**\n   * Custom attributes of the conversation.\n   */\n  public get attributes(): JSONValue {\n    return this._internalState.attributes;\n  }\n\n  /**\n   * Index of the last message the user has read in this conversation.\n   */\n  public get lastReadMessageIndex(): number | null {\n    return this._internalState.lastReadMessageIndex;\n  }\n\n  /**\n   * Last message sent to this conversation.\n   */\n  public get lastMessage(): LastMessage | undefined {\n    return this._internalState.lastMessage ?? undefined;\n  }\n\n  /**\n   * User notification level for this conversation.\n   */\n  public get notificationLevel(): NotificationLevel {\n    return this._internalState.notificationLevel ?? \"default\";\n  }\n\n  /**\n   * Conversation bindings. Undocumented feature (for now).\n   * @internal\n   */\n  public get bindings(): ConversationBindings {\n    return this._internalState.bindings;\n  }\n\n  /**\n   * Current conversation limits.\n   */\n  public get limits(): ConversationLimits {\n    return this._configuration.limits;\n  }\n\n  /**\n   * State of the conversation.\n   */\n  public get state(): ConversationState | undefined {\n    return this._internalState.state;\n  }\n\n  /**\n   * Source of the conversation update.\n   * @internal\n   */\n  public get _statusSource(): ConversationsDataSource {\n    return this._dataSource;\n  }\n\n  /**\n   * Preprocess the update object.\n   * @param update The update object received from Sync.\n   * @param conversationSid The SID of the conversation in question.\n   */\n  private static preprocessUpdate(update, conversationSid: string) {\n    try {\n      if (typeof update.attributes === \"string\") {\n        update.attributes = JSON.parse(update.attributes);\n      } else if (update.attributes) {\n        JSON.stringify(update.attributes);\n      }\n    } catch (e) {\n      Conversation._logger.warn(\n        \"Retrieved malformed attributes from the server for conversation: \" +\n          conversationSid\n      );\n      update.attributes = {};\n    }\n\n    try {\n      if (update.dateCreated) {\n        update.dateCreated = new Date(update.dateCreated);\n      }\n    } catch (e) {\n      Conversation._logger.warn(\n        \"Retrieved malformed dateCreated from the server for conversation: \" +\n          conversationSid\n      );\n      delete update.dateCreated;\n    }\n\n    try {\n      if (update.dateUpdated) {\n        update.dateUpdated = new Date(update.dateUpdated);\n      }\n    } catch (e) {\n      Conversation._logger.warn(\n        \"Retrieved malformed dateUpdated from the server for conversation: \" +\n          conversationSid\n      );\n      delete update.dateUpdated;\n    }\n\n    try {\n      if (update.lastMessage && update.lastMessage.timestamp) {\n        update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\n      }\n    } catch (e) {\n      Conversation._logger.warn(\n        \"Retrieved malformed lastMessage.timestamp from the server for conversation: \" +\n          conversationSid\n      );\n      delete update.lastMessage.timestamp;\n    }\n  }\n\n  /**\n   * Add a participant to the conversation by its identity.\n   * @param identity Identity of the Client to add.\n   * @param attributes Attributes to be attached to the participant.\n   * @returns The added participant.\n   */\n  @validateTypesAsync(nonEmptyString, optionalJson)\n  public async add(\n    identity: string,\n    attributes?: JSONValue\n  ): Promise<ParticipantResponse> {\n    return this._participantsEntity.add(identity, attributes ?? {});\n  }\n\n  /**\n   * Add a non-chat participant to the conversation.\n   * @param proxyAddress Proxy (Twilio) address of the participant.\n   * @param address User address of the participant.\n   * @param attributes Attributes to be attached to the participant.\n   * @param bindingOptions Options for adding email participants - name and\n   * CC/To level.\n   * @returns The added participant.\n   */\n  @validateTypesAsync(nonEmptyString, nonEmptyString, optionalJson)\n  public async addNonChatParticipant(\n    proxyAddress: string,\n    address: string,\n    attributes: JSONValue = {},\n    bindingOptions: ParticipantBindingOptions = {}\n  ): Promise<ParticipantResponse> {\n    return this._participantsEntity.addNonChatParticipant(\n      proxyAddress,\n      address,\n      attributes ?? {},\n      bindingOptions ?? {}\n    );\n  }\n\n  /**\n   * Advance the conversation's last read message index to the current read\n   * horizon. Rejects if the user is not a participant of the conversation. Last\n   * read message index is updated only if the new index value is higher than\n   * the previous.\n   * @param index Message index to advance to.\n   * @return Resulting unread messages count in the conversation.\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  public async advanceLastReadMessageIndex(index: number): Promise<number> {\n    await this._subscribeStreams();\n\n    if (index < (this.lastReadMessageIndex ?? 0)) {\n      return await this._setLastReadMessageIndex(this.lastReadMessageIndex);\n    }\n\n    return await this._setLastReadMessageIndex(index);\n  }\n\n  /**\n   * Delete the conversation and unsubscribe from its events.\n   */\n  public async delete(): Promise<Conversation> {\n    await this._services.commandExecutor.mutateResource(\n      \"delete\",\n      this._links.self\n    );\n\n    return this;\n  }\n\n  /**\n   * Get the custom attributes of this Conversation.\n   */\n  public async getAttributes(): Promise<JSONValue> {\n    await this._subscribe();\n    return this.attributes;\n  }\n\n  /**\n   * Returns messages from the conversation using the paginator interface.\n   * @param pageSize Number of messages to return in a single chunk. Default is\n   * 30.\n   * @param anchor Index of the newest message to fetch. Default is from the\n   * end.\n   * @param direction Query direction. By default, it queries backwards\n   * from newer to older. The `\"forward\"` value will query in the opposite\n   * direction.\n   * @return A page of messages.\n   */\n  @validateTypesAsync(\n    [\"undefined\", nonNegativeInteger],\n    [\"undefined\", nonNegativeInteger],\n    [\"undefined\", literal(\"backwards\", \"forward\")]\n  )\n  public async getMessages(\n    pageSize?: number,\n    anchor?: number,\n    direction?: \"backwards\" | \"forward\"\n  ): Promise<Paginator<Message>> {\n    await this._subscribeStreams();\n    return this._messagesEntity.getMessages(pageSize, anchor, direction);\n  }\n\n  /**\n   * Get a list of all the participants who are joined to this conversation.\n   */\n  public async getParticipants(): Promise<Participant[]> {\n    await this._subscribeStreams();\n    return this._participantsEntity.getParticipants();\n  }\n\n  /**\n   * Get conversation participants count.\n   *\n   * This method is semi-realtime. This means that this data will be eventually\n   * correct, but will also be possibly incorrect for a few seconds. The\n   * Conversations system does not provide real time events for counter values\n   * changes.\n   *\n   * This is useful for any UI badges, but it is not recommended to build any\n   * core application logic based on these counters being accurate in real time.\n   */\n  public async getParticipantsCount(): Promise<number> {\n    const url = new UriBuilder(this._configuration.links.conversations)\n      .path(this.sid)\n      .build();\n    const response = await this._services.network.get<ConversationResponse>(\n      url\n    );\n\n    return response.body.participants_count ?? 0;\n  }\n\n  /**\n   * Get a participant by its SID.\n   * @param participantSid Participant SID.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getParticipantBySid(\n    participantSid: string\n  ): Promise<Participant | null> {\n    return this._participantsEntity.getParticipantBySid(participantSid);\n  }\n\n  /**\n   * Get a participant by its identity.\n   * @param identity Participant identity.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getParticipantByIdentity(\n    identity: string | null = \"\"\n  ): Promise<Participant | null> {\n    return this._participantsEntity.getParticipantByIdentity(identity ?? \"\");\n  }\n\n  /**\n   * Get the total message count in the conversation.\n   *\n   * This method is semi-realtime. This means that this data will be eventually\n   * correct, but will also be possibly incorrect for a few seconds. The\n   * Conversations system does not provide real time events for counter values\n   * changes.\n   *\n   * This is useful for any UI badges, but it is not recommended to build any\n   * core application logic based on these counters being accurate in real time.\n   */\n  public async getMessagesCount(): Promise<number> {\n    const url = new UriBuilder(this._configuration.links.conversations)\n      .path(this.sid)\n      .build();\n    const response = await this._services.network.get<ConversationResponse>(\n      url\n    );\n\n    return response.body.messages_count ?? 0;\n  }\n\n  /**\n   * Get count of unread messages for the user if they are a participant of this\n   * conversation. Rejects if the user is not a participant of the conversation.\n   *\n   * Use this method to obtain the number of unread messages together with\n   * {@link Conversation.updateLastReadMessageIndex} instead of relying on the\n   * message indices which may have gaps. See {@link Message.index} for details.\n   *\n   * This method is semi-realtime. This means that this data will be eventually\n   * correct, but it will also be possibly incorrect for a few seconds. The\n   * Conversations system does not provide real time events for counter values\n   * changes.\n   *\n   * This is useful for any UI badges, but it is not recommended to build any\n   * core application logic based on these counters being accurate in real time.\n   *\n   * If the read horizon is not set, this function will return null. This could mean\n   * that all messages in the conversation are unread, or that the read horizon system\n   * is not being used. How to interpret this `null` value is up to the customer application.\n   *\n   * @return Number of unread messages based on the current read horizon set for\n   * the user or `null` if the read horizon is not set.\n   */\n  public async getUnreadMessagesCount(): Promise<number | null> {\n    const url = new UriBuilder(this._configuration.links.myConversations)\n      .path(this.sid)\n      .build();\n    const response = await this._services.network.get<ConversationResponse>(\n      url\n    );\n\n    if (response.body.conversation_sid !== this.sid) {\n      throw new Error(\n        \"Conversation was not found in the user conversations list\"\n      );\n    }\n\n    const unreadMessageCount = response.body.unread_messages_count;\n\n    if (typeof unreadMessageCount === \"number\") {\n      return unreadMessageCount;\n    }\n\n    return null;\n  }\n\n  /**\n   * Join the conversation and subscribe to its events.\n   */\n  public async join(): Promise<Conversation> {\n    await this._services.commandExecutor.mutateResource<\n      AddParticipantRequest,\n      ParticipantResponse\n    >(\"post\", this._links.participants, {\n      identity: this._configuration.userIdentity,\n    });\n\n    return this;\n  }\n\n  /**\n   * Leave the conversation.\n   */\n  public async leave(): Promise<Conversation> {\n    if (this._internalState.status === \"joined\") {\n      await this._services.commandExecutor.mutateResource(\n        \"delete\",\n        `${this._links.participants}/${encodeURIComponent(\n          this._configuration.userIdentity\n        )}`\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Remove a participant from the conversation. When a string is passed as the\n   * argument, it will assume that the string is an identity or SID.\n   * @param participant Identity, SID or the participant object to remove.\n   */\n  @validateTypesAsync([nonEmptyString, Participant])\n  public async removeParticipant(\n    participant: string | Participant\n  ): Promise<void> {\n    await this._participantsEntity.remove(\n      typeof participant === \"string\" ? participant : participant.sid\n    );\n  }\n\n  /**\n   * Send a message to the conversation.\n   * @param message Message body for the text message,\n   * `FormData` or {@link SendMediaOptions} for media content. Sending FormData\n   * is supported only with the browser engine.\n   * @param messageAttributes Attributes for the message.\n   * @param emailOptions Email options for the message.\n   * @return Index of the new message.\n   */\n  @validateTypesAsync(\n    [\n      \"string\",\n      FormData,\n      literal(null),\n      objectSchema(\"media options\", {\n        contentType: nonEmptyString,\n        media: custom((value) => {\n          let isValid =\n            (typeof value === \"string\" && value.length > 0) ||\n            value instanceof Uint8Array ||\n            value instanceof ArrayBuffer;\n\n          if (typeof Blob === \"function\") {\n            isValid = isValid || value instanceof Blob;\n          }\n\n          return [\n            isValid,\n            \"a non-empty string, an instance of Buffer or an instance of Blob\",\n          ];\n        }),\n      }),\n    ],\n    optionalJson,\n    [\n      \"undefined\",\n      literal(null),\n      objectSchema(\"email attributes\", {\n        subject: [nonEmptyString, \"undefined\"],\n      }),\n    ]\n  )\n  public async sendMessage(\n    message: null | string | FormData | SendMediaOptions,\n    messageAttributes?: JSONValue,\n    emailOptions?: SendEmailOptions\n  ): Promise<number> {\n    if (typeof message === \"string\" || message === null) {\n      const response = await this._messagesEntity.send(\n        message,\n        messageAttributes,\n        emailOptions\n      );\n      return parseToNumber(response.index) ?? 0;\n    }\n\n    const response = await this._messagesEntity.sendMedia(\n      message,\n      messageAttributes,\n      emailOptions\n    );\n    return parseToNumber(response.index) ?? 0;\n  }\n\n  /**\n   * New interface to prepare for sending a message.\n   * Use this instead of {@link Conversation.sendMessage}.\n   * @return A MessageBuilder to help set all message sending options.\n   */\n  public prepareMessage(): MessageBuilder {\n    return new MessageBuilder(this.limits, this._messagesEntity);\n  }\n\n  /**\n   * Set last read message index of the conversation to the index of the last\n   * known message.\n   * @return Resulting unread messages count in the conversation.\n   */\n  public async setAllMessagesRead(): Promise<number> {\n    await this._subscribeStreams();\n\n    const messagesPage = await this.getMessages(1);\n\n    if (messagesPage.items.length > 0) {\n      return this.advanceLastReadMessageIndex(messagesPage.items[0].index);\n    }\n\n    return 0;\n  }\n\n  /**\n   * Set all messages in the conversation unread.\n   * @returns New count of unread messages after this update.\n   */\n  public async setAllMessagesUnread(): Promise<number> {\n    await this._subscribeStreams();\n    return await this._setLastReadMessageIndex(null);\n  }\n\n  /**\n   * Set user notification level for this conversation.\n   * @param notificationLevel New user notification level.\n   */\n  @validateTypesAsync(literal(\"default\", \"muted\"))\n  public async setUserNotificationLevel(\n    notificationLevel: NotificationLevel\n  ): Promise<void> {\n    await this._services.commandExecutor.mutateResource<EditNotificationLevelRequest>(\n      \"post\",\n      `${this._configuration.links.myConversations}/${this.sid}`,\n      {\n        notification_level: notificationLevel,\n      }\n    );\n  }\n\n  /**\n   * Send a notification to the server indicating that this client is currently\n   * typing in this conversation. Typing ended notification is sent after a\n   * while automatically, but by calling this method again you ensure that\n   * typing ended is not received.\n   */\n  public typing(): Promise<void> {\n    return this._services.typingIndicator.send(this.sid);\n  }\n\n  /**\n   * Update the attributes of the conversation.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(json)\n  public async updateAttributes(attributes: JSONValue): Promise<Conversation> {\n    await this._services.commandExecutor.mutateResource<\n      EditConversationRequest,\n      ConversationResponse\n    >(\"post\", this._links.self, {\n      attributes:\n        attributes !== undefined ? JSON.stringify(attributes) : undefined,\n    });\n\n    return this;\n  }\n\n  /**\n   * Update the friendly name of the conversation.\n   * @param friendlyName New friendly name.\n   */\n  @validateTypesAsync(\"string\")\n  public async updateFriendlyName(friendlyName: string): Promise<Conversation> {\n    if (this._internalState.friendlyName !== friendlyName) {\n      await this._services.commandExecutor.mutateResource<\n        EditConversationRequest,\n        ConversationResponse\n      >(\"post\", this._links.self, { friendly_name: friendlyName });\n    }\n\n    return this;\n  }\n\n  /**\n   * Set the last read message index to the current read horizon.\n   * @param index Message index to set as last read. If null is provided, then\n   * the behavior is identical to {@link Conversation.setAllMessagesUnread}.\n   * @returns New count of unread messages after this update.\n   */\n  @validateTypesAsync([literal(null), nonNegativeInteger])\n  public async updateLastReadMessageIndex(\n    index: number | null\n  ): Promise<number> {\n    await this._subscribeStreams();\n    return this._setLastReadMessageIndex(index);\n  }\n\n  /**\n   * Update the unique name of the conversation.\n   * @param uniqueName New unique name for the conversation. Setting unique name\n   * to null removes it.\n   */\n  @validateTypesAsync([\"string\", literal(null)])\n  public async updateUniqueName(\n    uniqueName: string | null\n  ): Promise<Conversation> {\n    if (this._internalState.uniqueName !== uniqueName) {\n      uniqueName ||= \"\";\n\n      await this._services.commandExecutor.mutateResource<\n        EditConversationRequest,\n        ConversationResponse\n      >(\"post\", this._links.self, {\n        unique_name: uniqueName,\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Load and subscribe to this conversation and do not subscribe to its\n   * participants and messages. This or _subscribeStreams will need to be called\n   * before any events on conversation will fire.\n   * @internal\n   */\n  public async _subscribe(): Promise<SyncDocument> {\n    if (this._entityPromise) {\n      return this._entityPromise;\n    }\n\n    this._entityPromise = this._services.syncClient.document({\n      id: this._entityName,\n      mode: \"open_existing\",\n    });\n\n    try {\n      this._entity = await this._entityPromise;\n      this._entity.on(\"updated\", (args) => this._update(args.data));\n      this._entity.on(\"removed\", () => this.emit(\"removed\", this));\n      this._update(this._entity.data);\n\n      return this._entity;\n    } catch (err) {\n      this._entity = null;\n      this._entityPromise = null;\n\n      if (this._services.syncClient.connectionState != \"disconnected\") {\n        Conversation._logger.error(\"Failed to get conversation object\", err);\n      }\n      Conversation._logger.debug(\n        \"ERROR: Failed to get conversation object\",\n        err\n      );\n\n      throw err;\n    }\n  }\n\n  /**\n   * Fetch participants and messages of the conversation. This method needs to\n   * be called during conversation initialization to catch broken conversations\n   * (broken conversations are conversations that have essential Sync entities\n   * missing, i.e. the conversation document, the messages list or the\n   * participant map). In case of this conversation being broken, the method\n   * will throw an exception that will be caught and handled gracefully.\n   * @internal\n   */\n  public async _fetchStreams() {\n    await this._subscribe();\n    Conversation._logger.trace(\n      \"_streamsAvailable, this.entity.data=\",\n      this._entity?.data\n    );\n\n    const data = this._entity?.data as Record<string, string>;\n    this._messagesList = await this._services.syncClient.list({\n      id: data.messages,\n      mode: \"open_existing\",\n    });\n    this._participantsMap = await this._services.syncClient.map({\n      id: data.roster,\n      mode: \"open_existing\",\n    });\n  }\n\n  /**\n   * Load the attributes of this conversation and instantiate its participants\n   * and messages. This or _subscribe will need to be called before any events\n   * on the conversation will fire. This will need to be called before any\n   * events on participants or messages will fire\n   * @internal\n   */\n  public async _subscribeStreams() {\n    try {\n      await this._subscribe();\n      Conversation._logger.trace(\n        \"_subscribeStreams, this.entity.data=\",\n        this._entity?.data\n      );\n\n      const data = this._entity?.data as Record<string, string>;\n      const messagesObjectName = data.messages;\n      const rosterObjectName = data.roster;\n\n      await Promise.all([\n        this._messagesEntity.subscribe(\n          this._messagesList ?? messagesObjectName\n        ),\n        this._participantsEntity.subscribe(\n          this._participantsMap ?? rosterObjectName\n        ),\n      ]);\n    } catch (err) {\n      if (this._services.syncClient.connectionState !== \"disconnected\") {\n        Conversation._logger.error(\n          \"Failed to subscribe on conversation objects\",\n          this.sid,\n          err\n        );\n      }\n      Conversation._logger.debug(\n        \"ERROR: Failed to subscribe on conversation objects\",\n        this.sid,\n        err\n      );\n\n      throw err;\n    }\n  }\n\n  /**\n   * Stop listening for and firing events on this conversation.\n   * @internal\n   */\n  public async _unsubscribe() {\n    if (this._entity) {\n      await this._entity.close();\n      this._entity = null;\n      this._entityPromise = null;\n    }\n\n    return Promise.all([\n      this._participantsEntity.unsubscribe(),\n      this._messagesEntity.unsubscribe(),\n    ]);\n  }\n\n  /**\n   * Set conversation status.\n   * @internal\n   */\n  public _setStatus(\n    status: ConversationStatus,\n    source: ConversationsDataSource\n  ) {\n    this._dataSource = source;\n\n    if (this._internalState.status === status) {\n      return;\n    }\n\n    this._internalState.status = status;\n\n    if (status === \"joined\") {\n      this._subscribeStreams().catch((err) => {\n        Conversation._logger.debug(\n          \"ERROR while setting conversation status \" + status,\n          err\n        );\n        if (this._services.syncClient.connectionState !== \"disconnected\") {\n          throw err;\n        }\n      });\n      return;\n    }\n\n    if (this._entityPromise) {\n      this._unsubscribe().catch((err) => {\n        Conversation._logger.debug(\n          \"ERROR while setting conversation status \" + status,\n          err\n        );\n        if (this._services.syncClient.connectionState !== \"disconnected\") {\n          throw err;\n        }\n      });\n    }\n  }\n\n  /**\n   * Update the local conversation object with new values.\n   * @internal\n   */\n  public _update(update) {\n    Conversation._logger.trace(\"_update\", update);\n\n    Conversation.preprocessUpdate(update, this.sid);\n    const updateReasons = new Set<ConversationUpdateReason>();\n\n    for (const key of Object.keys(update)) {\n      const localKey = fieldMappings[key];\n\n      if (!localKey) {\n        continue;\n      }\n\n      switch (localKey) {\n        case fieldMappings.status:\n          if (\n            !update.status ||\n            update.status === \"unknown\" ||\n            this._internalState.status === update.status\n          ) {\n            break;\n          }\n\n          this._internalState.status = update.status;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.attributes:\n          if (isEqual(this._internalState.attributes, update.attributes)) {\n            break;\n          }\n\n          this._internalState.attributes = update.attributes;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.lastConsumedMessageIndex:\n          if (\n            update.lastConsumedMessageIndex === undefined ||\n            update.lastConsumedMessageIndex ===\n              this._internalState.lastReadMessageIndex\n          ) {\n            break;\n          }\n\n          this._internalState.lastReadMessageIndex =\n            update.lastConsumedMessageIndex;\n          updateReasons.add(\"lastReadMessageIndex\");\n\n          break;\n        case fieldMappings.lastMessage:\n          if (this._internalState.lastMessage && !update.lastMessage) {\n            delete this._internalState.lastMessage;\n            updateReasons.add(localKey);\n\n            break;\n          }\n\n          this._internalState.lastMessage =\n            this._internalState.lastMessage || {};\n\n          if (\n            update.lastMessage?.index !== undefined &&\n            update.lastMessage.index !== this._internalState.lastMessage.index\n          ) {\n            this._internalState.lastMessage.index = update.lastMessage.index;\n            updateReasons.add(localKey);\n          }\n\n          if (\n            update.lastMessage?.timestamp !== undefined &&\n            this._internalState.lastMessage?.dateCreated?.getTime() !==\n              update.lastMessage.timestamp.getTime()\n          ) {\n            this._internalState.lastMessage.dateCreated =\n              update.lastMessage.timestamp;\n            updateReasons.add(localKey);\n          }\n\n          if (isEqual(this._internalState.lastMessage, {})) {\n            delete this._internalState.lastMessage;\n          }\n\n          break;\n        case fieldMappings.state:\n          const state = update.state || undefined;\n\n          if (state !== undefined) {\n            state.dateUpdated = new Date(state.dateUpdated);\n          }\n\n          if (isEqual(this._internalState.state, state)) {\n            break;\n          }\n\n          this._internalState.state = state;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.bindings:\n          if (isEqual(this._internalState.bindings, update.bindings)) {\n            break;\n          }\n\n          this._internalState.bindings = update.bindings;\n          updateReasons.add(localKey);\n\n          break;\n        default:\n          const isDate = update[key] instanceof Date;\n          const keysMatchAsDates =\n            isDate &&\n            this._internalState[localKey]?.getTime() === update[key].getTime();\n          const keysMatchAsNonDates = !isDate && this[localKey] === update[key];\n\n          if (keysMatchAsDates || keysMatchAsNonDates) {\n            break;\n          }\n\n          this._internalState[localKey] = update[key];\n          updateReasons.add(localKey);\n      }\n    }\n\n    if (updateReasons.size > 0) {\n      this.emit(\"updated\", {\n        conversation: this,\n        updateReasons: [...updateReasons],\n      });\n    }\n  }\n\n  /**\n   * Handle onMessageAdded event.\n   */\n  private _onMessageAdded(message) {\n    for (const participant of this._participants.values()) {\n      if (participant.identity === message.author) {\n        participant._endTyping();\n        break;\n      }\n    }\n    this.emit(\"messageAdded\", message);\n  }\n\n  /**\n   * Set last read message index.\n   * @param index New index to set.\n   */\n  private async _setLastReadMessageIndex(\n    index: number | null\n  ): Promise<number> {\n    const result = await this._services.commandExecutor.mutateResource<\n      EditLastReadMessageIndexRequest,\n      EditLastReadMessageIndexResponse\n    >(\"post\", `${this._configuration.links.myConversations}/${this.sid}`, {\n      last_read_message_index: index,\n    });\n\n    return result.unread_messages_count;\n  }\n}\n\nexport {\n  ConversationDescriptor,\n  Conversation,\n  ConversationServices,\n  ConversationUpdateReason,\n  ConversationStatus,\n  NotificationLevel,\n  ConversationState,\n  ConversationUpdatedEventArgs,\n  SendMediaOptions,\n  SendEmailOptions,\n  LastMessage,\n  ConversationBindings,\n  ConversationEmailBinding,\n};\n"],"names":["ReplayEventEmitter","parseTime","Participants","Messages","UriBuilder","parseToNumber","MessageBuilder","isEqual","Logger","__decorate","validateTypesAsync","nonEmptyString","optionalJson","nonNegativeInteger","literal","Participant","objectSchema","custom","json"],"mappings":"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"}