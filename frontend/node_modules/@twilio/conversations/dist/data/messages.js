/*
@license
The following license applies to all parts of this software except as
documented below.

    Copyright (c) 2019, Twilio, inc.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

      1. Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.

      2. Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in
         the documentation and/or other materials provided with the
         distribution.

      3. Neither the name of Twilio nor the names of its contributors may
         be used to endorse or promote products derived from this software
         without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This software includes javascript-state-machine under the following license.

    Copyright (c) 2012, 2013, 2014, 2015, Jake Gordon and contributors

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

This software includes loglevel under the following license.

    Copyright (c) 2013 Tim Perry

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

This software includes q under the following license.

    Copyright 2009â€“2014 Kristopher Michael Kowal. All rights reserved.
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to
    deal in the Software without restriction, including without limitation the
    rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
    sell copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
    IN THE SOFTWARE.

This software includes platform.js under the following license.

    Copyright 2014 Benjamin Tan <https://d10.github.io/>
    Copyright 2011-2015 John-David Dalton <http://allyoucanleet.com/>

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/
'use strict';

var global =
  typeof global !== "undefined"
    ? global
    : typeof self !== "undefined"
    ? self
    : typeof window !== "undefined"
    ? window
    : {};

Object.defineProperty(exports, '__esModule', { value: true });

var logger = require('../logger.js');
var message = require('../message.js');
var mcsClient = require('@twilio/mcs-client');
var replayEventEmitter = require('@twilio/replay-event-emitter');

const log = logger.Logger.scope("Messages");
/**
 * Represents the collection of messages in a conversation
 */
class Messages extends replayEventEmitter.ReplayEventEmitter {
    constructor(conversation, configuration, services) {
        super();
        this.conversation = conversation;
        this.configuration = configuration;
        this.services = services;
        this.messagesByIndex = new Map();
        this.messagesListPromise = null;
    }
    /**
     * Subscribe to the Messages Event Stream
     * @param arg - Name of the Sync object, or the SyncList itself, that
     * represents the Messages resource.
     */
    async subscribe(arg) {
        if (this.messagesListPromise) {
            return this.messagesListPromise;
        }
        this.messagesListPromise =
            typeof arg === "string"
                ? this.services.syncClient.list({
                    id: arg,
                    mode: "open_existing",
                })
                : Promise.resolve(arg);
        try {
            const list = await this.messagesListPromise;
            list.on("itemAdded", (args) => {
                log.debug(`${this.conversation.sid} itemAdded: ${args.item.index}`);
                const links = {
                    self: `${this.conversation._links.messages}/${args.item.data.sid}`,
                    conversation: this.conversation._links.self,
                    messages_receipts: `${this.conversation._links.messages}/${args.item.data.sid}/Receipts`,
                };
                const message$1 = new message.Message(args.item.index, args.item.data, this.conversation, links, this.configuration, this.services);
                if (this.messagesByIndex.has(message$1.index)) {
                    log.debug("Message arrived, but is already known and ignored", this.conversation.sid, message$1.index);
                    return;
                }
                this.messagesByIndex.set(message$1.index, message$1);
                message$1.on("updated", (args) => this.emit("messageUpdated", args));
                this.emit("messageAdded", message$1);
            });
            list.on("itemRemoved", (args) => {
                log.debug(`#{this.conversation.sid} itemRemoved: ${args.index}`);
                const index = args.index;
                if (this.messagesByIndex.has(index)) {
                    const message = this.messagesByIndex.get(index);
                    if (!message) {
                        return;
                    }
                    this.messagesByIndex.delete(message.index);
                    message.removeAllListeners("updated");
                    this.emit("messageRemoved", message);
                }
            });
            list.on("itemUpdated", (args) => {
                log.debug(`${this.conversation.sid} itemUpdated: ${args.item.index}`);
                const message = this.messagesByIndex.get(args.item.index);
                if (message) {
                    message._update(args.item.data);
                }
            });
            return list;
        }
        catch (err) {
            this.messagesListPromise = null;
            if (this.services.syncClient.connectionState !== "disconnected") {
                log.error("Failed to get messages object for conversation", this.conversation.sid, err);
            }
            log.debug("ERROR: Failed to get messages object for conversation", this.conversation.sid, err);
            throw err;
        }
    }
    async unsubscribe() {
        if (!this.messagesListPromise) {
            return;
        }
        const entity = await this.messagesListPromise;
        entity.close();
        this.messagesListPromise = null;
    }
    /**
     * Send a message to the conversation. The message could include text and multiple media attachments.
     * @param message Message to post
     */
    sendV2(message) {
        log.debug("Sending message V2", message.mediaContent, message.attributes, message.emailOptions);
        return new mcsClient.CancellablePromise(async (resolve, reject, onCancel) => {
            var _a, _b, _c;
            const media = [];
            const requests = [];
            onCancel(() => {
                requests.forEach((request) => request.cancel());
            });
            for (const [category, mediaContent] of message.mediaContent) {
                try {
                    log.debug(`Adding media to a message as ${mediaContent instanceof FormData ? "FormData" : "SendMediaOptions"}`, mediaContent);
                    const request = mediaContent instanceof FormData
                        ? this.services.mcsClient.postFormData(mediaContent, category)
                        : this.services.mcsClient.post((_a = mediaContent.contentType) !== null && _a !== void 0 ? _a : "", (_b = mediaContent.media) !== null && _b !== void 0 ? _b : "", category, mediaContent.filename);
                    requests.push(request);
                    media.push(await request);
                }
                catch (e) {
                    reject(e);
                    return;
                }
            }
            const messagesPostRequest = this.services.commandExecutor.mutateResource("post", this.conversation._links.messages, {
                body: message.text,
                subject: (_c = message.emailOptions) === null || _c === void 0 ? void 0 : _c.subject,
                media_sids: media.map((m) => m.sid),
                attributes: typeof message.attributes !== "undefined"
                    ? JSON.stringify(message.attributes)
                    : undefined,
                content_sid: message.contentSid,
                content_variables: typeof message.contentVariables !== "undefined"
                    ? JSON.stringify(message.contentVariables.reduce((accum, current) => (Object.assign(Object.assign({}, accum), { [current.name]: current.value })), {}))
                    : undefined,
            });
            try {
                resolve(await messagesPostRequest);
            }
            catch (e) {
                reject(e);
            }
        });
    }
    /**
     * Send Message to the conversation
     * @param message Message to post
     * @param attributes Message attributes
     * @param emailOptions Options that modify E-mail integration behaviors.
     * @returns Returns promise which can fail
     */
    async send(message, attributes = {}, emailOptions) {
        log.debug("Sending text message", message, attributes, emailOptions);
        return this.services.commandExecutor.mutateResource("post", this.conversation._links.messages, {
            body: message !== null && message !== void 0 ? message : "",
            attributes: typeof attributes !== "undefined"
                ? JSON.stringify(attributes)
                : undefined,
            subject: emailOptions === null || emailOptions === void 0 ? void 0 : emailOptions.subject,
        });
    }
    /**
     * Send Media Message to the conversation
     * @param mediaContent Media content to post
     * @param attributes Message attributes
     * @param emailOptions Email options
     * @returns Returns promise which can fail
     */
    async sendMedia(mediaContent, attributes = {}, emailOptions) {
        var _a, _b;
        log.debug("Sending media message", mediaContent, attributes, emailOptions);
        log.debug(`Sending media message as ${mediaContent instanceof FormData ? "FormData" : "SendMediaOptions"}`, mediaContent, attributes);
        const media = mediaContent instanceof FormData
            ? await this.services.mcsClient.postFormData(mediaContent)
            : await this.services.mcsClient.post((_a = mediaContent.contentType) !== null && _a !== void 0 ? _a : "", (_b = mediaContent.media) !== null && _b !== void 0 ? _b : "", "media", mediaContent.filename);
        // emailOptions are currently ignored for media messages.
        return await this.services.commandExecutor.mutateResource("post", this.conversation._links.messages, {
            media_sids: [media.sid],
            attributes: typeof attributes !== "undefined"
                ? JSON.stringify(attributes)
                : undefined,
        });
    }
    /**
     * Returns messages from conversation using paginator interface
     * @param pageSize Number of messages to return in single chunk. By default it's 30.
     * @param anchor Most early message id which is already known, or 'end' by default
     * @param direction Pagination order 'backwards' or 'forward', 'forward' by default
     * @returns Last page of messages by default
     */
    async getMessages(pageSize, anchor, direction = "backwards") {
        return this._getMessages(pageSize, anchor, direction);
    }
    _wrapPaginator(order, page, op) {
        // Due to an inconsistency between Sync and Chat conventions, next and
        // previous pages should be swapped.
        const shouldReverse = order === "desc";
        const nextPage = () => page.nextPage().then((page) => this._wrapPaginator(order, page, op));
        const previousPage = () => page.prevPage().then((page) => this._wrapPaginator(order, page, op));
        return op(page.items).then((items) => ({
            items: items.sort((x, y) => {
                return x.index - y.index;
            }),
            hasPrevPage: shouldReverse ? page.hasNextPage : page.hasPrevPage,
            hasNextPage: shouldReverse ? page.hasPrevPage : page.hasNextPage,
            prevPage: shouldReverse ? nextPage : previousPage,
            nextPage: shouldReverse ? previousPage : nextPage,
        }));
    }
    _upsertMessage(index, value) {
        const cachedMessage = this.messagesByIndex.get(index);
        if (cachedMessage) {
            return cachedMessage;
        }
        const links = {
            self: `${this.conversation._links.messages}/${value.sid}`,
            conversation: this.conversation._links.self,
            messages_receipts: `${this.conversation._links.messages}/${value.sid}/Receipts`,
        };
        const message$1 = new message.Message(index, value, this.conversation, links, this.configuration, this.services);
        this.messagesByIndex.set(message$1.index, message$1);
        message$1.on("updated", (args) => this.emit("messageUpdated", args));
        return message$1;
    }
    /**
     * Returns last messages from conversation
     * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.
     * @param {String} [anchor] Most early message id which is already known, or 'end' by default
     * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default
     * @returns {Promise<SyncPaginator<Message>>} last page of messages by default
     * @private
     */
    async _getMessages(pageSize = 30, anchor = "end", direction = "forward") {
        const order = direction === "backwards" ? "desc" : "asc";
        const list = await this.messagesListPromise;
        const page = await (list === null || list === void 0 ? void 0 : list.getItems({
            from: anchor !== "end" ? anchor : void 0,
            pageSize,
            order,
            limit: pageSize, // @todo Limit equals pageSize by default in Sync. This is probably not ideal.
        }));
        return await this._wrapPaginator(order, page, (items) => Promise.all(items.map((item) => this._upsertMessage(item.index, item.data))));
    }
}

exports.Messages = Messages;
//# sourceMappingURL=messages.js.map
