{"version":3,"file":"participants.js","sources":["../../src/data/participants.ts"],"sourcesContent":["import {\n  ParticipantDescriptor,\n  Participant,\n  ParticipantUpdatedEventArgs,\n  ParticipantUpdateReason,\n  ParticipantEmailBinding,\n} from \"../participant\";\nimport { Logger } from \"../logger\";\n\nimport { Conversation } from \"../conversation\";\n\nimport { SyncMap, SyncClient } from \"twilio-sync\";\nimport { Users } from \"./users\";\nimport { CommandExecutor } from \"../command-executor\";\nimport { AddParticipantRequest } from \"../interfaces/commands/add-participant\";\nimport { Configuration } from \"../configuration\";\nimport { ParticipantResponse } from \"../interfaces/commands/participant-response\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\nimport { JSONValue } from \"../types\";\n\ntype ParticipantsEvents = {\n  participantJoined: (participant: Participant) => void;\n  participantLeft: (participant: Participant) => void;\n  participantUpdated: (data: {\n    participant: Participant;\n    updateReasons: ParticipantUpdateReason[];\n  }) => void;\n};\n\nconst log = Logger.scope(\"Participants\");\n\nexport interface ParticipantsServices {\n  syncClient: SyncClient;\n  users: Users;\n  commandExecutor: CommandExecutor;\n}\n\ninterface ParticipantsLinks {\n  participants: string;\n}\n\nexport interface ParticipantBindingOptions {\n  email?: ParticipantEmailBinding;\n}\n\n/**\n * @classdesc Represents the collection of participants for the conversation\n * @fires Participants#participantJoined\n * @fires Participants#participantLeft\n * @fires Participants#participantUpdated\n */\nclass Participants extends ReplayEventEmitter<ParticipantsEvents> {\n  private readonly configuration: Configuration;\n  private readonly services: ParticipantsServices;\n  private readonly links: ParticipantsLinks;\n\n  rosterEntityPromise: Promise<SyncMap> | null = null;\n\n  public readonly conversation: Conversation;\n  public readonly participants: Map<string, Participant>;\n\n  constructor(\n    conversation: Conversation,\n    participants: Map<string, Participant>,\n    links: ParticipantsLinks,\n    configuration: Configuration,\n    services: ParticipantsServices\n  ) {\n    super();\n    this.conversation = conversation;\n    this.participants = participants;\n    this.links = links;\n    this.configuration = configuration;\n    this.services = services;\n  }\n\n  async unsubscribe(): Promise<void> {\n    if (this.rosterEntityPromise) {\n      const entity = await this.rosterEntityPromise;\n      entity.close();\n      this.rosterEntityPromise = null;\n    }\n  }\n\n  subscribe(arg: string | SyncMap) {\n    const participantsMapPromise =\n      typeof arg === \"string\"\n        ? this.services.syncClient.map({ id: arg, mode: \"open_existing\" })\n        : Promise.resolve(arg);\n\n    return (this.rosterEntityPromise =\n      this.rosterEntityPromise ||\n      participantsMapPromise\n        .then((rosterMap) => {\n          rosterMap.on(\"itemAdded\", (args) => {\n            log.debug(this.conversation.sid + \" itemAdded: \" + args.item.key);\n            this.upsertParticipant(args.item.key, args.item.data).then(\n              (participant) => {\n                this.emit(\"participantJoined\", participant);\n              }\n            );\n          });\n\n          rosterMap.on(\"itemRemoved\", (args) => {\n            log.debug(this.conversation.sid + \" itemRemoved: \" + args.key);\n            const participantSid = args.key;\n            if (!this.participants.has(participantSid)) {\n              return;\n            }\n            const leftParticipant = this.participants.get(participantSid);\n            this.participants.delete(participantSid);\n            if (!leftParticipant) {\n              return;\n            }\n            this.emit(\"participantLeft\", leftParticipant);\n          });\n\n          rosterMap.on(\"itemUpdated\", (args) => {\n            log.debug(this.conversation.sid + \" itemUpdated: \" + args.item.key);\n            this.upsertParticipant(args.item.key, args.item.data);\n          });\n\n          const participantsPromises: Promise<Participant>[] = [];\n          const rosterMapHandler = (paginator) => {\n            paginator.items.forEach((item) => {\n              participantsPromises.push(\n                this.upsertParticipant(item.key, item.data)\n              );\n            });\n            return paginator.hasNextPage\n              ? paginator.nextPage().then(rosterMapHandler)\n              : null;\n          };\n\n          return rosterMap\n            .getItems()\n            .then(rosterMapHandler)\n            .then(() => Promise.all(participantsPromises))\n            .then(() => rosterMap);\n        })\n        .catch((err) => {\n          this.rosterEntityPromise = null;\n          if (this.services.syncClient.connectionState != \"disconnected\") {\n            log.error(\n              \"Failed to get roster object for conversation\",\n              this.conversation.sid,\n              err\n            );\n          }\n          log.debug(\n            \"ERROR: Failed to get roster object for conversation\",\n            this.conversation.sid,\n            err\n          );\n          throw err;\n        }));\n  }\n\n  async upsertParticipantFromResponse(\n    data: ParticipantResponse\n  ): Promise<Participant> {\n    const {\n      sid,\n      attributes: responseAttributes,\n      date_created: dateCreated,\n      date_updated: dateUpdated,\n      identity: responseIdentity,\n      role_sid: roleSid,\n      messaging_binding: messagingBinding,\n    } = data;\n\n    return await this.upsertParticipant(sid, {\n      attributes: responseAttributes,\n      dateCreated: new Date(dateCreated),\n      dateUpdated: new Date(dateUpdated),\n      identity: responseIdentity,\n      roleSid,\n      lastConsumedMessageIndex: null,\n      lastConsumptionTimestamp: null,\n      type: messagingBinding?.type ?? \"chat\",\n    });\n  }\n\n  async upsertParticipant(\n    participantSid: string,\n    data: ParticipantDescriptor\n  ): Promise<Participant> {\n    let participant = this.participants.get(participantSid);\n    if (participant) {\n      return participant._update(data);\n    }\n\n    const links = {\n      self: `${this.links.participants}/${participantSid}`,\n    };\n\n    participant = new Participant(\n      data,\n      participantSid,\n      this.conversation,\n      links,\n      this.services\n    );\n    this.participants.set(participantSid, participant);\n    participant.on(\"updated\", (args: ParticipantUpdatedEventArgs) =>\n      this.emit(\"participantUpdated\", args)\n    );\n    return participant;\n  }\n\n  /**\n   * @returns {Promise<Array<Participant>>} returns list of participants {@see Participant}\n   */\n  async getParticipants(): Promise<Participant[]> {\n    return this.rosterEntityPromise\n      ? this.rosterEntityPromise.then(() => {\n          const participants: Participant[] = [];\n          this.participants.forEach((participant) =>\n            participants.push(participant)\n          );\n          return participants;\n        })\n      : [];\n  }\n\n  /**\n   * Get participant by SID from conversation\n   * @returns {Promise<Participant>}\n   */\n  async getParticipantBySid(\n    participantSid: string\n  ): Promise<Participant | null> {\n    return this.rosterEntityPromise\n      ? this.rosterEntityPromise.then(() => {\n          const participant = this.participants.get(participantSid);\n          if (!participant) {\n            throw new Error(\n              \"Participant with SID \" + participantSid + \" was not found\"\n            );\n          }\n          return participant;\n        })\n      : null;\n  }\n\n  /**\n   * Get participant by identity from conversation\n   * @returns {Promise<Participant>}\n   */\n  async getParticipantByIdentity(\n    identity: string\n  ): Promise<Participant | null> {\n    let foundParticipant: Participant | null = null;\n    return this.rosterEntityPromise\n      ? this.rosterEntityPromise.then(() => {\n          this.participants.forEach((participant) => {\n            if (participant.identity === identity) {\n              foundParticipant = participant;\n            }\n          });\n          if (!foundParticipant) {\n            throw new Error(\n              \"Participant with identity \" + identity + \" was not found\"\n            );\n          }\n          return foundParticipant;\n        })\n      : null;\n  }\n\n  /**\n   * Add a chat participant to the conversation\n   */\n  async add(\n    identity: string,\n    attributes: JSONValue\n  ): Promise<ParticipantResponse> {\n    return await this.services.commandExecutor.mutateResource<\n      AddParticipantRequest,\n      ParticipantResponse\n    >(\"post\", this.links.participants, {\n      identity,\n      attributes:\n        typeof attributes !== \"undefined\"\n          ? JSON.stringify(attributes)\n          : undefined,\n    });\n  }\n\n  /**\n   * Add a non-chat participant to the conversation.\n   */\n  async addNonChatParticipant(\n    proxyAddress: string,\n    address: string,\n    attributes: JSONValue = {},\n    bindingOptions: ParticipantBindingOptions = {}\n  ): Promise<ParticipantResponse> {\n    return await this.services.commandExecutor.mutateResource<\n      AddParticipantRequest,\n      ParticipantResponse\n    >(\"post\", this.links.participants, {\n      attributes:\n        typeof attributes !== \"undefined\"\n          ? JSON.stringify(attributes)\n          : undefined,\n      messaging_binding: {\n        address,\n        proxy_address: proxyAddress,\n        name: bindingOptions?.email?.name,\n        level: bindingOptions?.email?.level,\n      },\n    });\n  }\n\n  /**\n   * Remove the participant with a given identity from a conversation.\n   */\n  remove(identity: string): Promise<void> {\n    return this.services.commandExecutor.mutateResource(\n      \"delete\",\n      `${this.links.participants}/${encodeURIComponent(identity)}`\n    );\n  }\n}\n\nexport { Participants };\n\n/**\n * Fired when participant joined conversation\n * @event Participants#participantJoined\n * @type {Participant}\n */\n\n/**\n * Fired when participant left conversation\n * @event Participants#participantLeft\n * @type {Participant}\n */\n\n/**\n * Fired when participant updated\n * @event Participants#participantUpdated\n * @type {Object}\n * @property {Participant} participant - Updated Participant\n * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons\n */\n"],"names":["Logger","ReplayEventEmitter","participant","Participant"],"mappings":"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"}