/*
@license
The following license applies to all parts of this software except as
documented below.

    Copyright (c) 2019, Twilio, inc.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

      1. Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.

      2. Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in
         the documentation and/or other materials provided with the
         distribution.

      3. Neither the name of Twilio nor the names of its contributors may
         be used to endorse or promote products derived from this software
         without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This software includes javascript-state-machine under the following license.

    Copyright (c) 2012, 2013, 2014, 2015, Jake Gordon and contributors

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

This software includes loglevel under the following license.

    Copyright (c) 2013 Tim Perry

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

This software includes q under the following license.

    Copyright 2009â€“2014 Kristopher Michael Kowal. All rights reserved.
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to
    deal in the Software without restriction, including without limitation the
    rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
    sell copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
    IN THE SOFTWARE.

This software includes platform.js under the following license.

    Copyright 2014 Benjamin Tan <https://d10.github.io/>
    Copyright 2011-2015 John-David Dalton <http://allyoucanleet.com/>

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/
'use strict';

var global =
  typeof global !== "undefined"
    ? global
    : typeof self !== "undefined"
    ? self
    : typeof window !== "undefined"
    ? window
    : {};

Object.defineProperty(exports, '__esModule', { value: true });

var logger = require('../logger.js');
var conversation = require('../conversation.js');
var deferred = require('../util/deferred.js');
var index = require('../util/index.js');
var replayEventEmitter = require('@twilio/replay-event-emitter');
var isEqual = require('lodash.isequal');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var isEqual__default = /*#__PURE__*/_interopDefaultLegacy(isEqual);

const log = logger.Logger.scope("Conversations");
/**
 * Represents conversations collection
 * {@see Conversation}
 */
class Conversations extends replayEventEmitter.ReplayEventEmitter {
    constructor(configuration, services) {
        super();
        this.conversations = new Map();
        this.myConversationsRead = new deferred.Deferred();
        this.tombstones = new Set();
        this.myConversationsFetched = false;
        this.configuration = configuration;
        this.services = services;
    }
    async addConversation(options) {
        var _a, _b, _c;
        const attributes = typeof (options === null || options === void 0 ? void 0 : options.attributes) !== "undefined" ? options.attributes : {};
        const response = await this.services.commandExecutor.mutateResource("post", this.configuration.links.conversations, {
            friendly_name: options.friendlyName,
            unique_name: options.uniqueName,
            attributes: typeof attributes !== "undefined"
                ? JSON.stringify(attributes)
                : undefined,
        });
        const conversationSid = (_a = response.sid) !== null && _a !== void 0 ? _a : null;
        const conversationDocument = (_c = (_b = response.sync_objects) === null || _b === void 0 ? void 0 : _b.conversation) !== null && _c !== void 0 ? _c : null;
        const links = Object.assign({ self: response.url }, response.links);
        const existingConversation = this.conversations.get(conversationSid);
        if (existingConversation) {
            await existingConversation._subscribe();
            return existingConversation;
        }
        const conversation$1 = new conversation.Conversation({
            channel: conversationDocument,
            entityName: "",
            uniqueName: "",
            attributes: null,
            createdBy: "",
            friendlyName: "",
            lastConsumedMessageIndex: 0,
            dateCreated: null,
            dateUpdated: null,
        }, conversationSid, links, this.configuration, this.services);
        this.conversations.set(conversation$1.sid, conversation$1);
        this._registerForEvents(conversation$1);
        await conversation$1._subscribe();
        this.emit("conversationAdded", conversation$1);
        return conversation$1;
    }
    /**
     * Fetch conversations list and instantiate all necessary objects
     */
    async fetchConversations() {
        try {
            const map = await this._getMap();
            map.on("itemAdded", (args) => {
                log.debug(`itemAdded: ${args.item.key}`);
                this._upsertConversation("sync", args.item.key, args.item.data);
            });
            map.on("itemRemoved", (args) => {
                log.debug(`itemRemoved: ${args.key}`);
                const sid = args.key;
                if (!this.myConversationsFetched) {
                    this.tombstones.add(sid);
                }
                const conversation = this.conversations.get(sid);
                if (!conversation) {
                    return;
                }
                if (conversation.status === "joined") {
                    conversation._setStatus("notParticipating", "sync");
                    this.emit("conversationLeft", conversation);
                }
                this.conversations.delete(sid);
                this.emit("conversationRemoved", conversation);
                conversation.emit("removed", conversation);
            });
            map.on("itemUpdated", (args) => {
                log.debug(`itemUpdated: ${args.item.key}`);
                this._upsertConversation("sync", args.item.key, args.item.data);
            });
            const myConversations = await this._fetchMyConversations();
            const upserts = [];
            for (const conversation of myConversations) {
                upserts.push(this._upsertConversation("rest", conversation["channel_sid"], conversation));
            }
            this.myConversationsRead.set(true);
            await Promise.all(upserts);
            this.myConversationsFetched = true;
            this.tombstones.clear();
            log.debug("The conversations list has been successfully fetched");
            return this;
        }
        catch (error) {
            const errorMessage = "Failed to fetch the conversations list";
            if (this.services.syncClient.connectionState !== "disconnected") {
                log.error(errorMessage, error);
            }
            log.debug(`ERROR: ${errorMessage}`, error);
            throw error;
        }
    }
    async getConversations() {
        const conversationsMap = await this._getMap();
        const page = await conversationsMap.getItems();
        return this._wrapPaginator(page, (items) => Promise.all(items.map((item) => this._upsertConversation("sync", item.key, item.data))));
    }
    async getConversation(sid) {
        const conversationsMap = await this._getMap();
        const page = await conversationsMap.getItems({ key: sid });
        const items = page.items.map((item) => this._upsertConversation("sync", item.key, item.data));
        return items.length > 0 ? items[0] : null;
    }
    async getConversationByUniqueName(uniqueName) {
        const url = new index.UriBuilder(this.configuration.links.myConversations)
            .path(uniqueName)
            .build();
        const response = await this.services.network.get(url);
        const body = response.body;
        const sid = body.conversation_sid;
        const data = {
            entityName: null,
            lastConsumedMessageIndex: body.last_read_message_index,
            status: (body === null || body === void 0 ? void 0 : body.status) || "unknown",
            friendlyName: body.friendly_name,
            dateUpdated: body.date_updated,
            dateCreated: body.date_created,
            uniqueName: body.unique_name,
            createdBy: body.created_by,
            attributes: body.attributes,
            channel: body.sync_objects.conversation,
            notificationLevel: body === null || body === void 0 ? void 0 : body.notification_level,
            sid,
        };
        return sid ? this._upsertConversation("sync", sid, data) : null;
    }
    async peekConversation(sid) {
        const url = new index.UriBuilder(this.configuration.links.conversations)
            .path(sid)
            .build();
        const response = await this.services.network.get(url);
        const body = response.body;
        const data = {
            entityName: null,
            // lastConsumedMessageIndex: body.last_read_message_index,
            status: (body === null || body === void 0 ? void 0 : body.status) || "unknown",
            friendlyName: body.friendly_name,
            dateUpdated: body.date_updated,
            dateCreated: body.date_created,
            uniqueName: body.unique_name,
            createdBy: body.created_by,
            attributes: body.attributes,
            channel: `${sid}.channel`,
            // notificationLevel: body?.notification_level,
            sid,
        };
        return this._upsertConversation("sync", sid, data);
    }
    async _getMap() {
        return await this.services.syncClient.map({
            id: this.configuration.myConversations,
            mode: "open_existing",
        });
    }
    async _wrapPaginator(page, op) {
        const items = await op(page.items);
        return {
            items: items.filter((item) => item !== null),
            hasNextPage: page.hasNextPage,
            hasPrevPage: page.hasPrevPage,
            nextPage: () => page.nextPage().then((x) => this._wrapPaginator(x, op)),
            prevPage: () => page.prevPage().then((x) => this._wrapPaginator(x, op)),
        };
    }
    async _updateConversation(source, conversation, data) {
        const areSourcesDifferent = conversation._statusSource !== undefined &&
            source !== conversation._statusSource;
        const isChannelSourceSync = source !== "rest" || conversation._statusSource === "sync";
        if (areSourcesDifferent && isChannelSourceSync && source !== "sync") {
            log.trace("upsertConversation: conversation is known from sync and came from REST, ignoring", {
                sid: conversation.sid,
                data: data.status,
                conversation: conversation.status,
            });
            return;
        }
        if (data.status === "joined" && conversation.status !== "joined") {
            conversation._setStatus("joined", source);
            const updateData = {};
            if (typeof data.notificationLevel !== "undefined") {
                updateData.notificationLevel = data.notificationLevel;
            }
            if (typeof data.lastConsumedMessageIndex !== "undefined") {
                updateData.lastConsumedMessageIndex = data.lastConsumedMessageIndex;
            }
            if (!isEqual__default["default"](updateData, {})) {
                conversation._update(updateData);
            }
            await conversation._subscribe();
            this.emit("conversationJoined", conversation);
            return;
        }
        if (data.status === "notParticipating" &&
            conversation.status === "joined") {
            conversation._setStatus("notParticipating", source);
            conversation._update(data);
            await conversation._subscribe();
            this.emit("conversationLeft", conversation);
            return;
        }
        if (data.status === "notParticipating") {
            await conversation._subscribe();
            return;
        }
        conversation._update(data);
    }
    async _upsertConversation(source, sid, data) {
        log.trace(`upsertConversation called for ${sid}`, data);
        const conversation$1 = this.conversations.get(sid);
        // If the channel is known, update it
        if (conversation$1) {
            log.trace(`upsertConversation: the conversation ${conversation$1.sid} is known;` +
                `its status is known from the source ${conversation$1._statusSource} ` +
                `and the update came from the source ${source}`, conversation$1);
            await this._updateConversation(source, conversation$1, data);
            await conversation$1._subscribe();
            return conversation$1;
        }
        // If the conversations is deleted, ignore it
        if (source === "rest" && this.tombstones.has(sid)) {
            log.trace("upsertChannel: the conversation is deleted but reappeared again from REST, ignoring", sid);
            return null;
        }
        // If the conversation is unknown, fetch it
        log.trace("upsertConversation: creating a local conversation object with sid " +
            sid, data);
        const baseLink = `${this.configuration.links.conversations}/${sid}`;
        const links = {
            self: baseLink,
            messages: `${baseLink}/Messages`,
            participants: `${baseLink}/Participants`,
        };
        const newConversation = new conversation.Conversation(data, sid, links, this.configuration, this.services);
        this.conversations.set(sid, newConversation);
        try {
            await newConversation._subscribe();
            if (data.status === "joined") {
                await newConversation._fetchStreams();
            }
        }
        catch (error) {
            if (error.name !== "SyncError") {
                throw error;
            }
            log.trace("upsertChannel: the conversation is missing some Sync entity(ies), ignoring", sid, error);
            this.conversations.delete(sid);
            return null;
        }
        this._registerForEvents(newConversation);
        this.emit("conversationAdded", newConversation);
        if (data.status === "joined") {
            newConversation._setStatus("joined", source);
            this.emit("conversationJoined", newConversation);
        }
        return newConversation;
    }
    async _fetchMyConversations() {
        var _a;
        let conversations = [];
        let pageToken = null;
        do {
            const url = new index.UriBuilder(this.configuration.links.myConversations);
            if (pageToken) {
                url.arg("PageToken", pageToken);
            }
            const response = await this.services.network.get(url.build());
            const receivedConversations = (_a = response.body) === null || _a === void 0 ? void 0 : _a.conversations.map((conversationDescriptor) => ({
                descriptor: conversationDescriptor,
                channel_sid: conversationDescriptor.conversation_sid,
                status: conversationDescriptor.status,
                channel: conversationDescriptor.sync_objects.conversation,
                messages: conversationDescriptor.sync_objects.messages,
                roster: `${conversationDescriptor.conversation_sid}.roster`,
                lastConsumedMessageIndex: conversationDescriptor.last_read_message_index,
                notificationLevel: conversationDescriptor.notification_level,
            }));
            pageToken = response.body.meta.next_token;
            conversations = [...conversations, ...receivedConversations];
        } while (pageToken);
        return conversations;
    }
    _onConversationRemoved(sid) {
        const conversation = this.conversations.get(sid);
        if (conversation) {
            this.conversations.delete(sid);
            this.emit("conversationRemoved", conversation);
        }
    }
    _registerForEvents(conversation) {
        conversation.on("removed", () => this._onConversationRemoved(conversation.sid));
        conversation.on("updated", (args) => this.emit("conversationUpdated", args));
        conversation.on("participantJoined", (participant) => this.emit("participantJoined", participant));
        conversation.on("participantLeft", (participant) => this.emit("participantLeft", participant));
        conversation.on("participantUpdated", (args) => this.emit("participantUpdated", args));
        conversation.on("messageAdded", (message) => this.emit("messageAdded", message));
        conversation.on("messageUpdated", (args) => this.emit("messageUpdated", args));
        conversation.on("messageRemoved", (message) => this.emit("messageRemoved", message));
        conversation.on("typingStarted", (participant) => this.emit("typingStarted", participant));
        conversation.on("typingEnded", (participant) => this.emit("typingEnded", participant));
    }
}

exports.Conversation = conversation.Conversation;
exports.Conversations = Conversations;
//# sourceMappingURL=conversations.js.map
