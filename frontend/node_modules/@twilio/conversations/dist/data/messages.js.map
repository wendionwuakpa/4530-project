{"version":3,"file":"messages.js","sources":["../../src/data/messages.ts"],"sourcesContent":["import { Logger } from \"../logger\";\n\nimport {\n  Message,\n  MessageData,\n  MessageUpdatedEventArgs,\n  MessageUpdateReason,\n} from \"../message\";\nimport {\n  Conversation,\n  SendEmailOptions,\n  SendMediaOptions,\n} from \"../conversation\";\nimport { UnsentMessage } from \"../unsent-message\";\n\nimport { SyncList, SyncClient } from \"twilio-sync\";\nimport { SyncPaginator } from \"../sync-paginator\";\n\nimport { McsClient, McsMedia, CancellablePromise } from \"@twilio/mcs-client\";\nimport { Network } from \"../services/network\";\nimport { Configuration } from \"../configuration\";\nimport { CommandExecutor } from \"../command-executor\";\nimport { SendMessageRequest } from \"../interfaces/commands/send-message\";\nimport { MessageResponse } from \"../interfaces/commands/message-response\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\nimport { JSONValue } from \"../types\";\nimport { ChannelMetadataClient } from \"../channel-metadata-client\";\n\ntype MessagesEvents = {\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n};\n\nconst log = Logger.scope(\"Messages\");\n\nexport interface MessagesServices {\n  mcsClient: McsClient;\n  network: Network;\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n  channelMetadataClient: ChannelMetadataClient;\n}\n\n/**\n * Represents the collection of messages in a conversation\n */\nclass Messages extends ReplayEventEmitter<MessagesEvents> {\n  public readonly conversation: Conversation;\n  private readonly configuration: Configuration;\n  private readonly services: MessagesServices;\n  private readonly messagesByIndex: Map<number, Message>;\n  private messagesListPromise: Promise<SyncList> | null;\n\n  public constructor(\n    conversation: Conversation,\n    configuration: Configuration,\n    services: MessagesServices\n  ) {\n    super();\n\n    this.conversation = conversation;\n    this.configuration = configuration;\n    this.services = services;\n\n    this.messagesByIndex = new Map();\n    this.messagesListPromise = null;\n  }\n\n  /**\n   * Subscribe to the Messages Event Stream\n   * @param arg - Name of the Sync object, or the SyncList itself, that\n   * represents the Messages resource.\n   */\n  public async subscribe(arg: string | SyncList) {\n    if (this.messagesListPromise) {\n      return this.messagesListPromise;\n    }\n\n    this.messagesListPromise =\n      typeof arg === \"string\"\n        ? this.services.syncClient.list({\n            id: arg,\n            mode: \"open_existing\",\n          })\n        : Promise.resolve(arg);\n\n    try {\n      const list = await this.messagesListPromise;\n\n      list.on(\"itemAdded\", (args) => {\n        log.debug(`${this.conversation.sid} itemAdded: ${args.item.index}`);\n\n        const links = {\n          self: `${this.conversation._links.messages}/${args.item.data.sid}`,\n          conversation: this.conversation._links.self,\n          messages_receipts: `${this.conversation._links.messages}/${args.item.data.sid}/Receipts`,\n        };\n        const message = new Message(\n          args.item.index,\n          args.item.data,\n          this.conversation,\n          links,\n          this.configuration,\n          this.services\n        );\n\n        if (this.messagesByIndex.has(message.index)) {\n          log.debug(\n            \"Message arrived, but is already known and ignored\",\n            this.conversation.sid,\n            message.index\n          );\n          return;\n        }\n\n        this.messagesByIndex.set(message.index, message);\n\n        message.on(\"updated\", (args: MessageUpdatedEventArgs) =>\n          this.emit(\"messageUpdated\", args)\n        );\n\n        this.emit(\"messageAdded\", message);\n      });\n\n      list.on(\"itemRemoved\", (args) => {\n        log.debug(`#{this.conversation.sid} itemRemoved: ${args.index}`);\n\n        const index = args.index;\n\n        if (this.messagesByIndex.has(index)) {\n          const message = this.messagesByIndex.get(index);\n          if (!message) {\n            return;\n          }\n\n          this.messagesByIndex.delete(message.index);\n          message.removeAllListeners(\"updated\");\n          this.emit(\"messageRemoved\", message);\n        }\n      });\n\n      list.on(\"itemUpdated\", (args) => {\n        log.debug(`${this.conversation.sid} itemUpdated: ${args.item.index}`);\n\n        const message = this.messagesByIndex.get(args.item.index);\n\n        if (message) {\n          message._update(args.item.data);\n        }\n      });\n\n      return list;\n    } catch (err) {\n      this.messagesListPromise = null;\n\n      if (this.services.syncClient.connectionState !== \"disconnected\") {\n        log.error(\n          \"Failed to get messages object for conversation\",\n          this.conversation.sid,\n          err\n        );\n      }\n\n      log.debug(\n        \"ERROR: Failed to get messages object for conversation\",\n        this.conversation.sid,\n        err\n      );\n\n      throw err;\n    }\n  }\n\n  public async unsubscribe() {\n    if (!this.messagesListPromise) {\n      return;\n    }\n\n    const entity = await this.messagesListPromise;\n    entity.close();\n    this.messagesListPromise = null;\n  }\n\n  /**\n   * Send a message to the conversation. The message could include text and multiple media attachments.\n   * @param message Message to post\n   */\n  public sendV2(message: UnsentMessage): CancellablePromise<MessageResponse> {\n    log.debug(\n      \"Sending message V2\",\n      message.mediaContent,\n      message.attributes,\n      message.emailOptions\n    );\n\n    return new CancellablePromise(async (resolve, reject, onCancel) => {\n      const media: McsMedia[] = [];\n      const requests: CancellablePromise<McsMedia>[] = [];\n\n      onCancel(() => {\n        requests.forEach((request) => request.cancel());\n      });\n\n      for (const [category, mediaContent] of message.mediaContent) {\n        try {\n          log.debug(\n            `Adding media to a message as ${\n              mediaContent instanceof FormData ? \"FormData\" : \"SendMediaOptions\"\n            }`,\n            mediaContent\n          );\n\n          const request =\n            mediaContent instanceof FormData\n              ? this.services.mcsClient.postFormData(mediaContent, category)\n              : this.services.mcsClient.post(\n                  mediaContent.contentType ?? \"\",\n                  mediaContent.media ?? \"\",\n                  category,\n                  mediaContent.filename\n                );\n\n          requests.push(request);\n\n          media.push(await request);\n        } catch (e) {\n          reject(e);\n          return;\n        }\n      }\n\n      const messagesPostRequest = this.services.commandExecutor.mutateResource<\n        SendMessageRequest,\n        MessageResponse\n      >(\"post\", this.conversation._links.messages, {\n        body: message.text,\n        subject: message.emailOptions?.subject,\n        media_sids: media.map((m) => m.sid),\n        attributes:\n          typeof message.attributes !== \"undefined\"\n            ? JSON.stringify(message.attributes)\n            : undefined,\n        content_sid: message.contentSid,\n        content_variables:\n          typeof message.contentVariables !== \"undefined\"\n            ? JSON.stringify(\n                message.contentVariables.reduce<Record<string, string>>(\n                  (accum, current) => ({\n                    ...accum,\n                    [current.name]: current.value,\n                  }),\n                  {}\n                )\n              )\n            : undefined,\n      });\n\n      try {\n        resolve(await messagesPostRequest);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Send Message to the conversation\n   * @param message Message to post\n   * @param attributes Message attributes\n   * @param emailOptions Options that modify E-mail integration behaviors.\n   * @returns Returns promise which can fail\n   */\n  public async send(\n    message: null | string | FormData | SendMediaOptions,\n    attributes: JSONValue = {},\n    emailOptions?: SendEmailOptions\n  ): Promise<MessageResponse> {\n    log.debug(\"Sending text message\", message, attributes, emailOptions);\n\n    return this.services.commandExecutor.mutateResource<\n      SendMessageRequest,\n      MessageResponse\n    >(\"post\", this.conversation._links.messages, {\n      body: message ?? \"\",\n      attributes:\n        typeof attributes !== \"undefined\"\n          ? JSON.stringify(attributes)\n          : undefined,\n      subject: emailOptions?.subject,\n    });\n  }\n\n  /**\n   * Send Media Message to the conversation\n   * @param mediaContent Media content to post\n   * @param attributes Message attributes\n   * @param emailOptions Email options\n   * @returns Returns promise which can fail\n   */\n  public async sendMedia(\n    mediaContent: FormData | SendMediaOptions,\n    attributes: JSONValue = {},\n    emailOptions?: SendEmailOptions\n  ) {\n    log.debug(\"Sending media message\", mediaContent, attributes, emailOptions);\n    log.debug(\n      `Sending media message as ${\n        mediaContent instanceof FormData ? \"FormData\" : \"SendMediaOptions\"\n      }`,\n      mediaContent,\n      attributes\n    );\n\n    const media: McsMedia =\n      mediaContent instanceof FormData\n        ? await this.services.mcsClient.postFormData(mediaContent)\n        : await this.services.mcsClient.post(\n            mediaContent.contentType ?? \"\",\n            mediaContent.media ?? \"\",\n            \"media\",\n            mediaContent.filename\n          );\n\n    // emailOptions are currently ignored for media messages.\n    return await this.services.commandExecutor.mutateResource<\n      SendMessageRequest,\n      MessageResponse\n    >(\"post\", this.conversation._links.messages, {\n      media_sids: [media.sid],\n      attributes:\n        typeof attributes !== \"undefined\"\n          ? JSON.stringify(attributes)\n          : undefined,\n    });\n  }\n\n  /**\n   * Returns messages from conversation using paginator interface\n   * @param pageSize Number of messages to return in single chunk. By default it's 30.\n   * @param anchor Most early message id which is already known, or 'end' by default\n   * @param direction Pagination order 'backwards' or 'forward', 'forward' by default\n   * @returns Last page of messages by default\n   */\n  public async getMessages(\n    pageSize: number | undefined,\n    anchor: number | \"end\" | undefined,\n    direction: \"forward\" | \"backwards\" = \"backwards\"\n  ): Promise<SyncPaginator<Message>> {\n    return this._getMessages(pageSize, anchor, direction);\n  }\n\n  private _wrapPaginator(order, page, op) {\n    // Due to an inconsistency between Sync and Chat conventions, next and\n    // previous pages should be swapped.\n    const shouldReverse = order === \"desc\";\n\n    const nextPage = () =>\n      page.nextPage().then((page) => this._wrapPaginator(order, page, op));\n    const previousPage = () =>\n      page.prevPage().then((page) => this._wrapPaginator(order, page, op));\n\n    return op(page.items).then((items) => ({\n      items: items.sort((x, y) => {\n        return x.index - y.index;\n      }),\n      hasPrevPage: shouldReverse ? page.hasNextPage : page.hasPrevPage,\n      hasNextPage: shouldReverse ? page.hasPrevPage : page.hasNextPage,\n      prevPage: shouldReverse ? nextPage : previousPage,\n      nextPage: shouldReverse ? previousPage : nextPage,\n    }));\n  }\n\n  private _upsertMessage(index: number, value: MessageData) {\n    const cachedMessage = this.messagesByIndex.get(index);\n\n    if (cachedMessage) {\n      return cachedMessage;\n    }\n\n    const links = {\n      self: `${this.conversation._links.messages}/${value.sid}`,\n      conversation: this.conversation._links.self,\n      messages_receipts: `${this.conversation._links.messages}/${value.sid}/Receipts`,\n    };\n    const message = new Message(\n      index,\n      value,\n      this.conversation,\n      links,\n      this.configuration,\n      this.services\n    );\n\n    this.messagesByIndex.set(message.index, message);\n\n    message.on(\"updated\", (args: MessageUpdatedEventArgs) =>\n      this.emit(\"messageUpdated\", args)\n    );\n\n    return message;\n  }\n\n  /**\n   * Returns last messages from conversation\n   * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.\n   * @param {String} [anchor] Most early message id which is already known, or 'end' by default\n   * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default\n   * @returns {Promise<SyncPaginator<Message>>} last page of messages by default\n   * @private\n   */\n  private async _getMessages(\n    pageSize = 30,\n    anchor: number | \"end\" = \"end\",\n    direction: \"forward\" | \"backwards\" = \"forward\"\n  ): Promise<SyncPaginator<Message>> {\n    const order = direction === \"backwards\" ? \"desc\" : \"asc\";\n    const list = await this.messagesListPromise;\n    const page = await list?.getItems({\n      from: anchor !== \"end\" ? anchor : void 0,\n      pageSize,\n      order,\n      limit: pageSize, // @todo Limit equals pageSize by default in Sync. This is probably not ideal.\n    });\n\n    return await this._wrapPaginator(order, page, (items) =>\n      Promise.all(\n        items.map((item) => this._upsertMessage(item.index, item.data))\n      )\n    );\n  }\n}\n\nexport { Messages };\n"],"names":["Logger","ReplayEventEmitter","message","Message","CancellablePromise"],"mappings":"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"}