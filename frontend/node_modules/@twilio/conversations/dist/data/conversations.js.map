{"version":3,"file":"conversations.js","sources":["../../src/data/conversations.ts"],"sourcesContent":["import { Logger } from \"../logger\";\nimport {\n  Conversation,\n  ConversationDescriptor,\n  ConversationUpdatedEventArgs,\n  ConversationUpdateReason,\n} from \"../conversation\";\nimport { SyncMap, SyncClient, SyncMapItem } from \"twilio-sync\";\nimport { Users } from \"./users\";\nimport { Network } from \"../services/network\";\nimport { TypingIndicator } from \"../services/typing-indicator\";\nimport { McsClient } from \"@twilio/mcs-client\";\nimport { Deferred } from \"../util/deferred\";\nimport {\n  Participant,\n  ParticipantUpdatedEventArgs,\n  ParticipantUpdateReason,\n} from \"../participant\";\nimport {\n  Message,\n  MessageUpdatedEventArgs,\n  MessageUpdateReason,\n} from \"../message\";\nimport { UriBuilder } from \"../util\";\nimport { Configuration } from \"../configuration\";\nimport { CommandExecutor } from \"../command-executor\";\nimport { CreateConversationRequest } from \"../interfaces/commands/create-conversation\";\nimport { ConversationResponse } from \"../interfaces/commands/conversation-response\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\nimport isEqual from \"lodash.isequal\";\nimport { ResponseMeta } from \"../interfaces/commands/response-meta\";\nimport SyncError from \"twilio-sync/src/utils/syncerror\";\nimport { ChannelMetadataClient } from \"../channel-metadata-client\";\n\ntype ConversationsEvents = {\n  conversationAdded: (conversation: Conversation) => void;\n  conversationJoined: (conversation: Conversation) => void;\n  conversationLeft: (conversation: Conversation) => void;\n  conversationRemoved: (conversation: Conversation) => void;\n  conversationUpdated: (data: {\n    conversation: Conversation;\n    updateReasons: ConversationUpdateReason[];\n  }) => void;\n  participantJoined: (participant: Participant) => void;\n  participantLeft: (participant: Participant) => void;\n  participantUpdated: (data: {\n    participant: Participant;\n    updateReasons: ParticipantUpdateReason[];\n  }) => void;\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n  typingEnded: (participant: Participant) => void;\n  typingStarted: (participant: Participant) => void;\n};\n\ntype ConversationsDataSource = \"sync\" | \"rest\";\n\ninterface ConversationsServices {\n  syncClient: SyncClient;\n  users: Users;\n  typingIndicator: TypingIndicator;\n  network: Network;\n  mcsClient: McsClient;\n  commandExecutor: CommandExecutor;\n  channelMetadataClient: ChannelMetadataClient;\n}\n\ntype ConversationRestData = {\n  roster: string;\n  notificationLevel: \"default\" | \"muted\";\n  lastConsumedMessageIndex: number;\n  channel: string;\n  messages: string;\n  descriptor: ConversationResponse;\n  channel_sid: string;\n  status: string;\n};\n\nconst log = Logger.scope(\"Conversations\");\n\n/**\n * Represents conversations collection\n * {@see Conversation}\n */\nclass Conversations extends ReplayEventEmitter<ConversationsEvents> {\n  public readonly conversations: Map<string, Conversation> = new Map();\n  public readonly myConversationsRead: Deferred<boolean> = new Deferred();\n  private readonly configuration: Configuration;\n  private readonly services: ConversationsServices;\n  private readonly tombstones: Set<string> = new Set();\n  private myConversationsFetched = false;\n\n  public constructor(\n    configuration: Configuration,\n    services: ConversationsServices\n  ) {\n    super();\n\n    this.configuration = configuration;\n    this.services = services;\n  }\n\n  public async addConversation(options): Promise<Conversation> {\n    const attributes =\n      typeof options?.attributes !== \"undefined\" ? options.attributes : {};\n\n    const response = await this.services.commandExecutor.mutateResource<\n      CreateConversationRequest,\n      ConversationResponse\n    >(\"post\", this.configuration.links.conversations, {\n      friendly_name: options.friendlyName,\n      unique_name: options.uniqueName,\n      attributes:\n        typeof attributes !== \"undefined\"\n          ? JSON.stringify(attributes)\n          : undefined,\n    });\n\n    const conversationSid = response.sid ?? null;\n    const conversationDocument = response.sync_objects?.conversation ?? null;\n    const links = {\n      self: response.url,\n      ...response.links,\n    };\n    const existingConversation = this.conversations.get(conversationSid);\n\n    if (existingConversation) {\n      await existingConversation._subscribe();\n      return existingConversation;\n    }\n\n    const conversation = new Conversation(\n      {\n        channel: conversationDocument,\n        entityName: \"\",\n        uniqueName: \"\",\n        attributes: null,\n        createdBy: \"\",\n        friendlyName: \"\",\n        lastConsumedMessageIndex: 0,\n        dateCreated: null,\n        dateUpdated: null,\n      },\n      conversationSid,\n      links,\n      this.configuration,\n      this.services\n    );\n\n    this.conversations.set(conversation.sid, conversation);\n    this._registerForEvents(conversation);\n\n    await conversation._subscribe();\n    this.emit(\"conversationAdded\", conversation);\n\n    return conversation;\n  }\n\n  /**\n   * Fetch conversations list and instantiate all necessary objects\n   */\n  public async fetchConversations(): Promise<Conversations> {\n    try {\n      const map = await this._getMap();\n\n      map.on(\"itemAdded\", (args) => {\n        log.debug(`itemAdded: ${args.item.key}`);\n\n        this._upsertConversation(\"sync\", args.item.key, args.item.data);\n      });\n\n      map.on(\"itemRemoved\", (args) => {\n        log.debug(`itemRemoved: ${args.key}`);\n\n        const sid = args.key;\n\n        if (!this.myConversationsFetched) {\n          this.tombstones.add(sid);\n        }\n\n        const conversation = this.conversations.get(sid);\n\n        if (!conversation) {\n          return;\n        }\n\n        if (conversation.status === \"joined\") {\n          conversation._setStatus(\"notParticipating\", \"sync\");\n          this.emit(\"conversationLeft\", conversation);\n        }\n\n        this.conversations.delete(sid);\n        this.emit(\"conversationRemoved\", conversation);\n        conversation.emit(\"removed\", conversation);\n      });\n\n      map.on(\"itemUpdated\", (args) => {\n        log.debug(`itemUpdated: ${args.item.key}`);\n\n        this._upsertConversation(\"sync\", args.item.key, args.item.data);\n      });\n\n      const myConversations: ConversationRestData[] =\n        await this._fetchMyConversations();\n      const upserts: Promise<Conversation | null>[] = [];\n\n      for (const conversation of myConversations) {\n        upserts.push(\n          this._upsertConversation(\n            \"rest\",\n            conversation[\"channel_sid\"],\n            conversation\n          )\n        );\n      }\n\n      this.myConversationsRead.set(true);\n\n      await Promise.all(upserts);\n\n      this.myConversationsFetched = true;\n      this.tombstones.clear();\n\n      log.debug(\"The conversations list has been successfully fetched\");\n\n      return this;\n    } catch (error) {\n      const errorMessage = \"Failed to fetch the conversations list\";\n\n      if (this.services.syncClient.connectionState !== \"disconnected\") {\n        log.error(errorMessage, error);\n      }\n\n      log.debug(`ERROR: ${errorMessage}`, error);\n\n      throw error;\n    }\n  }\n\n  public async getConversations() {\n    const conversationsMap = await this._getMap();\n    const page = await conversationsMap.getItems();\n\n    return this._wrapPaginator(page, (items) =>\n      Promise.all(\n        items.map((item: SyncMapItem) =>\n          this._upsertConversation(\"sync\", item.key, item.data)\n        )\n      )\n    );\n  }\n\n  public async getConversation(\n    sid: string\n  ): Promise<Conversation | undefined | null> {\n    const conversationsMap = await this._getMap();\n    const page = await conversationsMap.getItems({ key: sid });\n    const items = page.items.map((item: SyncMapItem) =>\n      this._upsertConversation(\"sync\", item.key, item.data)\n    );\n\n    return items.length > 0 ? items[0] : null;\n  }\n\n  public async getConversationByUniqueName(\n    uniqueName: string\n  ): Promise<Conversation | null> {\n    const url = new UriBuilder(this.configuration.links.myConversations)\n      .path(uniqueName)\n      .build();\n    const response = await this.services.network.get<ConversationResponse>(url);\n    const body = response.body;\n\n    const sid = body.conversation_sid;\n    const data = {\n      entityName: null,\n      lastConsumedMessageIndex: body.last_read_message_index,\n      status: body?.status || \"unknown\",\n      friendlyName: body.friendly_name,\n      dateUpdated: body.date_updated,\n      dateCreated: body.date_created,\n      uniqueName: body.unique_name,\n      createdBy: body.created_by,\n      attributes: body.attributes,\n      channel: body.sync_objects.conversation,\n      notificationLevel: body?.notification_level,\n      sid,\n    };\n\n    return sid ? this._upsertConversation(\"sync\", sid, data) : null;\n  }\n\n  public async peekConversation(sid: string): Promise<Conversation | null> {\n    const url = new UriBuilder(this.configuration.links.conversations)\n      .path(sid)\n      .build();\n    const response = await this.services.network.get<ConversationResponse>(url);\n    const body = response.body;\n\n    const data = {\n      entityName: null,\n      // lastConsumedMessageIndex: body.last_read_message_index,\n      status: body?.status || \"unknown\",\n      friendlyName: body.friendly_name,\n      dateUpdated: body.date_updated,\n      dateCreated: body.date_created,\n      uniqueName: body.unique_name,\n      createdBy: body.created_by,\n      attributes: body.attributes,\n      channel: `${sid}.channel`,\n      // notificationLevel: body?.notification_level,\n      sid,\n    };\n\n    return this._upsertConversation(\"sync\", sid, data);\n  }\n\n  private async _getMap(): Promise<SyncMap> {\n    return await this.services.syncClient.map({\n      id: this.configuration.myConversations,\n      mode: \"open_existing\",\n    });\n  }\n\n  private async _wrapPaginator(page, op) {\n    const items = await op(page.items);\n\n    return {\n      items: items.filter((item) => item !== null),\n      hasNextPage: page.hasNextPage,\n      hasPrevPage: page.hasPrevPage,\n      nextPage: () => page.nextPage().then((x) => this._wrapPaginator(x, op)),\n      prevPage: () => page.prevPage().then((x) => this._wrapPaginator(x, op)),\n    };\n  }\n\n  private async _updateConversation(\n    source: ConversationsDataSource,\n    conversation: Conversation,\n    data\n  ): Promise<void> {\n    const areSourcesDifferent =\n      conversation._statusSource !== undefined &&\n      source !== conversation._statusSource;\n    const isChannelSourceSync =\n      source !== \"rest\" || conversation._statusSource === \"sync\";\n\n    if (areSourcesDifferent && isChannelSourceSync && source !== \"sync\") {\n      log.trace(\n        \"upsertConversation: conversation is known from sync and came from REST, ignoring\",\n        {\n          sid: conversation.sid,\n          data: data.status,\n          conversation: conversation.status,\n        }\n      );\n\n      return;\n    }\n\n    if (data.status === \"joined\" && conversation.status !== \"joined\") {\n      conversation._setStatus(\"joined\", source);\n\n      const updateData: Partial<ConversationDescriptor> = {};\n\n      if (typeof data.notificationLevel !== \"undefined\") {\n        updateData.notificationLevel = data.notificationLevel;\n      }\n\n      if (typeof data.lastConsumedMessageIndex !== \"undefined\") {\n        updateData.lastConsumedMessageIndex = data.lastConsumedMessageIndex;\n      }\n\n      if (!isEqual(updateData, {})) {\n        conversation._update(updateData);\n      }\n\n      await conversation._subscribe();\n      this.emit(\"conversationJoined\", conversation);\n\n      return;\n    }\n\n    if (\n      data.status === \"notParticipating\" &&\n      conversation.status === \"joined\"\n    ) {\n      conversation._setStatus(\"notParticipating\", source);\n      conversation._update(data);\n\n      await conversation._subscribe();\n      this.emit(\"conversationLeft\", conversation);\n\n      return;\n    }\n\n    if (data.status === \"notParticipating\") {\n      await conversation._subscribe();\n\n      return;\n    }\n\n    conversation._update(data);\n  }\n\n  private async _upsertConversation(\n    source: ConversationsDataSource,\n    sid: string,\n    data\n  ): Promise<Conversation | null> {\n    log.trace(`upsertConversation called for ${sid}`, data);\n\n    const conversation = this.conversations.get(sid);\n\n    // If the channel is known, update it\n    if (conversation) {\n      log.trace(\n        `upsertConversation: the conversation ${conversation.sid} is known;` +\n          `its status is known from the source ${conversation._statusSource} ` +\n          `and the update came from the source ${source}`,\n        conversation\n      );\n\n      await this._updateConversation(source, conversation, data);\n      await conversation._subscribe();\n\n      return conversation;\n    }\n\n    // If the conversations is deleted, ignore it\n    if (source === \"rest\" && this.tombstones.has(sid)) {\n      log.trace(\n        \"upsertChannel: the conversation is deleted but reappeared again from REST, ignoring\",\n        sid\n      );\n      return null;\n    }\n\n    // If the conversation is unknown, fetch it\n    log.trace(\n      \"upsertConversation: creating a local conversation object with sid \" +\n        sid,\n      data\n    );\n\n    const baseLink = `${this.configuration.links.conversations}/${sid}`;\n    const links = {\n      self: baseLink,\n      messages: `${baseLink}/Messages`,\n      participants: `${baseLink}/Participants`,\n    };\n    const newConversation = new Conversation(\n      data,\n      sid,\n      links,\n      this.configuration,\n      this.services\n    );\n\n    this.conversations.set(sid, newConversation);\n\n    try {\n      await newConversation._subscribe();\n\n      if (data.status === \"joined\") {\n        await newConversation._fetchStreams();\n      }\n    } catch (error) {\n      if (error.name !== \"SyncError\") {\n        throw error;\n      }\n\n      log.trace(\n        \"upsertChannel: the conversation is missing some Sync entity(ies), ignoring\",\n        sid,\n        error\n      );\n\n      this.conversations.delete(sid);\n      return null;\n    }\n\n    this._registerForEvents(newConversation);\n    this.emit(\"conversationAdded\", newConversation);\n\n    if (data.status === \"joined\") {\n      newConversation._setStatus(\"joined\", source);\n      this.emit(\"conversationJoined\", newConversation);\n    }\n\n    return newConversation;\n  }\n\n  private async _fetchMyConversations(): Promise<ConversationRestData[]> {\n    let conversations: ConversationRestData[] = [];\n    let pageToken: null | string = null;\n\n    do {\n      const url = new UriBuilder(this.configuration.links.myConversations);\n\n      if (pageToken) {\n        url.arg(\"PageToken\", pageToken);\n      }\n\n      const response = await this.services.network.get<\n        { conversations: ConversationResponse[] } & ResponseMeta\n      >(url.build());\n      const receivedConversations = response.body?.conversations.map(\n        (conversationDescriptor) => ({\n          descriptor: conversationDescriptor,\n          channel_sid: conversationDescriptor.conversation_sid,\n          status: conversationDescriptor.status,\n          channel: conversationDescriptor.sync_objects.conversation,\n          messages: conversationDescriptor.sync_objects.messages,\n          roster: `${conversationDescriptor.conversation_sid}.roster`,\n          lastConsumedMessageIndex:\n            conversationDescriptor.last_read_message_index,\n          notificationLevel: conversationDescriptor.notification_level,\n        })\n      );\n\n      pageToken = response.body.meta.next_token;\n      conversations = [...conversations, ...receivedConversations];\n    } while (pageToken);\n\n    return conversations;\n  }\n\n  private _onConversationRemoved(sid: string) {\n    const conversation = this.conversations.get(sid);\n\n    if (conversation) {\n      this.conversations.delete(sid);\n      this.emit(\"conversationRemoved\", conversation);\n    }\n  }\n\n  private _registerForEvents(conversation) {\n    conversation.on(\"removed\", () =>\n      this._onConversationRemoved(conversation.sid)\n    );\n    conversation.on(\"updated\", (args: ConversationUpdatedEventArgs) =>\n      this.emit(\"conversationUpdated\", args)\n    );\n    conversation.on(\"participantJoined\", (participant) =>\n      this.emit(\"participantJoined\", participant)\n    );\n    conversation.on(\"participantLeft\", (participant) =>\n      this.emit(\"participantLeft\", participant)\n    );\n    conversation.on(\"participantUpdated\", (args: ParticipantUpdatedEventArgs) =>\n      this.emit(\"participantUpdated\", args)\n    );\n    conversation.on(\"messageAdded\", (message) =>\n      this.emit(\"messageAdded\", message)\n    );\n    conversation.on(\"messageUpdated\", (args: MessageUpdatedEventArgs) =>\n      this.emit(\"messageUpdated\", args)\n    );\n    conversation.on(\"messageRemoved\", (message) =>\n      this.emit(\"messageRemoved\", message)\n    );\n    conversation.on(\"typingStarted\", (participant) =>\n      this.emit(\"typingStarted\", participant)\n    );\n    conversation.on(\"typingEnded\", (participant) =>\n      this.emit(\"typingEnded\", participant)\n    );\n  }\n}\n\nexport {\n  ConversationsServices,\n  ConversationsDataSource,\n  Conversation,\n  Conversations,\n};\n"],"names":["Logger","ReplayEventEmitter","Deferred","conversation","Conversation","UriBuilder","isEqual"],"mappings":"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"}