{"version":3,"file":"client.js","sources":["../src/client.ts"],"sourcesContent":["import { Logger } from \"./logger\";\nimport { Configuration } from \"./configuration\";\n\nimport { User, UserUpdatedEventArgs, UserUpdateReason } from \"./user\";\nimport { Network } from \"./services/network\";\n\nimport { NotificationTypes } from \"./interfaces/notification-types\";\n\nimport {\n  TwilsockClient,\n  InitRegistration,\n  ConnectionState as TwilsockConnectionState,\n  Transport,\n} from \"twilsock\";\nimport {\n  ChannelType,\n  Notifications as NotificationClient,\n} from \"@twilio/notifications\";\nimport { SyncClient } from \"twilio-sync\";\nimport { McsClient } from \"@twilio/mcs-client\";\n\nimport {\n  Conversation,\n  Conversations,\n  Conversations as ConversationsEntity,\n} from \"./data/conversations\";\n\nimport { Users } from \"./data/users\";\nimport { TypingIndicator } from \"./services/typing-indicator\";\nimport { Paginator } from \"./interfaces/paginator\";\nimport { PushNotification } from \"./push-notification\";\nimport { deepClone, parseToNumber } from \"./util\";\nimport {\n  Participant,\n  ParticipantUpdatedEventArgs,\n  ParticipantUpdateReason,\n} from \"./participant\";\nimport {\n  Message,\n  MessageUpdatedEventArgs,\n  MessageUpdateReason,\n} from \"./message\";\nimport { TelemetryEventDescription, TelemetryPoint } from \"twilsock\";\nimport {\n  validateTypesAsync,\n  validateTypes,\n  literal,\n  nonEmptyString,\n  pureObject,\n  objectSchema,\n  validateConstructorTypes,\n  nonEmptyArray,\n} from \"@twilio/declarative-type-validator\";\nimport { version as sdkVersion } from \"../package.json\";\nimport {\n  ConversationUpdatedEventArgs,\n  ConversationUpdateReason,\n} from \"./conversation\";\nimport { CommandExecutor } from \"./command-executor\";\nimport { ConfigurationResponse } from \"./interfaces/commands/configuration\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\nimport { JSONValue } from \"./types\";\nimport { Media } from \"./media\";\nimport { CancellablePromise } from \"@twilio/mcs-client\";\nimport { deprecated, deprecationWarning } from \"@twilio/deprecation-decorator\";\nimport { ContentTemplate } from \"./content-template\";\nimport { ContentClient } from \"./content-client\";\nimport { ChannelMetadataClient } from \"./channel-metadata-client\";\n\n/**\n * Client events.\n */\ntype ClientEvents = {\n  conversationAdded: (conversation: Conversation) => void;\n  conversationJoined: (conversation: Conversation) => void;\n  conversationLeft: (conversation: Conversation) => void;\n  conversationRemoved: (conversation: Conversation) => void;\n  conversationUpdated: (data: {\n    conversation: Conversation;\n    updateReasons: ConversationUpdateReason[];\n  }) => void;\n  participantJoined: (participant: Participant) => void;\n  participantLeft: (participant: Participant) => void;\n  participantUpdated: (data: {\n    participant: Participant;\n    updateReasons: ParticipantUpdateReason[];\n  }) => void;\n  messageAdded: (message: Message) => void;\n  messageRemoved: (message: Message) => void;\n  messageUpdated: (data: {\n    message: Message;\n    updateReasons: MessageUpdateReason[];\n  }) => void;\n  tokenAboutToExpire: () => void;\n  tokenExpired: () => void;\n  typingEnded: (participant: Participant) => void;\n  typingStarted: (participant: Participant) => void;\n  pushNotification: (pushNotification: PushNotification) => void;\n  userSubscribed: (user: User) => void;\n  userUnsubscribed: (user: User) => void;\n  userUpdated: (data: {\n    user: User;\n    updateReasons: UserUpdateReason[];\n  }) => void;\n  stateChanged: (state: State) => void;\n  initialized: () => void;\n  initFailed: ({ error }: { error?: ConnectionError }) => void;\n  connectionStateChanged: (state: TwilsockConnectionState) => void;\n  connectionError: (data: ConnectionError) => void;\n};\n\n/**\n * Connection state of the client. Possible values are as follows:\n * * `'connecting'` - client is offline and connection attempt is in process\n * * `'connected'` - client is online and ready\n * * `'disconnecting'` - client is going offline as disconnection is in process\n * * `'disconnected'` - client is offline and no connection attempt is in\n * process\n * * `'denied'` - client connection is denied because of invalid JWT access\n * token. User must refresh token in order to proceed\n */\ntype ConnectionState = TwilsockConnectionState;\n\n/**\n * State of the client. Possible values are as follows:\n * * `'failed'` - the client failed to initialize\n * * `'initialized'` - the client successfully initialized\n */\ntype State = \"failed\" | \"initialized\";\n\n/**\n * Notifications channel type. Possible values are as follows:\n * * `'fcm'`\n * * `'apn'`\n */\ntype NotificationsChannelType = ChannelType;\n\n/**\n * Level of logging.\n */\ntype LogLevel = \"trace\" | \"debug\" | \"info\" | \"warn\" | \"error\" | \"silent\";\n\n/**\n * Conversations client options.\n */\ninterface ClientOptions {\n  /**\n   * The level of logging to enable.\n   */\n  logLevel?: LogLevel;\n\n  /**\n   * The cache capacity for channel metadata.\n   */\n  channelMetadataCacheCapacity?: number;\n\n  region?: string;\n  productId?: string;\n  twilsockClient?: TwilsockClient;\n  transport?: Transport;\n  notificationsClient?: NotificationClient;\n  syncClient?: SyncClient;\n  typingIndicatorTimeoutOverride?: number;\n  consumptionReportIntervalOverride?: string;\n  httpCacheIntervalOverride?: string;\n  userInfosToSubscribeOverride?: number;\n  retryWhenThrottledOverride?: boolean;\n  backoffConfigOverride?: Record<string, unknown>;\n  Chat?: ClientOptions;\n  IPMessaging?: ClientOptions;\n  Sync?: Record<string, unknown>;\n  Notification?: Record<string, unknown>;\n  Twilsock?: Record<string, unknown>;\n  clientMetadata?: Record<string, unknown>;\n  initRegistrations?: InitRegistration[];\n  disableDeepClone?: boolean;\n  typingUri?: string;\n  apiUri?: string;\n}\n\ntype ConnectionError = {\n  terminal: boolean;\n  message: string;\n};\n\n/**\n * Options for {@link Client.createConversation}.\n */\ninterface CreateConversationOptions {\n  /**\n   * Any custom attributes to attach to the conversation.\n   */\n  attributes?: JSONValue;\n\n  /**\n   * A non-unique display name of the conversation.\n   */\n  friendlyName?: string;\n\n  /**\n   * A unique identifier of the conversation.\n   */\n  uniqueName?: string;\n}\n\n/**\n * Client services.\n */\nclass ClientServices {\n  commandExecutor!: CommandExecutor;\n  twilsockClient!: TwilsockClient;\n  users!: Users;\n  notificationClient!: NotificationClient;\n  network!: Network;\n  typingIndicator!: TypingIndicator;\n  syncClient!: SyncClient;\n  mcsClient!: McsClient;\n  transport!: Transport;\n  contentClient!: ContentClient;\n  channelMetadataClient!: ChannelMetadataClient;\n}\n\n/**\n * A client is the starting point to the Twilio Conversations functionality.\n */\n@validateConstructorTypes(nonEmptyString, [pureObject, \"undefined\"])\nclass Client extends ReplayEventEmitter<ClientEvents> {\n  /**\n   * Fired when a conversation becomes visible to the client. The event is also\n   * triggered when the client creates a new conversation.\n   * Fired for all conversations that the client has joined.\n   *\n   * Parameters:\n   * 1. {@link Conversation} `conversation` - the conversation in question\n   * @event\n   */\n  public static readonly conversationAdded = \"conversationAdded\";\n\n  /**\n   * Fired when the client joins a conversation.\n   *\n   * Parameters:\n   * 1. {@link Conversation} `conversation` - the conversation in question\n   * @event\n   */\n  public static readonly conversationJoined = \"conversationJoined\";\n\n  /**\n   * Fired when the client leaves a conversation.\n   *\n   * Parameters:\n   * 1. {@link Conversation} `conversation` - the conversation in question\n   * @event\n   */\n  public static readonly conversationLeft = \"conversationLeft\";\n\n  /**\n   * Fired when a conversation is no longer visible to the client.\n   *\n   * Parameters:\n   * 1. {@link Conversation} `conversation` - the conversation in question\n   * @event\n   */\n  public static readonly conversationRemoved = \"conversationRemoved\";\n\n  /**\n   * Fired when the attributes or the metadata of a conversation have been\n   * updated. During conversation's creation and initialization, this event\n   * might be fired multiple times for same joined or created conversation as\n   * new data is arriving from different sources.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the\n   * following properties:\n   *     * {@link Conversation} `conversation` - the conversation in question\n   *     * {@link ConversationUpdateReason}[] `updateReasons` - array of reasons\n   *     for the update\n   * @event\n   */\n  public static readonly conversationUpdated = \"conversationUpdated\";\n\n  /**\n   * Fired when a participant has joined a conversation.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - the participant in question\n   * @event\n   */\n  public static readonly participantJoined = \"participantJoined\";\n\n  /**\n   * Fired when a participant has left a conversation.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - the participant in question\n   * @event\n   */\n  public static readonly participantLeft = \"participantLeft\";\n\n  /**\n   * Fired when a participant's fields have been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the\n   * following properties:\n   *     * {@link Participant} `participant` - the participant in question\n   *     * {@link ParticipantUpdateReason}[] `updateReasons` - array of reasons\n   *     for the update\n   * @event\n   */\n  public static readonly participantUpdated = \"participantUpdated\";\n\n  /**\n   * Fired when a new message has been added to the conversation on the server.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - the message in question\n   * @event\n   */\n  public static readonly messageAdded = \"messageAdded\";\n\n  /**\n   * Fired when a message is removed from the message list of a conversation.\n   *\n   * Parameters:\n   * 1. {@link Message} `message` - the message in question\n   * @event\n   */\n  public static readonly messageRemoved = \"messageRemoved\";\n\n  /**\n   * Fired when the fields of an existing message are updated with new values.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the\n   * following properties:\n   *     * {@link Message} `message` - the message in question\n   *     * {@link MessageUpdateReason}[] `updateReasons` - array of reasons for\n   *     the update\n   * @event\n   */\n  public static readonly messageUpdated = \"messageUpdated\";\n\n  /**\n   * Fired when the token is about to expire and needs to be updated.\n   * @event\n   */\n  public static readonly tokenAboutToExpire = \"tokenAboutToExpire\";\n\n  /**\n   * Fired when the token has expired.\n   * @event\n   */\n  public static readonly tokenExpired = \"tokenExpired\";\n\n  /**\n   * Fired when a participant has stopped typing.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - the participant in question\n   * @event\n   */\n  public static readonly typingEnded = \"typingEnded\";\n\n  /**\n   * Fired when a participant has started typing.\n   *\n   * Parameters:\n   * 1. {@link Participant} `participant` - the participant in question\n   * @event\n   */\n  public static readonly typingStarted = \"typingStarted\";\n\n  /**\n   * Fired when the client has received (and parsed) a push notification via one\n   * of the push channels (apn or fcm).\n   *\n   * Parameters:\n   * 1. {@link PushNotification} `pushNotification` - the push notification in\n   * question\n   * @event\n   */\n  public static readonly pushNotification = \"pushNotification\";\n\n  /**\n   * Fired when the client has subscribed to a user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  public static readonly userSubscribed = \"userSubscribed\";\n\n  /**\n   * Fired when the client has unsubscribed from a user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  public static readonly userUnsubscribed = \"userUnsubscribed\";\n\n  /**\n   * Fired when the properties or the reachability status of a user have been\n   * updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the\n   * following properties:\n   *     * {@link User} `user` - the user in question\n   *     * {@link UserUpdateReason}[] `updateReasons` - array of reasons for the\n   *     update\n   * @event\n   */\n  public static readonly userUpdated = \"userUpdated\";\n\n  /**\n   * @deprecated Use initialized or initFailed events instead\n   * Fired when the state of the client has been changed.\n   *\n   * Parameters:\n   * 1. {@link State} `state` - the new client state\n   * @event\n   */\n  public static readonly stateChanged = \"stateChanged\";\n\n  /**\n   * Fired when the client has completed initialization successfully.\n   * @event\n   */\n  public static readonly initialized = \"initialized\";\n\n  /**\n   * Fired when the client initialization failed.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the\n   * following property:\n   *     * Error? `error` - the initialization error if present\n   * @event\n   */\n  public static readonly initFailed = \"initFailed\";\n\n  /**\n   * Fired when the connection state of the client has been changed.\n   *\n   * Parameters:\n   * 1. {@link ConnectionState} `state` - the new connection state\n   * @event\n   */\n  public static readonly connectionStateChanged = \"connectionStateChanged\";\n\n  /**\n   * Fired when the connection is interrupted for an unexpected reason.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the\n   * following properties:\n   *     * boolean `terminal` - Twilsock will stop connection attempts if true\n   *     * string `message` - the error message of the root cause\n   *     * number? `httpStatusCode` - http status code if available\n   *     * number? `errorCode` - Twilio public error code if available\n   * @event\n   */\n  public static readonly connectionError = \"connectionError\";\n\n  /**\n   * Current version of the Conversations client.\n   */\n  public static readonly version: string = sdkVersion;\n\n  /**\n   * Logger instance.\n   */\n  private static readonly _logger = Logger.scope(\"Client\");\n\n  /**\n   * Supported push notification channels.\n   */\n  private static readonly _supportedPushChannels: NotificationsChannelType[] = [\n    \"fcm\",\n    \"apn\",\n  ];\n\n  /**\n   * Supported push data fields.\n   */\n  private static readonly _supportedPushDataFields = {\n    conversation_sid: \"conversationSid\", // string\n    conversation_title: \"conversationTitle\", // string\n    message_sid: \"messageSid\", // string\n    message_index: \"messageIndex\", // integer\n    media_count: \"mediaCount\", // integer\n    media: \"media\", // object\n  };\n\n  /**\n   * Current version of the Conversations client.\n   */\n  public readonly version: string = sdkVersion;\n\n  /**\n   * Client connection state.\n   */\n  public connectionState: ConnectionState = \"unknown\";\n\n  /**\n   * Promise that resolves on successful initialization.\n   */\n  private readonly _ensureReady!: Promise<void>;\n\n  /**\n   * Options passed to the client.\n   */\n  private readonly _options: Partial<ClientOptions>;\n\n  /**\n   * Client service objects.\n   */\n  private readonly _services: ClientServices;\n\n  /**\n   * The user of the client.\n   */\n  private readonly _myself: User;\n\n  /**\n   * Resolves the {@link Client._ensureReady} promise.\n   */\n  private _resolveEnsureReady!: () => void;\n\n  /**\n   * Rejects the {@link Client._ensureReady} promise.\n   */\n  private _rejectEnsureReady!: (err?: ConnectionError) => void;\n\n  /**\n   * The current token of the client.\n   */\n  private _fpaToken: string;\n\n  /**\n   * The constructed configuration object.\n   */\n  private _configuration!: Configuration;\n\n  /**\n   * The Conversations entity.\n   */\n  private _conversationsEntity!: Conversations;\n\n  /**\n   * Promise that resolves when initial conversations are fetched.\n   */\n  private _conversationsPromise!: Promise<Conversations>;\n\n  /**\n   * Returned Conversations instance is not yet fully initialized. Calling any\n   * operations will block until it is. Use connection events to monitor when\n   * client becomes fully available (connectionStateChanged with state\n   * 'connected') or not available (connectionStateChange with state 'denied',\n   * event tokenExpired, event connectionError).\n   *\n   * @param fpaToken Access token\n   * @param options Options to customize the Client\n   * @returns A not yet fully-initialized client.\n   */\n  public constructor(fpaToken: string, options: ClientOptions | null = {}) {\n    super();\n\n    this._fpaToken = fpaToken ?? \"\";\n    this._options = options ?? {};\n\n    if (!this._options.disableDeepClone) {\n      let options: Partial<ClientOptions> = {\n        ...this._options,\n        transport: undefined,\n        twilsockClient: undefined,\n      };\n\n      options = deepClone(options);\n      options.transport = this._options.transport;\n      options.twilsockClient = this._options.twilsockClient;\n\n      this._options = options;\n    }\n\n    this._options.logLevel = this._options.logLevel ?? \"silent\";\n    Client._logger.setLevel(this._options.logLevel);\n\n    const productId = (this._options.productId = \"ip_messaging\");\n\n    // Filling ClientMetadata\n    this._options.clientMetadata = this._options.clientMetadata || {};\n\n    if (!this._options.clientMetadata.hasOwnProperty(\"type\")) {\n      this._options.clientMetadata.type = \"conversations\";\n    }\n\n    if (!this._options.clientMetadata.hasOwnProperty(\"sdk\")) {\n      this._options.clientMetadata.sdk = \"JS\";\n      this._options.clientMetadata.sdkv = sdkVersion;\n    }\n\n    // Enable session local storage for Sync\n    this._options.Sync = this._options.Sync || {};\n\n    if (typeof this._options.Sync.enableSessionStorage === \"undefined\") {\n      this._options.Sync.enableSessionStorage = true;\n    }\n\n    if (this._options.region) {\n      this._options.Sync.region = this._options.region;\n    }\n\n    if (!fpaToken) {\n      throw new Error(\"A valid Twilio token should be provided\");\n    }\n\n    this._services = new ClientServices();\n\n    this._myself = new User(\"\", \"\", null, this._services);\n\n    const startTwilsock = !this._options.twilsockClient;\n\n    // Create default init registrations if none were provided.\n    // Otherwise, the outside party have to list all the init registrations they\n    // need.\n    // Init registrations passed to the Conversations client will be passed down\n    // to the Sync client as well.\n    if (!this._options.initRegistrations) {\n      const initRegistration = new InitRegistration(productId);\n      Client.populateInitRegistrations(initRegistration);\n      this._options.initRegistrations = [initRegistration];\n    }\n\n    this._services.twilsockClient = this._options.twilsockClient =\n      this._options.twilsockClient ??\n      new TwilsockClient(fpaToken, productId, this._options);\n\n    this._services.twilsockClient.on(\"tokenAboutToExpire\", () =>\n      this.emit(\"tokenAboutToExpire\")\n    );\n    this._services.twilsockClient.on(\"tokenExpired\", () =>\n      this.emit(\"tokenExpired\")\n    );\n    this._services.twilsockClient.on(\"connectionError\", (error) =>\n      this.emit(\"connectionError\", error)\n    );\n    this._services.twilsockClient.on(\n      \"stateChanged\",\n      (state: ConnectionState) => {\n        Client._logger.debug(\n          `Handling stateChanged for ConversationsClient: new state ${state}`\n        );\n        if (state !== this.connectionState) {\n          this.connectionState = state;\n          this.emit(\"connectionStateChanged\", this.connectionState);\n        }\n      }\n    );\n\n    this._services.transport = this._options.transport = (this._options\n      .transport ?? this._options.twilsockClient) as Transport;\n    this._services.notificationClient = this._options.notificationsClient =\n      this._options.notificationsClient ??\n      new NotificationClient(fpaToken, this._options);\n    this._services.syncClient = this._options.syncClient =\n      this._options.syncClient ?? new SyncClient(fpaToken, this._options);\n\n    const configurationOptions =\n      options?.Chat || options?.IPMessaging || options || {};\n    const region = configurationOptions.region || options?.region;\n    const baseUrl: string =\n      configurationOptions.apiUri ||\n      configurationOptions.typingUri ||\n      `https://aim.${region || \"us1\"}.twilio.com`;\n\n    this._services.commandExecutor = new CommandExecutor(\n      baseUrl,\n      { transport: this._options.transport },\n      productId\n    );\n    this._services.contentClient = new ContentClient(this._services);\n\n    const emitFailed = (error?: ConnectionError): void => {\n      this._rejectEnsureReady(error);\n      this.emit(\"stateChanged\", \"failed\");\n      this.emit(\"initFailed\", { error });\n    };\n\n    const emitDisconnected = () => {\n      emitFailed({\n        terminal: true,\n        message: \"Twilsock has disconnected.\",\n      });\n    };\n\n    this._services.twilsockClient.once(\"connectionError\", emitFailed);\n    this._services.twilsockClient.once(\"disconnected\", emitDisconnected);\n    this._services.twilsockClient.once(\"connected\", async () => {\n      Client._logger.debug(`ConversationsClient started INITIALIZING`);\n      this._services.twilsockClient.off(\"connectionError\", emitFailed);\n      this._services.twilsockClient.off(\"disconnected\", emitDisconnected);\n      try {\n        const startupEvent = \"conversations.client.startup\";\n\n        this._services.twilsockClient.addPartialTelemetryEvent(\n          new TelemetryEventDescription(\n            startupEvent,\n            \"Conversations client startup\",\n            new Date()\n          ),\n          startupEvent,\n          TelemetryPoint.Start\n        );\n\n        await this._initialize();\n\n        this._services.twilsockClient.addPartialTelemetryEvent(\n          new TelemetryEventDescription(\"\", \"\", new Date()),\n          startupEvent,\n          TelemetryPoint.End\n        );\n      } catch (err) {\n        // Fail ChatClient if initialization is incomplete\n        const connectionError = {\n          terminal: true,\n          message: err.message,\n        };\n        this._rejectEnsureReady(connectionError);\n        this.emit(\"stateChanged\", \"failed\");\n        this.emit(\"initFailed\", {\n          error: connectionError,\n        });\n      }\n    });\n\n    this._ensureReady = new Promise<void>((resolve, reject) => {\n      this._resolveEnsureReady = resolve;\n      this._rejectEnsureReady = reject;\n    }).catch(() => void 0); // @todo How to process unhandled rejection here?\n\n    if (startTwilsock) {\n      this._services.twilsockClient.connect();\n    }\n  }\n\n  /**\n   * Information of the logged-in user. Before client initialization, returns an\n   * uninitialized user. Will trigger a {@link Client.userUpdated} event after\n   * initialization.\n   */\n  public get user(): User {\n    return this._myself;\n  }\n\n  /**\n   * Client reachability state. Throws an error if accessed before the client\n   * initialization was completed.\n   */\n  public get reachabilityEnabled(): boolean {\n    if (!this._configuration) {\n      throw new Error(\n        \"Reachability information could not yet be accessed as the client \" +\n          \"has not yet been initialized. Subscribe to the 'stateChanged' event \" +\n          \"to properly react to the client initialization.\"\n      );\n    }\n\n    return this._configuration.reachabilityEnabled;\n  }\n\n  /**\n   * @deprecated\n   * Current token.\n   * @internal\n   */\n  @deprecated(\"token\")\n  public get token(): string {\n    return this._fpaToken;\n  }\n\n  /**\n   * @deprecated Call constructor directly.\n   *\n   * Factory method to create a Conversations client instance.\n   *\n   * The factory method will automatically trigger connection.\n   * Do not use it if you need finer-grained control.\n   *\n   * Since this method returns an already-initialized client, some of the events\n   * will be lost because they happen *before* the initialization. It is\n   * recommended that `client.onWithReplay` is used as opposed to `client.on`\n   * for subscribing to client events. The `client.onWithReplay` will re-emit\n   * the most recent value for a given event if it emitted before the\n   * subscription.\n   *\n   * @param token Access token.\n   * @param options Options to customize the client.\n   * @returns Returns a fully initialized client.\n   */\n  @deprecated(\"Client.create()\", \"new Client()\")\n  @validateTypesAsync(\"string\", [\"undefined\", pureObject])\n  public static async create(\n    token: string,\n    options?: ClientOptions | null\n  ): Promise<Client> {\n    // The logic is as follows:\n    // - If twilsock is not passed in, then the ConversationsClient constructor will call twilsock.connect() by itself\n    //   and we do not need to do it here.\n    // - If twilsock was passed in from the outside, but customer called ConversationsClient.create() then they are\n    //   using an obsolete workflow and the startup sequence will never complete.\n    if (options?.twilsockClient) {\n      throw new Error(\n        \"Obsolete usage of ConversationsClient.create() \" +\n          \"factory method: if you pass twilsock from the outside then you must \" +\n          \"use ConversationsClient constructor and be prepared to work with \" +\n          \"uninitialized client.\"\n      );\n    }\n\n    const client = new Client(token, options);\n    await client._ensureReady;\n\n    return client;\n  }\n\n  /**\n   * Static method for push notification payload parsing. Returns parsed push as\n   * a {@link PushNotification} object.\n   * @param notificationPayload Push notification payload.\n   */\n  @validateTypes(pureObject)\n  public static parsePushNotification(notificationPayload): PushNotification {\n    Client._logger.debug(\n      \"parsePushNotification, notificationPayload=\",\n      notificationPayload\n    );\n\n    // APNS specifics\n    if (typeof notificationPayload.aps !== \"undefined\") {\n      if (!notificationPayload.twi_message_type) {\n        throw new Error(\n          \"Provided push notification payload does not contain Programmable Chat push notification type\"\n        );\n      }\n\n      const data = Client._parsePushNotificationChatData(notificationPayload);\n\n      const apsPayload = notificationPayload.aps;\n      let body: string | null;\n      let title: string | null = null;\n      if (typeof apsPayload.alert === \"string\") {\n        body = apsPayload.alert || null;\n      } else {\n        body = apsPayload.alert?.body || null;\n        title = apsPayload.alert?.title || null;\n      }\n\n      return new PushNotification({\n        title,\n        body,\n        sound: apsPayload.sound || null,\n        badge: apsPayload.badge || null,\n        action: apsPayload.category || null,\n        type: notificationPayload.twi_message_type,\n        data: data,\n      });\n    }\n\n    // FCM specifics\n    if (typeof notificationPayload.data !== \"undefined\") {\n      const dataPayload = notificationPayload.data;\n      if (!dataPayload.twi_message_type) {\n        throw new Error(\n          \"Provided push notification payload does not contain Programmable Chat push notification type\"\n        );\n      }\n\n      const data = Client._parsePushNotificationChatData(\n        notificationPayload.data\n      );\n      return new PushNotification({\n        title: dataPayload.twi_title || null,\n        body: dataPayload.twi_body || null,\n        sound: dataPayload.twi_sound || null,\n        badge: null,\n        action: dataPayload.twi_action || null,\n        type: dataPayload.twi_message_type,\n        data: data,\n      });\n    }\n\n    throw new Error(\n      \"Provided push notification payload is not Programmable Chat notification\"\n    );\n  }\n\n  /**\n   * Static method for parsing push notification chat data.\n   * @param data Data to parse\n   */\n  private static _parsePushNotificationChatData(\n    data: Record<string, unknown>\n  ): Record<string, unknown> {\n    const result: Record<string, unknown> = {};\n\n    for (const key in Client._supportedPushDataFields) {\n      const value = data[key];\n      if (typeof value === \"undefined\" || value === null) {\n        continue;\n      }\n\n      if (key === \"message_index\" || key === \"media_count\") {\n        const number = parseToNumber(value);\n        if (number !== null) {\n          result[Client._supportedPushDataFields[key]] = number;\n        }\n        continue;\n      }\n\n      if (key === \"media\") {\n        if (typeof value === \"string\") {\n          try {\n            result[Client._supportedPushDataFields[key]] = JSON.parse(value);\n          } catch {\n            Client._logger.debug(\"Media message notification parsing error\");\n          }\n        }\n        continue;\n      }\n\n      result[Client._supportedPushDataFields[key]] = value;\n    }\n\n    return result;\n  }\n\n  /**\n   * Populate the client with init registrations.\n   * @param reg The init registration to populate.\n   */\n  public static populateInitRegistrations(reg: InitRegistration) {\n    reg.populateInitRegistrations([NotificationTypes.TYPING_INDICATOR]);\n    SyncClient.populateInitRegistrations(reg);\n  }\n\n  /**\n   * Gracefully shut down the client.\n   */\n  public async shutdown(): Promise<void> {\n    await this._ensureReady;\n    await this._services.twilsockClient.disconnect();\n  }\n\n  /**\n   * Update the token used by the client and re-register with the Conversations services.\n   * @param token New access token.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async updateToken(token: string): Promise<Client> {\n    await this._ensureReady;\n    Client._logger.info(\"updateToken\");\n\n    if (this._fpaToken === token) {\n      return this;\n    }\n\n    await this._services.twilsockClient.updateToken(token);\n    await this._services.notificationClient.updateToken(token);\n    await this._services.mcsClient.updateToken(token);\n    this._fpaToken = token;\n\n    return this;\n  }\n\n  /**\n   * Get a known conversation by its SID.\n   * @param conversationSid Conversation sid\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getConversationBySid(\n    conversationSid: string\n  ): Promise<Conversation> {\n    await this._ensureReady;\n    await this._conversationsEntity.myConversationsRead.promise;\n\n    let conversation = await this._conversationsEntity.getConversation(\n      conversationSid\n    );\n\n    if (!conversation) {\n      conversation = await this.peekConversationBySid(conversationSid);\n      if (conversation) {\n        deprecationWarning(\n          \"The method getConversationBySid is deprecated to retrieve conversations you're not part of. Use peekConversationBySid instead.\"\n        );\n      }\n    }\n\n    if (!conversation) {\n      throw new Error(\n        `Conversation with SID ${conversationSid} was not found.`\n      );\n    }\n\n    return conversation;\n  }\n\n  /**\n   * Peek a conversation by its SID.\n   * @param conversationSid Conversation sid\n   * @internal\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async peekConversationBySid(\n    conversationSid: string\n  ): Promise<Conversation> {\n    await this._ensureReady;\n\n    const conversation = await this._conversationsEntity.peekConversation(\n      conversationSid\n    );\n\n    if (!conversation) {\n      throw new Error(\n        `Conversation with SID ${conversationSid} was not found.`\n      );\n    }\n\n    return conversation;\n  }\n\n  /**\n   * Get a known conversation by its unique identifier name.\n   * @param uniqueName The unique identifier name of the conversation.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getConversationByUniqueName(\n    uniqueName: string\n  ): Promise<Conversation> {\n    await this._ensureReady;\n    await this._conversationsEntity.myConversationsRead.promise;\n    const conversation =\n      await this._conversationsEntity.getConversationByUniqueName(uniqueName);\n\n    if (!conversation) {\n      throw new Error(\n        `Conversation with unique name ${uniqueName} was not found.`\n      );\n    }\n\n    return conversation;\n  }\n\n  /**\n   * Get the current list of all the subscribed conversations.\n   */\n  public async getSubscribedConversations(): Promise<Paginator<Conversation>> {\n    await this._ensureReady;\n    return this._conversationsPromise.then((conversations) =>\n      conversations.getConversations()\n    );\n  }\n\n  /**\n   * Create a conversation on the server and subscribe to its events.\n   * The default is a conversation with an empty friendly name.\n   * @param options Options for the conversation.\n   */\n  @validateTypesAsync([\n    \"undefined\",\n    objectSchema(\"conversation options\", {\n      friendlyName: [\"string\", \"undefined\"],\n      isPrivate: [\"boolean\", \"undefined\"],\n      uniqueName: [\"string\", \"undefined\"],\n    }),\n  ])\n  public async createConversation(\n    options?: CreateConversationOptions\n  ): Promise<Conversation> {\n    await this._ensureReady;\n    options = options || {};\n    return this._conversationsPromise.then((conversationsEntity) =>\n      conversationsEntity.addConversation(options)\n    );\n  }\n\n  /**\n   * Register for push notifications.\n   * @param channelType Channel type.\n   * @param registrationId Push notification ID provided by the FCM/APNS service\n   * on the platform.\n   */\n  @validateTypesAsync(literal(\"fcm\", \"apn\"), \"string\")\n  public async setPushRegistrationId(\n    channelType: NotificationsChannelType,\n    registrationId: string\n  ): Promise<void> {\n    await this._ensureReady;\n    this._subscribeToPushNotifications(channelType);\n    this._services.notificationClient.setPushRegistrationId(\n      channelType,\n      registrationId\n    );\n    await this._services.notificationClient.commitChanges(); // Committing before this point is useless because we have no push id\n  }\n\n  /**\n   * Unregister from push notifications.\n   * @param channelType Channel type.\n   * @deprecated Use removePushRegistrations() instead.\n   */\n  @validateTypesAsync(literal(\"fcm\", \"apn\"))\n  public async unsetPushRegistrationId(\n    channelType: NotificationsChannelType\n  ): Promise<void> {\n    await this._ensureReady;\n    this._unsubscribeFromPushNotifications(channelType);\n    await this._services.notificationClient.commitChanges();\n  }\n\n  /**\n   * Clear existing registrations directly using provided device token.\n   * This is useful to ensure stopped subscriptions without resubscribing.\n   *\n   * This function goes completely beside the state machine and removes all\n   * registrations.\n   * Use with caution: if it races with current state machine operations,\n   * madness will ensue.\n   *\n   * @param channelType Channel type.\n   * @param registrationId Push notification ID provided by the FCM/APNS service\n   * on the platform.\n   */\n  @validateTypesAsync(literal(\"fcm\", \"apn\"), nonEmptyString)\n  public async removePushRegistrations(\n    channelType: ChannelType,\n    registrationId: string\n  ): Promise<void> {\n    // do not await this._ensureReady() here - it could be called at any moment\n    await this._services.notificationClient.removeRegistrations(\n      channelType,\n      registrationId\n    );\n  }\n\n  /**\n   * Current version of the Conversations client.\n   */\n  public parsePushNotification = Client.parsePushNotification;\n\n  /**\n   * Handle push notification payload parsing and emit the\n   * {@link Client.pushNotification} event on this {@link Client} instance.\n   * @param notificationPayload Push notification payload\n   */\n  @validateTypesAsync(pureObject)\n  public async handlePushNotification(notificationPayload): Promise<void> {\n    await this._ensureReady;\n    Client._logger.debug(\n      \"handlePushNotification, notificationPayload=\",\n      notificationPayload\n    );\n    this.emit(\n      \"pushNotification\",\n      Client.parsePushNotification(notificationPayload)\n    );\n  }\n\n  /**\n   * Gets a user with the given identity. If it's in the subscribed list, then\n   * return the user object from it;\n   * if not, then subscribe and add user to the subscribed list.\n   * @param identity Identity of the user.\n   * @returns A fully initialized user.\n   */\n  @validateTypesAsync(nonEmptyString)\n  public async getUser(identity: string): Promise<User> {\n    await this._ensureReady;\n    return this._services.users.getUser(identity);\n  }\n\n  /**\n   * Get a list of subscribed user objects.\n   */\n  public async getSubscribedUsers(): Promise<Array<User>> {\n    await this._ensureReady;\n    return this._services.users.getSubscribedUsers();\n  }\n\n  /**\n   * Get content URLs for all media attachments in the given set of media sids\n   * using a single operation.\n   * @param mediaSids Set of media sids to query for the content URL.\n   */\n  @validateTypesAsync(nonEmptyArray(\"strings\", \"string\"))\n  public getTemporaryContentUrlsForMediaSids(\n    mediaSids: string[]\n  ): CancellablePromise<Map<string, string>> {\n    return new CancellablePromise(async (resolve, reject, onCancel) => {\n      if (!this._services.mcsClient || !mediaSids) {\n        reject(new Error(\"Media Content Service is unavailable\"));\n        return;\n      }\n\n      const request =\n        this._services.mcsClient.mediaSetGetContentUrls(mediaSids);\n\n      onCancel(() => {\n        request.cancel();\n      });\n\n      try {\n        const urls = await request;\n        resolve(urls);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Get content URLs for all media attachments in the given set using a single\n   * operation.\n   * @param contentSet Set of media attachments to query content URLs.\n   */\n  @validateTypesAsync(nonEmptyArray(\"media\", Media))\n  public getTemporaryContentUrlsForMedia(\n    contentSet: Media[]\n  ): CancellablePromise<Map<string, string>> {\n    // We ignore existing mcsMedia members of each of the media entries.\n    // Instead, we just collect their sids and pull new descriptors from a\n    // mediaSet GET endpoint.\n    const sids = contentSet.map((m) => m.sid);\n    return this.getTemporaryContentUrlsForMediaSids(sids);\n  }\n\n  /**\n   * Returns rich content templates belonging to the account. Rich content\n   * templates can be created via the Twilio console or the REST API.\n   */\n  public async getContentTemplates(): Promise<Readonly<ContentTemplate[]>> {\n    await this._ensureReady;\n    return await this._services.contentClient.getContentTemplates();\n  }\n\n  /**\n   * Initialize the client.\n   */\n  private async _initialize() {\n    const configurationResponse =\n      await this._services.commandExecutor.fetchResource<\n        void,\n        ConfigurationResponse\n      >(\"Client/v2/Configuration\");\n\n    this._configuration = new Configuration(\n      this._options as ClientOptions,\n      configurationResponse,\n      Client._logger\n    );\n\n    this._services.channelMetadataClient = new ChannelMetadataClient(\n      this._services,\n      this._configuration\n    );\n\n    this._myself._resolveInitialization(\n      this._configuration,\n      this._configuration.userIdentity,\n      this._configuration.userInfo,\n      true\n    );\n\n    this._services.typingIndicator = new TypingIndicator(\n      this.getConversationBySid.bind(this),\n      this._configuration,\n      this._services\n    );\n    this._services.network = new Network(this._configuration, this._services);\n\n    this._services.users = new Users(\n      this._myself,\n      this._configuration,\n      this._services\n    );\n    this._services.users.on(\"userSubscribed\", (user) => {\n      this.emit(\"userSubscribed\", user);\n    });\n    this._services.users.on(\"userUpdated\", (args: UserUpdatedEventArgs) =>\n      this.emit(\"userUpdated\", args)\n    );\n    this._services.users.on(\"userUnsubscribed\", (user) => {\n      this.emit(\"userUnsubscribed\", user);\n    });\n\n    this._conversationsEntity = new ConversationsEntity(\n      this._configuration,\n      this._services\n    );\n\n    this._conversationsEntity.on(\"conversationAdded\", (conversation) => {\n      this.emit(\"conversationAdded\", conversation);\n    });\n    this._conversationsEntity.on(\"conversationRemoved\", (conversation) => {\n      this.emit(\"conversationRemoved\", conversation);\n    });\n    this._conversationsEntity.on(\"conversationJoined\", (conversation) => {\n      this.emit(\"conversationJoined\", conversation);\n    });\n    this._conversationsEntity.on(\"conversationLeft\", (conversation) => {\n      this.emit(\"conversationLeft\", conversation);\n    });\n    this._conversationsEntity.on(\n      \"conversationUpdated\",\n      (args: ConversationUpdatedEventArgs) =>\n        this.emit(\"conversationUpdated\", args)\n    );\n\n    this._conversationsEntity.on(\"participantJoined\", (participant) => {\n      this.emit(\"participantJoined\", participant);\n    });\n    this._conversationsEntity.on(\"participantLeft\", (participant) => {\n      this.emit(\"participantLeft\", participant);\n    });\n    this._conversationsEntity.on(\n      \"participantUpdated\",\n      (args: ParticipantUpdatedEventArgs) =>\n        this.emit(\"participantUpdated\", args)\n    );\n\n    this._conversationsEntity.on(\"messageAdded\", (message) =>\n      this.emit(\"messageAdded\", message)\n    );\n    this._conversationsEntity.on(\n      \"messageUpdated\",\n      (args: MessageUpdatedEventArgs) => this.emit(\"messageUpdated\", args)\n    );\n    this._conversationsEntity.on(\"messageRemoved\", (message) =>\n      this.emit(\"messageRemoved\", message)\n    );\n\n    this._conversationsEntity.on(\"typingStarted\", (participant) =>\n      this.emit(\"typingStarted\", participant)\n    );\n    this._conversationsEntity.on(\"typingEnded\", (participant) =>\n      this.emit(\"typingEnded\", participant)\n    );\n\n    this._conversationsPromise = this._conversationsEntity\n      .fetchConversations()\n      .then(() => this._conversationsEntity)\n      .catch((error) => {\n        throw error;\n      });\n\n    await this._services.users.myself._ensureFetched();\n\n    Client._supportedPushChannels.forEach((channelType) =>\n      this._subscribeToPushNotifications(channelType)\n    );\n    this._services.typingIndicator.initialize();\n\n    this._services.mcsClient = new McsClient(\n      this._fpaToken,\n      this._configuration.links.mediaService,\n      this._configuration.links.mediaSetService,\n      {\n        ...this._options,\n        transport: undefined,\n      }\n    );\n\n    this._resolveEnsureReady();\n    this.emit(\"stateChanged\", \"initialized\");\n    this.emit(\"initialized\");\n  }\n\n  /**\n   * Subscribe to push notifications.\n   * @param channelType The channel type to subscribe to.\n   */\n  private _subscribeToPushNotifications(channelType: NotificationsChannelType) {\n    [\n      NotificationTypes.NEW_MESSAGE,\n      NotificationTypes.ADDED_TO_CONVERSATION,\n      NotificationTypes.REMOVED_FROM_CONVERSATION,\n      NotificationTypes.TYPING_INDICATOR,\n      NotificationTypes.CONSUMPTION_UPDATE,\n    ].forEach((messageType) => {\n      this._services.notificationClient.subscribe(channelType, messageType);\n    });\n  }\n\n  /**\n   * Unsubscribe from push notifications.\n   * @param channelType The channel type to unsubscribe from.\n   */\n  private _unsubscribeFromPushNotifications(\n    channelType: NotificationsChannelType\n  ) {\n    [\n      NotificationTypes.NEW_MESSAGE,\n      NotificationTypes.ADDED_TO_CONVERSATION,\n      NotificationTypes.REMOVED_FROM_CONVERSATION,\n      NotificationTypes.TYPING_INDICATOR,\n      NotificationTypes.CONSUMPTION_UPDATE,\n    ].forEach((messageType) => {\n      this._services.notificationClient.unsubscribe(channelType, messageType);\n    });\n  }\n}\n\nexport {\n  Client,\n  State,\n  ConnectionState,\n  NotificationsChannelType,\n  LogLevel,\n  ClientOptions,\n  CreateConversationOptions,\n};\n"],"names":["Client","ReplayEventEmitter","sdkVersion","deepClone","User","InitRegistration","TwilsockClient","NotificationClient","SyncClient","CommandExecutor","ContentClient","TelemetryEventDescription","TelemetryPoint","PushNotification","parseToNumber","NotificationTypes","deprecationWarning","CancellablePromise","Configuration","ChannelMetadataClient","TypingIndicator","Network","Users","ConversationsEntity","McsClient","Logger","__decorate","deprecated","validateTypesAsync","nonEmptyString","objectSchema","literal","pureObject","nonEmptyArray","Media","validateTypes","validateConstructorTypes"],"mappings":"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"}