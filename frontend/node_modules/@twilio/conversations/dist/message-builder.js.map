{"version":3,"file":"message-builder.js","sources":["../src/message-builder.ts"],"sourcesContent":["import { CancellablePromise } from \"@twilio/mcs-client\";\nimport { ConversationLimits } from \"./interfaces/conversation-limits\";\nimport { SendMediaOptions } from \"./conversation\";\nimport { UnsentMessage } from \"./unsent-message\";\nimport { JSONValue } from \"./types\";\nimport { Messages } from \"./data/messages\";\nimport { ContentTemplateVariable } from \"./content-template\";\nimport { array, validateTypes } from \"@twilio/declarative-type-validator\";\nimport { json, sendMediaOptions } from \"./interfaces/rules\";\n\n/**\n * Message builder. Allows the message to be built and sent via method chaining.\n *\n * Example:\n *\n * ```ts\n * await testConversation.prepareMessage()\n *   .setBody('Hello!')\n *   .setAttributes({foo: 'bar'})\n *   .addMedia(media1)\n *   .addMedia(media2)\n *   .build()\n *   .send();\n * ```\n */\nclass MessageBuilder {\n  private readonly message: UnsentMessage;\n  private emailBodies: Map<string, FormData | SendMediaOptions>;\n  private emailHistories: Map<string, FormData | SendMediaOptions>;\n\n  /**\n   * @internal\n   */\n  constructor(\n    private readonly limits: ConversationLimits,\n    messagesEntity: Messages\n  ) {\n    this.message = new UnsentMessage(messagesEntity);\n    this.emailBodies = new Map<string, FormData | SendMediaOptions>();\n    this.emailHistories = new Map<string, FormData | SendMediaOptions>();\n  }\n\n  /**\n   * Sets the message body.\n   * @param text Contents of the body.\n   */\n  @validateTypes(\"string\")\n  setBody(text: string): MessageBuilder {\n    this.message.text = text;\n    return this;\n  }\n\n  /**\n   * Sets the message subject.\n   * @param subject Contents of the subject.\n   */\n  @validateTypes(\"string\")\n  setSubject(subject: string): MessageBuilder {\n    this.message.emailOptions.subject = subject;\n    return this;\n  }\n\n  /**\n   * Sets the message attributes.\n   * @param attributes Message attributes.\n   */\n  @validateTypes(json)\n  setAttributes(attributes: JSONValue): MessageBuilder {\n    this.message.attributes = attributes;\n    return this;\n  }\n\n  /**\n   * Set the email body with a given content type.\n   * @param contentType Format of the body to set (text/plain or text/html).\n   * @param body Body payload in the selected format.\n   */\n  @validateTypes(\"string\", [FormData, sendMediaOptions])\n  setEmailBody(\n    contentType: string,\n    body: FormData | SendMediaOptions\n  ): MessageBuilder {\n    this.emailBodies.set(contentType, body);\n    return this;\n  }\n\n  /**\n   * Set the email history with a given content type.\n   * @param contentType Format of the history to set (text/plain or text/html).\n   * @param history History payload in the selected format.\n   */\n  @validateTypes(\"string\", [FormData, sendMediaOptions])\n  setEmailHistory(\n    contentType: string,\n    history: FormData | SendMediaOptions\n  ): MessageBuilder {\n    this.emailHistories.set(contentType, history);\n    return this;\n  }\n\n  /**\n   * Adds {@link ContentTemplate} SID for the message alongside optional\n   * variables. When no variables provided, the default values will be used.\n   *\n   * Adding the content SID converts the message to a rich message. In this\n   * case, other fields are ignored and the message is sent using the content\n   * from the the {@link ContentTemplate}.\n   *\n   * Use {@link Client.getContentTemplates} to request all available\n   * {@link ContentTemplate}s.\n   *\n   * @param contentSid SID of the {@link ContentTemplate}\n   * @param variables Custom variables to resolve the template.\n   */\n  @validateTypes(\"string\", [\n    array(\"content variables\", ContentTemplateVariable),\n    \"undefined\",\n  ])\n  setContentTemplate(\n    contentSid: string,\n    contentVariables: ContentTemplateVariable[] = []\n  ): MessageBuilder {\n    this.message.contentSid = contentSid;\n    this.message.contentVariables = contentVariables;\n    return this;\n  }\n\n  /**\n   * Adds media to the message.\n   * @param payload Media to add.\n   */\n  @validateTypes([FormData, sendMediaOptions])\n  addMedia(payload: FormData | SendMediaOptions): MessageBuilder {\n    if (typeof FormData === \"undefined\" && payload instanceof FormData) {\n      throw new Error(\"Could not add FormData content whilst not in a browser\");\n    }\n    if (!(payload instanceof FormData)) {\n      const mediaOptions = payload as SendMediaOptions;\n      if (!mediaOptions.contentType || !mediaOptions.media) {\n        throw new Error(\n          \"Media content in SendMediaOptions must contain non-empty contentType and media\"\n        );\n      }\n    }\n    this.message.mediaContent.push([\"media\", payload]);\n    return this;\n  }\n\n  /**\n   * Builds the message, making it ready to be sent.\n   */\n  build(): UnsentMessage {\n    this.emailBodies.forEach((_, key) => {\n      if (!this.limits.emailBodiesAllowedContentTypes.includes(key)) {\n        throw new Error(`Unsupported email body content type ${key}`);\n      }\n    });\n    this.emailHistories.forEach((_, key) => {\n      if (!this.limits.emailHistoriesAllowedContentTypes.includes(key)) {\n        throw new Error(`Unsupported email history content type ${key}`);\n      }\n    });\n    if (\n      this.emailBodies.size > this.limits.emailBodiesAllowedContentTypes.length\n    ) {\n      throw new Error(\n        `Too many email bodies attached to the message (${this.emailBodies.size} > ${this.limits.emailBodiesAllowedContentTypes.length})`\n      );\n    }\n    if (\n      this.emailHistories.size >\n      this.limits.emailHistoriesAllowedContentTypes.length\n    ) {\n      throw new Error(\n        `Too many email histories attached to the message (${this.emailHistories.size} > ${this.limits.emailHistoriesAllowedContentTypes.length})`\n      );\n    }\n\n    if (\n      this.message.mediaContent.length > this.limits.mediaAttachmentsCountLimit\n    ) {\n      throw new Error(\n        `Too many media attachments in the message (${this.message.mediaContent.length} > ${this.limits.mediaAttachmentsCountLimit})`\n      );\n    }\n\n    // @todo we don't know the sizes of the attachments in FormData\n    // @todo insertion below makes build() method non-repeatable - probably move to UnsentMessage.send() or even sendV2()?\n\n    this.emailBodies.forEach((body) => {\n      this.message.mediaContent.push([\"body\", body]);\n    });\n\n    this.emailHistories.forEach((history) => {\n      this.message.mediaContent.push([\"history\", history]);\n    });\n\n    return this.message;\n  }\n\n  /**\n   * Prepares a message and sends it to the conversation.\n   */\n  buildAndSend(): CancellablePromise<number | null> {\n    return this.build().send();\n  }\n}\n\nexport { MessageBuilder };\n"],"names":["UnsentMessage","__decorate","validateTypes","json","sendMediaOptions","array","ContentTemplateVariable"],"mappings":"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"}