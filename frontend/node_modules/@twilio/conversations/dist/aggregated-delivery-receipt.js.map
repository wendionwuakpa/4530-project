{"version":3,"file":"aggregated-delivery-receipt.js","sources":["../src/aggregated-delivery-receipt.ts"],"sourcesContent":["/**\n * Signifies the amount of participants which have the status for the message.\n */\ntype DeliveryAmount = \"none\" | \"some\" | \"all\";\n\ninterface AggregatedDeliveryDescriptor {\n  total: number;\n  delivered: DeliveryAmount;\n  failed: DeliveryAmount;\n  read: DeliveryAmount;\n  sent: DeliveryAmount;\n  undelivered: DeliveryAmount;\n}\n\n/**\n * Contains aggregated information about delivery statuses of a message across all participants\n * of a conversation.\n *\n * At any moment during the message delivery to a participant, the message can have zero or more of the following\n * delivery statuses:\n * * Message is considered as **sent** to a participant if the nearest upstream carrier accepted the message.\n * * Message is considered as **delivered** to a participant if Twilio has received confirmation of message\n * delivery from the upstream carrier, and, where available, the destination handset.\n * * Message considered as **undelivered** to a participant if Twilio has received a delivery receipt\n * indicating that the message was not delivered. This can happen for many reasons including carrier content\n * filtering and the availability of the destination handset.\n * * Message considered as **read** by a participant if the message has been delivered and opened by the\n * recipient in a conversation. The recipient must have enabled the read receipts.\n * * Message considered as **failed** to be delivered to a participant if the message could not be sent.\n * This can happen for various reasons including queue overflows, account suspensions and media\n * errors (in the case of MMS for instance).\n *\n * {@link AggregatedDeliveryReceipt} class contains an aggregated value {@link DeliveryAmount} for each delivery status.\n */\nclass AggregatedDeliveryReceipt {\n  private state: AggregatedDeliveryDescriptor;\n\n  /**\n   * @internal\n   */\n  constructor(data: AggregatedDeliveryDescriptor) {\n    this.state = data;\n  }\n\n  /**\n   * Maximum number of delivery events expected for the message.\n   */\n  public get total(): number {\n    return this.state.total;\n  }\n\n  /**\n   * Message is considered as **sent** to a participant if the nearest upstream carrier accepted the message.\n   *\n   * @return Amount of participants that have the **sent** delivery status for the message.\n   */\n  public get sent(): DeliveryAmount {\n    return this.state.sent;\n  }\n\n  /**\n   * Message is considered as **delivered** to a participant if Twilio has received confirmation of message\n   * delivery from the upstream carrier, and, where available, the destination handset.\n   *\n   * @return Amount of participants that have the **delivered** delivery status for the message.\n   */\n  public get delivered(): DeliveryAmount {\n    return this.state.delivered;\n  }\n\n  /**\n   * Message is considered as **read** by a participant, if the message has been delivered and opened by the\n   * recipient in a conversation. The recipient must have enabled the read receipts.\n   *\n   * @return Amount of participants that have the **read** delivery status for the message.\n   */\n  public get read(): DeliveryAmount {\n    return this.state.read;\n  }\n\n  /**\n   * Message is considered as **undelivered** to a participant if Twilio has received a delivery receipt\n   * indicating that the message was not delivered. This can happen for many reasons including carrier content\n   * filtering and the availability of the destination handset.\n   *\n   * @return Ammount of participants that have the **undelivered** delivery status for the message.\n   */\n  public get undelivered(): DeliveryAmount {\n    return this.state.undelivered;\n  }\n\n  /**\n   * Message is considered as **failed** to be delivered to a participant if the message could not be sent.\n   * This can happen for various reasons including queue overflows, account suspensions and media\n   * errors (in the case of MMS for instance). Twilio does not charge you for failed messages.\n   *\n   * @return Amount of participants that have the **failed** delivery status for the message.\n   */\n  public get failed(): DeliveryAmount {\n    return this.state.failed;\n  }\n\n  _update(data: AggregatedDeliveryDescriptor): void {\n    this.state = data;\n  }\n\n  _isEquals(data: AggregatedDeliveryDescriptor): boolean {\n    const isTotalSame = this.total === data.total;\n    const isSentSame = this.sent === data.sent;\n    const isDeliveredSame = this.delivered === data.delivered;\n    const isReadSame = this.read === data.read;\n    const isUndeliveredSame = this.undelivered === data.undelivered;\n    const isFailedSame = this.failed === data.failed;\n\n    return (\n      isTotalSame &&\n      isSentSame &&\n      isDeliveredSame &&\n      isReadSame &&\n      isUndeliveredSame &&\n      isFailedSame\n    );\n  }\n}\n\nexport {\n  AggregatedDeliveryReceipt,\n  AggregatedDeliveryDescriptor,\n  DeliveryAmount,\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;AAmBG;AACH,MAAM,yBAAyB,CAAA;AAG7B;;AAEG;AACH,IAAA,WAAA,CAAY,IAAkC,EAAA;AAC5C,QAAA,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;KACnB;AAED;;AAEG;AACH,IAAA,IAAW,KAAK,GAAA;AACd,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;KACzB;AAED;;;;AAIG;AACH,IAAA,IAAW,IAAI,GAAA;AACb,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;KACxB;AAED;;;;;AAKG;AACH,IAAA,IAAW,SAAS,GAAA;AAClB,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;KAC7B;AAED;;;;;AAKG;AACH,IAAA,IAAW,IAAI,GAAA;AACb,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;KACxB;AAED;;;;;;AAMG;AACH,IAAA,IAAW,WAAW,GAAA;AACpB,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;KAC/B;AAED;;;;;;AAMG;AACH,IAAA,IAAW,MAAM,GAAA;AACf,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;KAC1B;AAED,IAAA,OAAO,CAAC,IAAkC,EAAA;AACxC,QAAA,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;KACnB;AAED,IAAA,SAAS,CAAC,IAAkC,EAAA;QAC1C,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC;QAC9C,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC;QAC3C,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,SAAS,CAAC;QAC1D,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC;QAC3C,MAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,KAAK,IAAI,CAAC,WAAW,CAAC;QAChE,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC;AAEjD,QAAA,QACE,WAAW;YACX,UAAU;YACV,eAAe;YACf,UAAU;YACV,iBAAiB;AACjB,YAAA,YAAY,EACZ;KACH;AACF;;;;"}