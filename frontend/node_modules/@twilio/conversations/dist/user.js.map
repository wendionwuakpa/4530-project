{"version":3,"file":"user.js","sources":["../src/user.ts"],"sourcesContent":["import { Logger } from \"./logger\";\nimport { SyncClient } from \"twilio-sync\";\nimport { parseAttributes } from \"./util\";\nimport { validateTypesAsync } from \"@twilio/declarative-type-validator\";\nimport { json } from \"./interfaces/rules\";\nimport { Configuration } from \"./configuration\";\nimport { CommandExecutor } from \"./command-executor\";\nimport {\n  EditUserRequest,\n  EditUserResponse,\n} from \"./interfaces/commands/edit-user\";\nimport { ReplayEventEmitter } from \"@twilio/replay-event-emitter\";\nimport isEqual from \"lodash.isequal\";\nimport { JSONValue } from \"./types\";\n\ntype UserEvents = {\n  updated: (data: { user: User; updateReasons: UserUpdateReason[] }) => void;\n  userSubscribed: (user: User) => void;\n  userUnsubscribed: (user: User) => void;\n};\n\nconst log = Logger.scope(\"User\");\n\ninterface UserState {\n  identity: string;\n  entityName: string;\n  friendlyName: string | null;\n  attributes: JSONValue;\n  online: boolean | null;\n  notifiable: boolean | null;\n}\n\ninterface UpdateValue {\n  value: string;\n  notifiable: boolean | null;\n  online: boolean | null;\n}\n\ninterface UserServices {\n  syncClient: SyncClient;\n  commandExecutor: CommandExecutor;\n}\n\ninterface UserLinks {\n  self: string;\n}\n\ntype SubscriptionState = \"initializing\" | \"subscribed\" | \"unsubscribed\";\n\n/**\n * The reason for the `updated` event being emitted by a user.\n */\ntype UserUpdateReason =\n  | \"friendlyName\"\n  | \"attributes\"\n  | \"reachabilityOnline\"\n  | \"reachabilityNotifiable\";\n\ninterface UserUpdatedEventArgs {\n  user: User;\n  updateReasons: UserUpdateReason[];\n}\n\n/**\n * Extended user information.\n * Note that `isOnline` and `isNotifiable` properties are eligible\n * for use only if the reachability function is enabled.\n * You may check if it is enabled by reading the value of {@link Client.reachabilityEnabled}.\n */\nclass User extends ReplayEventEmitter<UserEvents> {\n  private links!: UserLinks;\n  private configuration!: Configuration;\n  private readonly services: UserServices;\n\n  private entity;\n  private state: UserState;\n  private promiseToFetch: Promise<User> | null = null;\n  private subscribed: SubscriptionState;\n\n  private _initializationPromise: Promise<void>;\n  private _resolveInitializationPromise;\n\n  /**\n   * @internal\n   */\n  constructor(\n    identity: string,\n    entityName: string,\n    configuration: Configuration | null,\n    services: UserServices\n  ) {\n    super();\n\n    this.services = services;\n\n    this.subscribed = \"initializing\";\n    this.setMaxListeners(0);\n\n    this.state = {\n      identity,\n      entityName,\n      friendlyName: null,\n      attributes: {},\n      online: null,\n      notifiable: null,\n    };\n\n    this._initializationPromise = new Promise((resolve) => {\n      this._resolveInitializationPromise = resolve;\n    });\n\n    if (configuration !== null) {\n      this._resolveInitialization(configuration, identity, entityName, false);\n    }\n  }\n\n  /**\n   * Fired when the properties or the reachability status of the message has been updated.\n   *\n   * Parameters:\n   * 1. object `data` - info object provided with the event. It has the following properties:\n   *     * {@link User} `user` - the user in question\n   *     * {@link UserUpdateReason}[] `updateReasons` - array of reasons for the update\n   * @event\n   */\n  public readonly updated = \"updated\";\n\n  /**\n   * Fired when the client has subscribed to the user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  public readonly userSubscribed = \"userSubscribed\";\n\n  /**\n   * Fired when the client has unsubscribed from the user.\n   *\n   * Parameters:\n   * 1. {@link User} `user` - the user in question\n   * @event\n   */\n  public readonly userUnsubscribed = \"userUnsubscribed\";\n\n  /**\n   * User identity.\n   */\n  public get identity(): string {\n    return this.state.identity;\n  }\n\n  public set identity(identity: string) {\n    this.state.identity = identity;\n  }\n\n  public set entityName(name: string) {\n    this.state.entityName = name;\n  }\n\n  /**\n   * Custom attributes of the user.\n   */\n  public get attributes() {\n    return this.state.attributes;\n  }\n\n  /**\n   * Friendly name of the user, null if not set.\n   */\n  public get friendlyName(): string | null {\n    return this.state.friendlyName;\n  }\n\n  /**\n   * Status of the real-time conversation connection of the user.\n   */\n  public get isOnline(): boolean | null {\n    return this.state.online;\n  }\n\n  /**\n   * User push notification registration status.\n   */\n  public get isNotifiable(): boolean | null {\n    return this.state.notifiable;\n  }\n\n  /**\n   * True if this user is receiving real-time status updates.\n   */\n  public get isSubscribed(): boolean {\n    return this.subscribed == \"subscribed\";\n  }\n\n  // Handles service updates\n  async _update(\n    key: string,\n    value: { value: string; notifiable: boolean | null; online: boolean | null }\n  ) {\n    await this._initializationPromise;\n\n    const updateReasons: UserUpdateReason[] = [];\n    log.debug(\"User for\", this.state.identity, \"updated:\", key, value);\n    switch (key) {\n      case \"friendlyName\":\n        if (this.state.friendlyName !== value.value) {\n          updateReasons.push(\"friendlyName\");\n          this.state.friendlyName = value.value;\n        }\n        break;\n      case \"attributes\":\n        const updateAttributes = parseAttributes(\n          value.value,\n          `Retrieved malformed attributes from the server for user: ${this.state.identity}`,\n          log\n        );\n        if (!isEqual(this.state.attributes, updateAttributes)) {\n          this.state.attributes = updateAttributes;\n          updateReasons.push(\"attributes\");\n        }\n        break;\n      case \"reachability\":\n        if (this.state.online !== value.online) {\n          this.state.online = value.online;\n          updateReasons.push(\"reachabilityOnline\");\n        }\n        if (this.state.notifiable !== value.notifiable) {\n          this.state.notifiable = value.notifiable;\n          updateReasons.push(\"reachabilityNotifiable\");\n        }\n        break;\n      default:\n        return;\n    }\n    if (updateReasons.length > 0) {\n      this.emit(\"updated\", { user: this, updateReasons: updateReasons });\n    }\n  }\n\n  // Fetch reachability info\n  private async _updateReachabilityInfo(map, update) {\n    await this._initializationPromise;\n\n    if (!this.configuration.reachabilityEnabled) {\n      return Promise.resolve();\n    }\n\n    return map\n      .get(\"reachability\")\n      .then(update)\n      .catch((err) => {\n        log.warn(\n          \"Failed to get reachability info for \",\n          this.state.identity,\n          err\n        );\n      });\n  }\n\n  // Fetch user\n  async _fetch(): Promise<User> {\n    await this._initializationPromise;\n\n    if (!this.state.entityName) {\n      return this;\n    }\n\n    this.promiseToFetch = this.services.syncClient\n      .map({\n        id: this.state.entityName,\n        mode: \"open_existing\",\n        includeItems: true,\n      })\n      .then((map) => {\n        this.entity = map;\n        map.on(\"itemUpdated\", (args) => {\n          log.debug(\n            this.state.entityName +\n              \" (\" +\n              this.state.identity +\n              \") itemUpdated: \" +\n              args.item.key\n          );\n          return this._update(args.item.key, args.item.data);\n        });\n        map.on(\"itemAdded\", (args) => {\n          log.debug(\n            this.state.entityName +\n              \" (\" +\n              this.state.identity +\n              \") itemAdded: \" +\n              args.item.key\n          );\n          return this._update(args.item.key, args.item.data);\n        });\n        return Promise.all([\n          map\n            .get(\"friendlyName\")\n            .then((item) => this._update(item.key, item.data as UpdateValue)),\n          map\n            .get(\"attributes\")\n            .then((item) => this._update(item.key, item.data as UpdateValue)),\n          this._updateReachabilityInfo(map, (item) =>\n            this._update(item.key, item.data)\n          ),\n        ]);\n      })\n      .then(() => {\n        log.debug(\"Fetched for\", this.identity);\n        this.subscribed = \"subscribed\";\n        this.emit(\"userSubscribed\", this);\n        return this;\n      })\n      .catch((err) => {\n        this.promiseToFetch = null;\n        throw err;\n      });\n    return this.promiseToFetch;\n  }\n\n  async _ensureFetched() {\n    await this._initializationPromise;\n    return this.promiseToFetch || this._fetch();\n  }\n\n  /**\n   * Edit user attributes.\n   * @param attributes New attributes.\n   */\n  @validateTypesAsync(json)\n  public async updateAttributes(attributes: JSONValue): Promise<User> {\n    await this._initializationPromise;\n\n    if (this.subscribed == \"unsubscribed\") {\n      throw new Error(\"Can't modify unsubscribed object\");\n    }\n\n    await this.services.commandExecutor.mutateResource<\n      EditUserRequest,\n      EditUserResponse\n    >(\"post\", this.links.self, {\n      attributes: JSON.stringify(attributes),\n    });\n\n    return this;\n  }\n\n  /**\n   * Update the friendly name of the user.\n   * @param friendlyName New friendly name.\n   */\n  @validateTypesAsync([\"string\"])\n  public async updateFriendlyName(friendlyName: string): Promise<User> {\n    await this._initializationPromise;\n\n    if (this.subscribed == \"unsubscribed\") {\n      throw new Error(\"Can't modify unsubscribed object\");\n    }\n\n    await this.services.commandExecutor.mutateResource<\n      EditUserRequest,\n      EditUserResponse\n    >(\"post\", this.links.self, {\n      friendly_name: friendlyName,\n    });\n\n    return this;\n  }\n\n  /**\n   * Remove the user from the subscription list.\n   * @return A promise of completion.\n   */\n  async unsubscribe(): Promise<void> {\n    await this._initializationPromise;\n\n    if (this.promiseToFetch) {\n      await this.promiseToFetch;\n      this.entity.close();\n      this.promiseToFetch = null;\n      this.subscribed = \"unsubscribed\";\n      this.emit(\"userUnsubscribed\", this);\n    }\n  }\n\n  public _resolveInitialization(\n    configuration: Configuration,\n    identity: string,\n    entityName: string,\n    emitUpdated: boolean\n  ): void {\n    this.configuration = configuration;\n    this.identity = identity;\n    this.entityName = entityName;\n    this.links = {\n      self: `${this.configuration.links.users}/${encodeURIComponent(\n        this.identity\n      )}`,\n    };\n    this._resolveInitializationPromise();\n\n    if (emitUpdated) {\n      this.emit(\"updated\", {\n        user: this,\n        updateReasons: [\n          \"friendlyName\",\n          \"attributes\",\n          \"reachabilityOnline\",\n          \"reachabilityNotifiable\",\n        ],\n      });\n    }\n  }\n}\n\nexport {\n  User,\n  UserServices,\n  SubscriptionState,\n  UserUpdateReason,\n  UserUpdatedEventArgs,\n};\n"],"names":["Logger","ReplayEventEmitter","parseAttributes","isEqual","__decorate","validateTypesAsync","json"],"mappings":"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"}