/*
@license
The following license applies to all parts of this software except as
documented below.

    Copyright (c) 2019, Twilio, inc.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

      1. Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.

      2. Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in
         the documentation and/or other materials provided with the
         distribution.

      3. Neither the name of Twilio nor the names of its contributors may
         be used to endorse or promote products derived from this software
         without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This software includes javascript-state-machine under the following license.

    Copyright (c) 2012, 2013, 2014, 2015, Jake Gordon and contributors

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

This software includes loglevel under the following license.

    Copyright (c) 2013 Tim Perry

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

This software includes q under the following license.

    Copyright 2009â€“2014 Kristopher Michael Kowal. All rights reserved.
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to
    deal in the Software without restriction, including without limitation the
    rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
    sell copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
    IN THE SOFTWARE.

This software includes platform.js under the following license.

    Copyright 2014 Benjamin Tan <https://d10.github.io/>
    Copyright 2011-2015 John-David Dalton <http://allyoucanleet.com/>

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/
'use strict';

var global =
  typeof global !== "undefined"
    ? global
    : typeof self !== "undefined"
    ? self
    : typeof window !== "undefined"
    ? window
    : {};

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('./node_modules/tslib/tslib.es6.js');
var index = require('./util/index.js');
var logger = require('./logger.js');
var rules = require('./interfaces/rules.js');
var declarativeTypeValidator = require('@twilio/declarative-type-validator');
var replayEventEmitter = require('@twilio/replay-event-emitter');
var isEqual = require('lodash.isequal');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var isEqual__default = /*#__PURE__*/_interopDefaultLegacy(isEqual);

const log = logger.Logger.scope("Participant");
/**
 * A participant represents a remote client in a conversation.
 */
class Participant extends replayEventEmitter.ReplayEventEmitter {
    /**
     * @internal
     */
    constructor(data, sid, conversation, links, services) {
        var _a, _b;
        super();
        this.conversation = conversation;
        this.links = links;
        this.services = services;
        this.state = {
            attributes: index.parseAttributes(data.attributes, "Retrieved malformed attributes from the server for participant: " +
                sid, log),
            dateCreated: data.dateCreated ? index.parseTime(data.dateCreated) : null,
            dateUpdated: data.dateCreated ? index.parseTime(data.dateUpdated) : null,
            sid: sid,
            typingTimeout: null,
            isTyping: false,
            identity: data.identity,
            roleSid: (_a = data.roleSid) !== null && _a !== void 0 ? _a : "",
            lastReadMessageIndex: Number.isInteger(data.lastConsumedMessageIndex)
                ? data.lastConsumedMessageIndex
                : null,
            lastReadTimestamp: data.lastConsumptionTimestamp
                ? index.parseTime(data.lastConsumptionTimestamp)
                : null,
            type: data.type || "chat",
            userInfo: data.userInfo,
            bindings: (_b = data.bindings) !== null && _b !== void 0 ? _b : {},
        };
        if (!data.identity && !data.type) {
            throw new Error("Received invalid Participant object from server: Missing identity or type of Participant.");
        }
    }
    /**
     * The server-assigned unique identifier for the participant.
     */
    get sid() {
        return this.state.sid;
    }
    /**
     * Custom attributes of the participant.
     */
    get attributes() {
        return this.state.attributes;
    }
    /**
     * Date this participant was created on.
     */
    get dateCreated() {
        return this.state.dateCreated;
    }
    /**
     * Date this participant was last updated on.
     */
    get dateUpdated() {
        return this.state.dateUpdated;
    }
    /**
     * Identity of the participant.
     */
    get identity() {
        return this.state.identity;
    }
    /**
     * Indicates whether the participant is currently typing.
     */
    get isTyping() {
        return this.state.isTyping;
    }
    /**
     * The index of the last read message by the participant.
     * Note that retrieving messages on a client endpoint does not mean that messages are read,
     * please consider reading about the [Read Horizon feature](https://www.twilio.com/docs/api/chat/guides/consumption-horizon)
     * to find out about the proper way to mark messages as read.
     */
    get lastReadMessageIndex() {
        return this.state.lastReadMessageIndex;
    }
    /**
     * Date of the most recent read horizon update.
     */
    get lastReadTimestamp() {
        return this.state.lastReadTimestamp;
    }
    get roleSid() {
        return this.state.roleSid;
    }
    /**
     * Type of the participant.
     */
    get type() {
        return this.state.type;
    }
    /**
     * Get the bindings mapping for the current participant.
     * Available binding depends on the participant type.
     * You could access it as `participant.bindings.sms?.address` or
     * using the type dynamically `participant.bindings[participant.type]`
     * just be aware that the binding information has different structure for
     * each participant type.
     * See also {ParticipantEmailBinding}, the only available currently binding descriptor.
     */
    get bindings() {
        var _a;
        return (_a = this.state.bindings) !== null && _a !== void 0 ? _a : {};
    }
    /**
     * Internal method used to start or reset the typing indicator timeout (with event emitting).
     * @internal
     */
    _startTyping(timeout) {
        if (this.state.typingTimeout) {
            clearTimeout(this.state.typingTimeout);
        }
        this.state.isTyping = true;
        this.emit("typingStarted", this);
        this.conversation.emit("typingStarted", this);
        this.state.typingTimeout = Number(setTimeout(() => this._endTyping(), timeout));
        return this;
    }
    /**
     * Internal method function used to stop the typing indicator timeout (with event emitting).
     * @internal
     */
    _endTyping() {
        if (!this.state.typingTimeout) {
            return;
        }
        this.state.isTyping = false;
        this.emit("typingEnded", this);
        this.conversation.emit("typingEnded", this);
        clearInterval(this.state.typingTimeout);
        this.state.typingTimeout = null;
    }
    /**
     * Internal method function used update local object's property roleSid with a new value.
     * @internal
     */
    _update(data) {
        const updateReasons = [];
        const updateAttributes = index.parseAttributes(data.attributes, "Retrieved malformed attributes from the server for participant: " +
            this.state.sid, log);
        if (data.attributes && !isEqual__default["default"](this.state.attributes, updateAttributes)) {
            this.state.attributes = updateAttributes;
            updateReasons.push("attributes");
        }
        const updatedDateUpdated = index.parseTime(data.dateUpdated);
        if (data.dateUpdated &&
            (updatedDateUpdated === null || updatedDateUpdated === void 0 ? void 0 : updatedDateUpdated.getTime()) !==
                (this.state.dateUpdated && this.state.dateUpdated.getTime())) {
            this.state.dateUpdated = updatedDateUpdated;
            updateReasons.push("dateUpdated");
        }
        const updatedDateCreated = index.parseTime(data.dateCreated);
        if (data.dateCreated &&
            (updatedDateCreated === null || updatedDateCreated === void 0 ? void 0 : updatedDateCreated.getTime()) !==
                (this.state.dateCreated && this.state.dateCreated.getTime())) {
            this.state.dateCreated = updatedDateCreated;
            updateReasons.push("dateCreated");
        }
        if (data.roleSid && this.state.roleSid !== data.roleSid) {
            this.state.roleSid = data.roleSid;
            updateReasons.push("roleSid");
        }
        if ((Number.isInteger(data.lastConsumedMessageIndex) ||
            data.lastConsumedMessageIndex === null) &&
            this.state.lastReadMessageIndex !== data.lastConsumedMessageIndex) {
            this.state.lastReadMessageIndex = data.lastConsumedMessageIndex;
            updateReasons.push("lastReadMessageIndex");
        }
        if (data.lastConsumptionTimestamp) {
            const lastReadTimestamp = new Date(data.lastConsumptionTimestamp);
            if (!this.state.lastReadTimestamp ||
                this.state.lastReadTimestamp.getTime() !== lastReadTimestamp.getTime()) {
                this.state.lastReadTimestamp = lastReadTimestamp;
                updateReasons.push("lastReadTimestamp");
            }
        }
        if (data.bindings && !isEqual__default["default"](this.state.bindings, data.bindings)) {
            this.state.bindings = data.bindings;
            updateReasons.push("bindings");
        }
        if (updateReasons.length > 0) {
            this.emit("updated", { participant: this, updateReasons: updateReasons });
        }
        return this;
    }
    /**
     * Get the user for this participant and subscribes to it. Supported only for participants of type `chat`.
     */
    async getUser() {
        if (this.type != "chat") {
            throw new Error("Getting User is not supported for this Participant type: " + this.type);
        }
        return this.services.users.getUser(this.state.identity, this.state.userInfo);
    }
    /**
     * Remove the participant from the conversation.
     */
    async remove() {
        return this.conversation.removeParticipant(this);
    }
    /**
     * Update the attributes of the participant.
     * @param attributes New attributes.
     */
    async updateAttributes(attributes) {
        await this.services.commandExecutor.mutateResource("post", this.links.self, {
            attributes: JSON.stringify(attributes),
        });
        return this;
    }
}
/**
 * Fired when the participant has started typing.
 *
 * Parameters:
 * 1. {@link Participant} `participant` - the participant in question
 * @event
 */
Participant.typingStarted = "typingStarted";
/**
 * Fired when the participant has stopped typing.
 *
 * Parameters:
 * 1. {@link Participant} `participant` - the participant in question
 * @event
 */
Participant.typingEnded = "typingEnded";
/**
 * Fired when the fields of the participant have been updated.
 *
 * Parameters:
 * 1. object `data` - info object provided with the event. It has the following properties:
 *     * {@link Participant} participant - the participant in question
 *     * {@link ParticipantUpdateReason}[] updateReasons - array of reasons for the update
 * @event
 */
Participant.updated = "updated";
tslib_es6.__decorate([
    declarativeTypeValidator.validateTypesAsync(rules.json),
    tslib_es6.__metadata("design:type", Function),
    tslib_es6.__metadata("design:paramtypes", [Object]),
    tslib_es6.__metadata("design:returntype", Promise)
], Participant.prototype, "updateAttributes", null);

exports.Participant = Participant;
//# sourceMappingURL=participant.js.map
