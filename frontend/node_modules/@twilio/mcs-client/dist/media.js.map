{"version":3,"file":"media.js","sources":["../src/media.ts"],"sourcesContent":["import { Network } from \"./services/network\";\nimport { Configuration } from \"./configuration\";\nimport { CancellablePromise } from \"./cancellable-promise\";\n\ntype MediaCategory = \"media\" | \"body\" | \"history\";\n\n/**\n * Media descriptor on the MCS. Available via REST API only.\n */\ninterface MediaRecord {\n  sid: string;\n  serviceSid: string;\n  channelSid: string | null;\n  messageSid: string | null;\n  dateCreated: Date | null;\n  dateUploadUpdated: Date | null;\n  dateUpdated: Date | null;\n  size: number;\n  contentType: string;\n  filename: string | null;\n  category: MediaCategory;\n  author: string;\n  isMultipartUpstream: boolean;\n\n  url: string;\n  contentUrl: string;\n  contentDirectUrl: string | null;\n}\n\ninterface Links {\n  content: string;\n  content_direct_temporary?: string;\n}\n\ninterface MediaResponse {\n  sid: string;\n  service_sid: string;\n  channel_sid: string | null;\n  message_sid: string | null;\n  date_created?: string;\n  date_upload_updated?: string;\n  date_updated?: string;\n  size: number;\n  content_type: string;\n  filename?: string;\n  category?: MediaCategory;\n  author: string;\n  is_multipart_upstream?: boolean;\n  url: string;\n  links: Links;\n}\n\n/**\n * @classdesc A Media represents a metadata information for the media upload\n * @property {String} sid - The server-assigned unique identifier for Media\n * @property {String} serviceSid - Service instance id which Media belongs/uploaded to\n * @property {Date} dateCreated - When the Media was created\n * @property {Date} dateUpdated - When the Media was updated\n * @property {Number} size - Size of media, bytes\n * @property {String} contentType - content type of media\n * @property {String} fileName - file name, if present, null otherwise\n * @property {MediaCategory} category - attachment category\n */\nclass Media {\n  private state!: MediaRecord;\n  private network: Network;\n  private config: Configuration;\n\n  constructor(config: Configuration, network: Network, data: MediaResponse) {\n    this.config = config;\n    this.network = network;\n    this._update(data);\n  }\n\n  public get sid(): string {\n    return this.state.sid;\n  }\n\n  public get serviceSid(): string {\n    return this.state.serviceSid;\n  }\n\n  public get dateCreated(): Date | null {\n    return this.state.dateCreated;\n  }\n\n  public get dateUpdated(): Date | null {\n    return this.state.dateUpdated;\n  }\n\n  public get contentType(): string {\n    return this.state.contentType;\n  }\n\n  public get size(): number {\n    return this.state.size;\n  }\n\n  /** @deprecated Use filename instead */\n  public get fileName(): string | null {\n    return this.state.filename;\n  }\n\n  public get filename(): string | null {\n    return this.state.filename;\n  }\n\n  public get category(): MediaCategory {\n    return this.state.category;\n  }\n\n  /**\n   * Returns direct content URL to uploaded binary. This URL will expire after some time.\n   * This function gets a new URL every time, preventing it from expiring but putting additional load on backend.\n   * See getCachedContentUrl() for a function that reduces the amount of network requests.\n   *\n   * It is reasonable to build your own refresh logic upon these two functions: as soon as URL returned\n   * by getCachedContentUrl() returns 40x status you should call getContentUrl() to refresh it.\n   */\n  public getContentUrl(): CancellablePromise<string | null> {\n    return new CancellablePromise(async (resolve, reject, onCancel) => {\n      const request = this.network.get(`${this.config.mediaUrl}/${this.sid}`);\n\n      onCancel(() => request.cancel());\n\n      try {\n        const response = await request;\n        this._update(response.body);\n        resolve(this.state.contentDirectUrl);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  private _update(data: MediaResponse): void {\n    this.state = {\n      sid: data.sid,\n      serviceSid: data.service_sid,\n      channelSid: data.channel_sid,\n      messageSid: data.message_sid,\n      dateCreated: data.date_created ? new Date(data.date_created) : null,\n      dateUploadUpdated: data.date_upload_updated\n        ? new Date(data.date_upload_updated)\n        : null,\n      dateUpdated: data.date_updated ? new Date(data.date_updated) : null,\n      size: data.size,\n      contentType: data.content_type,\n      author: data.author,\n      url: data.url,\n      contentUrl: data.links.content,\n      contentDirectUrl: data.links.content_direct_temporary ?? null,\n      filename: data.filename ?? null,\n      category: data.category ?? \"media\",\n      isMultipartUpstream: data.is_multipart_upstream ?? false,\n    };\n  }\n}\n\nexport { Media, MediaCategory, MediaResponse };\n"],"names":["CancellablePromise"],"mappings":"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"}