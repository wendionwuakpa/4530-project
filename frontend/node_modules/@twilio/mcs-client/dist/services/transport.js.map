{"version":3,"file":"transport.js","sources":["../../src/services/transport.ts"],"sourcesContent":["import { TransportError } from \"./transporterror\";\nimport { CancellablePromise } from \"../cancellable-promise\";\n\n// eslint-disable-next-line\nconst XHR = global[\"XMLHttpRequest\"] || require(\"xmlhttprequest\").XMLHttpRequest;\n\ntype Headers = { [id: string]: string };\n\nfunction parseResponseHeaders(headerString: string): Headers {\n  if (!headerString) {\n    return {};\n  }\n\n  return headerString\n    .split(\"\\u000d\\u000a\")\n    .map((el) => el.split(\"\\u003a\\u0020\"))\n    .filter((el) => el.length === 2 && el[1].length > 0)\n    .reduce((prev, curr) => {\n      prev[curr[0]] = curr[1];\n      return prev;\n    }, {});\n}\n\nfunction extractBody(xhr) {\n  const contentType = xhr.getResponseHeader(\"Content-Type\");\n  if (\n    !contentType ||\n    contentType.indexOf(\"application/json\") !== 0 ||\n    xhr.responseText.length === 0\n  ) {\n    return xhr.responseText;\n  }\n\n  try {\n    return JSON.parse(xhr.responseText);\n  } catch (e) {\n    return xhr.responseText;\n  }\n}\n\nfunction adaptHttpResponse(response: Response) {\n  try {\n    response.body = JSON.parse(response.body);\n  } catch (e) {} // eslint-disable-line no-empty\n  return response;\n}\n\ninterface Response {\n  status: any;\n  headers: Headers;\n  body: any;\n}\n\n/**\n * Provides generic network interface\n */\nclass Transport {\n  private static request(\n    method: string,\n    url: string,\n    headers: Headers,\n    body?\n  ): CancellablePromise<Response> {\n    return new CancellablePromise<Response>((resolve, reject, onCancel) => {\n      const xhr = new XHR();\n      let isCancelled = false;\n\n      onCancel(() => {\n        xhr.abort();\n        isCancelled = true;\n      });\n\n      xhr.open(method, url, true);\n\n      xhr.onreadystatechange = function onreadystatechange() {\n        if (xhr.readyState !== 4 || isCancelled) {\n          return;\n        }\n\n        const responseHeaders = parseResponseHeaders(\n          xhr.getAllResponseHeaders()\n        );\n        const body = extractBody(xhr);\n\n        if (200 <= xhr.status && xhr.status < 300) {\n          resolve({ status: xhr.status, headers: responseHeaders, body });\n        } else {\n          const status = xhr.statusText ?? \"NONE\";\n          let bodyRepresentation;\n          if (typeof body === \"string\") {\n            if (body && body.split(\"\\n\", 2).length === 1)\n              bodyRepresentation = body;\n            else {\n              // TODO: RTDSDK-3716: investigate why body is HTML string\n              const errorInfo = body\n                .replace(/<.*?>/g, \"\")\n                .split(/\\r\\n/g)\n                .filter((str) => str.length)[0]\n                ?.split(\" \");\n              bodyRepresentation =\n                errorInfo?.length > 2 ? errorInfo?.slice(1).join(\" \") : \"\";\n            }\n          } else {\n            bodyRepresentation = JSON.stringify(body);\n          }\n          const message = `${xhr.status}: [${status}] ${bodyRepresentation}`;\n          reject(\n            new TransportError(\n              message,\n              xhr.status,\n              body,\n              status,\n              responseHeaders\n            )\n          );\n        }\n      };\n\n      for (const headerName in headers) {\n        xhr.setRequestHeader(headerName, headers[headerName]);\n        if (\n          headerName === \"Content-Type\" &&\n          headers[headerName] === \"application/json\"\n        ) {\n          body = JSON.stringify(body);\n        }\n      }\n\n      xhr.send(body);\n    });\n  }\n\n  /**\n   * Make a GET request by given URL\n   */\n  public get(url: string, headers: Headers): CancellablePromise<Response> {\n    return Transport.request(\"GET\", url, headers);\n  }\n\n  /**\n   * Make a POST request by given URL\n   */\n  public post(\n    url: string,\n    headers: Headers,\n    body?\n  ): CancellablePromise<Response> {\n    return Transport.request(\"POST\", url, headers, body);\n  }\n}\n\nexport { Headers, Response, Transport };\n"],"names":["CancellablePromise","TransportError"],"mappings":"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"}