{"version":3,"file":"cancellable-promise.js","sources":["../src/cancellable-promise.ts"],"sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\n\n/**\n * Cancellable promise. Extends the functionality of the native Promise to include the cancel method.\n *\n * Example:\n *\n * ```ts\n *\n * const cancellableFetchPromise = new CancellablePromise(async (resolve, reject, onCancel) => {\n *     const request = fetch(\"https://example.com/\");\n *\n *     onCancel(() => request.cancel());\n *\n *     try {\n *         const response = await request;\n *         resolve(response);\n *     } catch (err) {\n *         reject(err);\n *     }\n * });\n *\n * cancellableFetchPromise.cancel();\n * ```\n */\nclass CancellablePromise<T> extends Promise<T> {\n  private readonly id: string;\n  private rejectPromise?: (reason?: any) => void;\n\n  private static readonly cancellationMap: Map<string, () => void> = new Map();\n\n  /**\n   * Creates a new CancellablePromise.\n   * @param executor A callback used to initialize the promise. This callback is passed three arguments:\n   * a resolve callback used to resolve the promise with a value or the result of another promise,\n   * a reject callback used to reject the promise with a provided reason or error,\n   * and an onCancel callback used to define behavior of cancellation.\n   */\n  constructor(\n    executor: (\n      resolve: (value: T | PromiseLike<T>) => void,\n      reject: (reason?: string | Error) => void,\n      onCancel: (cancellationFunction: () => void) => void\n    ) => void\n  ) {\n    const outerId = uuidv4();\n    let outerRejectPromise!: (reason?: any) => void;\n\n    super((resolve, reject) => {\n      outerRejectPromise = reject;\n      return executor(\n        (value: T | PromiseLike<T>) => {\n          CancellablePromise.cancellationMap.delete(outerId);\n          resolve(value);\n        },\n        (reason?: string | Error) => {\n          CancellablePromise.cancellationMap.delete(outerId);\n          reject(reason);\n        },\n        (cancellationFunction: () => void) => {\n          CancellablePromise.cancellationMap.set(outerId, cancellationFunction);\n        }\n      );\n    });\n\n    this.id = outerId;\n    this.rejectPromise = outerRejectPromise;\n  }\n\n  /**\n   * Cancels the promise and invokes the cancellation callback if it was defined during instantiation. Cancellation will result in the promise being rejected.\n   */\n  cancel(): this {\n    const onCancel = CancellablePromise.cancellationMap.get(this.id);\n\n    onCancel?.();\n\n    if (this.rejectPromise) {\n      this.catch(() => void 0);\n      this.rejectPromise(new Error(\"Promise was cancelled\"));\n    }\n\n    return this;\n  }\n}\n\nexport { CancellablePromise };\n"],"names":["uuidv4"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBG;AACH,MAAM,kBAAsB,SAAQ,OAAU,CAAA;AAM5C;;;;;;AAMG;AACH,IAAA,WAAA,CACE,QAIS,EAAA;AAET,QAAA,MAAM,OAAO,GAAGA,mBAAM,EAAE,CAAC;AACzB,QAAA,IAAI,kBAA2C,CAAC;AAEhD,QAAA,KAAK,CAAC,CAAC,OAAO,EAAE,MAAM,KAAI;YACxB,kBAAkB,GAAG,MAAM,CAAC;AAC5B,YAAA,OAAO,QAAQ,CACb,CAAC,KAAyB,KAAI;AAC5B,gBAAA,kBAAkB,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACnD,OAAO,CAAC,KAAK,CAAC,CAAC;AACjB,aAAC,EACD,CAAC,MAAuB,KAAI;AAC1B,gBAAA,kBAAkB,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACnD,MAAM,CAAC,MAAM,CAAC,CAAC;AACjB,aAAC,EACD,CAAC,oBAAgC,KAAI;gBACnC,kBAAkB,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,EAAE,oBAAoB,CAAC,CAAC;AACxE,aAAC,CACF,CAAC;AACJ,SAAC,CAAC,CAAC;AAEH,QAAA,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC;AAClB,QAAA,IAAI,CAAC,aAAa,GAAG,kBAAkB,CAAC;KACzC;AAED;;AAEG;IACH,MAAM,GAAA;AACJ,QAAA,MAAM,QAAQ,GAAG,kBAAkB,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAEjE,QAAA,QAAQ,KAAR,IAAA,IAAA,QAAQ,KAAR,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,QAAQ,EAAI,CAAC;QAEb,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC;AACxD,SAAA;AAED,QAAA,OAAO,IAAI,CAAC;KACb;;AAtDuB,kBAAA,CAAA,eAAe,GAA4B,IAAI,GAAG,EAAE;;;;"}