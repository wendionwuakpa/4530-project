{"version":3,"file":"client.js","sources":["../src/client.ts"],"sourcesContent":["import { Logger } from \"./logger\";\nimport { Configuration } from \"./configuration\";\nimport { Media, MediaCategory } from \"./media\";\nimport { Transport } from \"./services/transport\";\nimport { Network } from \"./services/network\";\nimport { version } from \"../package.json\";\nimport * as loglevel from \"loglevel\";\nimport {\n  validateTypesAsync,\n  validateTypes,\n  nonEmptyString,\n  literal,\n  pureObject,\n  validateConstructorTypes,\n} from \"@twilio/declarative-type-validator\";\nimport { CancellablePromise } from \"./cancellable-promise\";\n\nconst log = Logger.scope(\"\");\n//log.setLevel('trace');\n\nexport type LogLevel = loglevel.LogLevelDesc | null;\n\nexport interface Options {\n  region?: string;\n  logLevel?: loglevel.LogLevelDesc;\n  transport?: Transport;\n}\n\n/**\n * @classdesc A Client provides an interface for Media Content Service\n */\n@validateConstructorTypes(\n  nonEmptyString,\n  nonEmptyString,\n  [nonEmptyString, literal(null)],\n  [pureObject, \"undefined\"]\n)\nclass Client {\n  // eslint-disable-next-line\n  private readonly transport: any;\n  private options: Options;\n  private network: Network;\n  private config: Configuration;\n  public static readonly version: string = version;\n\n  /**\n   * Base URLs must be full URLs with host. If host is not provided it will be generated from a default configuration\n   * template using options.region.\n   *\n   * @param {String} token - Access token\n   * @param {String} baseUrl - Base URL for Media Content Service Media resource, i.e. /v1/Services/{serviceSid}/Media\n   * @param {String} baseSetUrl - Base URL for Media Content Service MediaSet resource, i.e. /v1/Services/{serviceSid}/MediaSet\n   * @param {Client#ClientOptions} [options] - Options to customize the Client\n   */\n  constructor(\n    token: string,\n    baseUrl: string,\n    baseSetUrl: string | null,\n    options: Options = {}\n  ) {\n    this.options = options;\n    this.options.logLevel = this.options.logLevel ?? \"silent\";\n    this.config = new Configuration(token, baseUrl, baseSetUrl, this.options);\n\n    log.setLevel(this.options.logLevel);\n\n    this.options.transport = this.options.transport ?? new Transport();\n\n    this.transport = this.options.transport;\n    this.network = new Network(this.config, this.transport);\n  }\n\n  /**\n   * These options can be passed to Client constructor\n   * @typedef {Object} Client#ClientOptions\n   * @property {String} [logLevel='silent'] - The level of logging to enable. Valid options\n   *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n   */\n\n  /**\n   * Update the token used for Client operations\n   * @param {String} token - The JWT string of the new token\n   * @returns {void}\n   */\n  @validateTypes(nonEmptyString)\n  public updateToken(token: string): void {\n    log.info(\"updateToken\");\n    this.config.updateToken(token);\n  }\n\n  /**\n   * Gets media from media service\n   * @param {String} sid - Media's SID\n   */\n  @validateTypesAsync(nonEmptyString)\n  public get(sid: string): CancellablePromise<Media> {\n    return new CancellablePromise(async (resolve, reject, onCancel) => {\n      const request = this.network.get(`${this.config.mediaUrl}/${sid}`);\n\n      onCancel(() => request.cancel());\n\n      try {\n        const response = await request;\n        resolve(new Media(this.config, this.network, response.body));\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Posts raw content to media service\n   * @param {String} contentType - content type of media\n   * @param {String|Buffer|Blob} media - content to post\n   * @param {MediaCategory|null} category - category for the media\n   */\n  public post(\n    contentType: string,\n    media: string | Buffer | Blob,\n    category: MediaCategory | null,\n    filename?: string\n  ): CancellablePromise<Media> {\n    return new CancellablePromise(async (resolve, reject, onCancel) => {\n      const request = this.network.post(\n        this.config.mediaUrl,\n        category ?? \"media\",\n        media,\n        contentType,\n        filename\n      );\n\n      onCancel(() => request.cancel());\n\n      try {\n        const response = await request;\n        resolve(new Media(this.config, this.network, response.body));\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Posts FormData to media service. Can be used only with browser engine's FormData.\n   * In non-browser FormData case the method will do promise reject with\n   * new TypeError(\"Posting FormData supported only with browser engine's FormData\")\n   * @param {FormData} formData - form data to post\n   * @param {MediaCategory|null} category - category for the media\n   */\n  public postFormData(\n    formData: FormData,\n    category?: MediaCategory | null\n  ): CancellablePromise<Media> {\n    return new CancellablePromise(async (resolve, reject, onCancel) => {\n      const request = this.network.post(\n        this.config.mediaUrl,\n        category ?? \"media\",\n        formData\n      );\n\n      onCancel(() => request.cancel());\n\n      try {\n        const response = await request;\n        resolve(new Media(this.config, this.network, response.body));\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Retrieve information about multiple media SIDs at the same time.\n   * @param mediaSids Array of Media SIDs to get information from.\n   */\n  public mediaSetGet(mediaSids: string[]): CancellablePromise<Media[]> {\n    return new CancellablePromise(async (resolve, reject, onCancel) => {\n      const query = {\n        command: \"get\",\n        list: mediaSids.map((sid) => ({ media_sid: sid })),\n      };\n      const request = this.network.post(\n        `${this.config.mediaSetUrl}`,\n        null,\n        query,\n        \"application/json\"\n      );\n\n      onCancel(() => request.cancel());\n\n      try {\n        const response = await request;\n        const media = response.body.map((item) => {\n          if (item.code !== 200) {\n            reject(\n              `Failed to obtain detailed information about Media items (failed SID ${item.media_record.sid})`\n            );\n            return;\n          }\n          return new Media(this.config, this.network, item.media_record);\n        });\n\n        resolve(media);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Retrieve temporary URLs for a set of media SIDs.\n   * @param mediaSids array of the media SIDs to get URLs from.\n   */\n  public mediaSetGetContentUrls(\n    mediaSids: string[]\n  ): CancellablePromise<Map<string, string>> {\n    return new CancellablePromise(async (resolve, reject, onCancel) => {\n      const query = {\n        command: \"get\",\n        list: mediaSids.map((sid) => ({ media_sid: sid })),\n      };\n      const request = this.network.post(\n        `${this.config.mediaSetUrl}`,\n        null,\n        query,\n        \"application/json\"\n      );\n\n      onCancel(() => request.cancel());\n\n      try {\n        const response = await request;\n        const urls = new Map();\n        response.body.forEach((item) => {\n          if (item.code !== 200) {\n            reject(\n              `Failed to obtain detailed information about Media items (failed SID ${item.media_record.sid})`\n            );\n            return;\n          }\n          urls.set(\n            item.media_record.sid,\n            item.media_record.links.content_direct_temporary\n          );\n        });\n\n        resolve(urls);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n}\n\n// Proper renames should happen in index.ts,\n// otherwise it might screw up exported TS types information.\nexport { Client, Media, MediaCategory };\n"],"names":["Logger","Client","Configuration","Transport","Network","CancellablePromise","Media","media","version","__decorate","validateTypes","nonEmptyString","validateTypesAsync","validateConstructorTypes","literal","pureObject"],"mappings":"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"}